
MyKeyPad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  000034cc  00003560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008000c8  008000c8  000035c8  2**0
                  ALLOC
  3 .stab         00002a48  00000000  00000000  000035c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001306  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007316  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007456  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000075c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000920f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a0fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b008  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b295  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ba63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 28 00 	jmp	0x50	; 0x50 <__ctors_end>
       4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
       8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
       c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000050 <__ctors_end>:
      50:	11 24       	eor	r1, r1
      52:	1f be       	out	0x3f, r1	; 63
      54:	cf e5       	ldi	r28, 0x5F	; 95
      56:	d8 e0       	ldi	r29, 0x08	; 8
      58:	de bf       	out	0x3e, r29	; 62
      5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_copy_data>:
      5c:	10 e0       	ldi	r17, 0x00	; 0
      5e:	a0 e6       	ldi	r26, 0x60	; 96
      60:	b0 e0       	ldi	r27, 0x00	; 0
      62:	ec ec       	ldi	r30, 0xCC	; 204
      64:	f4 e3       	ldi	r31, 0x34	; 52
      66:	02 c0       	rjmp	.+4      	; 0x6c <.do_copy_data_start>

00000068 <.do_copy_data_loop>:
      68:	05 90       	lpm	r0, Z+
      6a:	0d 92       	st	X+, r0

0000006c <.do_copy_data_start>:
      6c:	a8 3c       	cpi	r26, 0xC8	; 200
      6e:	b1 07       	cpc	r27, r17
      70:	d9 f7       	brne	.-10     	; 0x68 <.do_copy_data_loop>

00000072 <__do_clear_bss>:
      72:	10 e0       	ldi	r17, 0x00	; 0
      74:	a8 ec       	ldi	r26, 0xC8	; 200
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
      7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
      7c:	a9 3d       	cpi	r26, 0xD9	; 217
      7e:	b1 07       	cpc	r27, r17
      80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
      82:	0e 94 b9 19 	call	0x3372	; 0x3372 <main>
      86:	0c 94 64 1a 	jmp	0x34c8	; 0x34c8 <_exit>

0000008a <__bad_interrupt>:
      8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <__fixunssfsi>:
      8e:	ef 92       	push	r14
      90:	ff 92       	push	r15
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	7b 01       	movw	r14, r22
      98:	8c 01       	movw	r16, r24
      9a:	20 e0       	ldi	r18, 0x00	; 0
      9c:	30 e0       	ldi	r19, 0x00	; 0
      9e:	40 e0       	ldi	r20, 0x00	; 0
      a0:	5f e4       	ldi	r21, 0x4F	; 79
      a2:	0e 94 47 03 	call	0x68e	; 0x68e <__gesf2>
      a6:	88 23       	and	r24, r24
      a8:	8c f0       	brlt	.+34     	; 0xcc <__fixunssfsi+0x3e>
      aa:	c8 01       	movw	r24, r16
      ac:	b7 01       	movw	r22, r14
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	30 e0       	ldi	r19, 0x00	; 0
      b2:	40 e0       	ldi	r20, 0x00	; 0
      b4:	5f e4       	ldi	r21, 0x4F	; 79
      b6:	0e 94 bf 01 	call	0x37e	; 0x37e <__subsf3>
      ba:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixsfsi>
      be:	9b 01       	movw	r18, r22
      c0:	ac 01       	movw	r20, r24
      c2:	20 50       	subi	r18, 0x00	; 0
      c4:	30 40       	sbci	r19, 0x00	; 0
      c6:	40 40       	sbci	r20, 0x00	; 0
      c8:	50 48       	sbci	r21, 0x80	; 128
      ca:	06 c0       	rjmp	.+12     	; 0xd8 <__fixunssfsi+0x4a>
      cc:	c8 01       	movw	r24, r16
      ce:	b7 01       	movw	r22, r14
      d0:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixsfsi>
      d4:	9b 01       	movw	r18, r22
      d6:	ac 01       	movw	r20, r24
      d8:	b9 01       	movw	r22, r18
      da:	ca 01       	movw	r24, r20
      dc:	1f 91       	pop	r17
      de:	0f 91       	pop	r16
      e0:	ff 90       	pop	r15
      e2:	ef 90       	pop	r14
      e4:	08 95       	ret

000000e6 <_fpadd_parts>:
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e9 e7       	ldi	r30, 0x79	; 121
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__prologue_saves__>
      f2:	dc 01       	movw	r26, r24
      f4:	2b 01       	movw	r4, r22
      f6:	fa 01       	movw	r30, r20
      f8:	9c 91       	ld	r25, X
      fa:	92 30       	cpi	r25, 0x02	; 2
      fc:	08 f4       	brcc	.+2      	; 0x100 <_fpadd_parts+0x1a>
      fe:	39 c1       	rjmp	.+626    	; 0x372 <_fpadd_parts+0x28c>
     100:	eb 01       	movw	r28, r22
     102:	88 81       	ld	r24, Y
     104:	82 30       	cpi	r24, 0x02	; 2
     106:	08 f4       	brcc	.+2      	; 0x10a <_fpadd_parts+0x24>
     108:	33 c1       	rjmp	.+614    	; 0x370 <_fpadd_parts+0x28a>
     10a:	94 30       	cpi	r25, 0x04	; 4
     10c:	69 f4       	brne	.+26     	; 0x128 <_fpadd_parts+0x42>
     10e:	84 30       	cpi	r24, 0x04	; 4
     110:	09 f0       	breq	.+2      	; 0x114 <_fpadd_parts+0x2e>
     112:	2f c1       	rjmp	.+606    	; 0x372 <_fpadd_parts+0x28c>
     114:	11 96       	adiw	r26, 0x01	; 1
     116:	9c 91       	ld	r25, X
     118:	11 97       	sbiw	r26, 0x01	; 1
     11a:	89 81       	ldd	r24, Y+1	; 0x01
     11c:	98 17       	cp	r25, r24
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x3c>
     120:	28 c1       	rjmp	.+592    	; 0x372 <_fpadd_parts+0x28c>
     122:	ae eb       	ldi	r26, 0xBE	; 190
     124:	b0 e0       	ldi	r27, 0x00	; 0
     126:	25 c1       	rjmp	.+586    	; 0x372 <_fpadd_parts+0x28c>
     128:	84 30       	cpi	r24, 0x04	; 4
     12a:	09 f4       	brne	.+2      	; 0x12e <_fpadd_parts+0x48>
     12c:	21 c1       	rjmp	.+578    	; 0x370 <_fpadd_parts+0x28a>
     12e:	82 30       	cpi	r24, 0x02	; 2
     130:	a9 f4       	brne	.+42     	; 0x15c <_fpadd_parts+0x76>
     132:	92 30       	cpi	r25, 0x02	; 2
     134:	09 f0       	breq	.+2      	; 0x138 <_fpadd_parts+0x52>
     136:	1d c1       	rjmp	.+570    	; 0x372 <_fpadd_parts+0x28c>
     138:	9a 01       	movw	r18, r20
     13a:	ad 01       	movw	r20, r26
     13c:	88 e0       	ldi	r24, 0x08	; 8
     13e:	ea 01       	movw	r28, r20
     140:	09 90       	ld	r0, Y+
     142:	ae 01       	movw	r20, r28
     144:	e9 01       	movw	r28, r18
     146:	09 92       	st	Y+, r0
     148:	9e 01       	movw	r18, r28
     14a:	81 50       	subi	r24, 0x01	; 1
     14c:	c1 f7       	brne	.-16     	; 0x13e <_fpadd_parts+0x58>
     14e:	e2 01       	movw	r28, r4
     150:	89 81       	ldd	r24, Y+1	; 0x01
     152:	11 96       	adiw	r26, 0x01	; 1
     154:	9c 91       	ld	r25, X
     156:	89 23       	and	r24, r25
     158:	81 83       	std	Z+1, r24	; 0x01
     15a:	08 c1       	rjmp	.+528    	; 0x36c <_fpadd_parts+0x286>
     15c:	92 30       	cpi	r25, 0x02	; 2
     15e:	09 f4       	brne	.+2      	; 0x162 <_fpadd_parts+0x7c>
     160:	07 c1       	rjmp	.+526    	; 0x370 <_fpadd_parts+0x28a>
     162:	12 96       	adiw	r26, 0x02	; 2
     164:	2d 90       	ld	r2, X+
     166:	3c 90       	ld	r3, X
     168:	13 97       	sbiw	r26, 0x03	; 3
     16a:	eb 01       	movw	r28, r22
     16c:	8a 81       	ldd	r24, Y+2	; 0x02
     16e:	9b 81       	ldd	r25, Y+3	; 0x03
     170:	14 96       	adiw	r26, 0x04	; 4
     172:	ad 90       	ld	r10, X+
     174:	bd 90       	ld	r11, X+
     176:	cd 90       	ld	r12, X+
     178:	dc 90       	ld	r13, X
     17a:	17 97       	sbiw	r26, 0x07	; 7
     17c:	ec 80       	ldd	r14, Y+4	; 0x04
     17e:	fd 80       	ldd	r15, Y+5	; 0x05
     180:	0e 81       	ldd	r16, Y+6	; 0x06
     182:	1f 81       	ldd	r17, Y+7	; 0x07
     184:	91 01       	movw	r18, r2
     186:	28 1b       	sub	r18, r24
     188:	39 0b       	sbc	r19, r25
     18a:	b9 01       	movw	r22, r18
     18c:	37 ff       	sbrs	r19, 7
     18e:	04 c0       	rjmp	.+8      	; 0x198 <_fpadd_parts+0xb2>
     190:	66 27       	eor	r22, r22
     192:	77 27       	eor	r23, r23
     194:	62 1b       	sub	r22, r18
     196:	73 0b       	sbc	r23, r19
     198:	60 32       	cpi	r22, 0x20	; 32
     19a:	71 05       	cpc	r23, r1
     19c:	0c f0       	brlt	.+2      	; 0x1a0 <_fpadd_parts+0xba>
     19e:	61 c0       	rjmp	.+194    	; 0x262 <_fpadd_parts+0x17c>
     1a0:	12 16       	cp	r1, r18
     1a2:	13 06       	cpc	r1, r19
     1a4:	6c f5       	brge	.+90     	; 0x200 <_fpadd_parts+0x11a>
     1a6:	37 01       	movw	r6, r14
     1a8:	48 01       	movw	r8, r16
     1aa:	06 2e       	mov	r0, r22
     1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <_fpadd_parts+0xd0>
     1ae:	96 94       	lsr	r9
     1b0:	87 94       	ror	r8
     1b2:	77 94       	ror	r7
     1b4:	67 94       	ror	r6
     1b6:	0a 94       	dec	r0
     1b8:	d2 f7       	brpl	.-12     	; 0x1ae <_fpadd_parts+0xc8>
     1ba:	21 e0       	ldi	r18, 0x01	; 1
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	40 e0       	ldi	r20, 0x00	; 0
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	04 c0       	rjmp	.+8      	; 0x1cc <_fpadd_parts+0xe6>
     1c4:	22 0f       	add	r18, r18
     1c6:	33 1f       	adc	r19, r19
     1c8:	44 1f       	adc	r20, r20
     1ca:	55 1f       	adc	r21, r21
     1cc:	6a 95       	dec	r22
     1ce:	d2 f7       	brpl	.-12     	; 0x1c4 <_fpadd_parts+0xde>
     1d0:	21 50       	subi	r18, 0x01	; 1
     1d2:	30 40       	sbci	r19, 0x00	; 0
     1d4:	40 40       	sbci	r20, 0x00	; 0
     1d6:	50 40       	sbci	r21, 0x00	; 0
     1d8:	2e 21       	and	r18, r14
     1da:	3f 21       	and	r19, r15
     1dc:	40 23       	and	r20, r16
     1de:	51 23       	and	r21, r17
     1e0:	21 15       	cp	r18, r1
     1e2:	31 05       	cpc	r19, r1
     1e4:	41 05       	cpc	r20, r1
     1e6:	51 05       	cpc	r21, r1
     1e8:	21 f0       	breq	.+8      	; 0x1f2 <_fpadd_parts+0x10c>
     1ea:	21 e0       	ldi	r18, 0x01	; 1
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	40 e0       	ldi	r20, 0x00	; 0
     1f0:	50 e0       	ldi	r21, 0x00	; 0
     1f2:	79 01       	movw	r14, r18
     1f4:	8a 01       	movw	r16, r20
     1f6:	e6 28       	or	r14, r6
     1f8:	f7 28       	or	r15, r7
     1fa:	08 29       	or	r16, r8
     1fc:	19 29       	or	r17, r9
     1fe:	3c c0       	rjmp	.+120    	; 0x278 <_fpadd_parts+0x192>
     200:	23 2b       	or	r18, r19
     202:	d1 f1       	breq	.+116    	; 0x278 <_fpadd_parts+0x192>
     204:	26 0e       	add	r2, r22
     206:	37 1e       	adc	r3, r23
     208:	35 01       	movw	r6, r10
     20a:	46 01       	movw	r8, r12
     20c:	06 2e       	mov	r0, r22
     20e:	04 c0       	rjmp	.+8      	; 0x218 <_fpadd_parts+0x132>
     210:	96 94       	lsr	r9
     212:	87 94       	ror	r8
     214:	77 94       	ror	r7
     216:	67 94       	ror	r6
     218:	0a 94       	dec	r0
     21a:	d2 f7       	brpl	.-12     	; 0x210 <_fpadd_parts+0x12a>
     21c:	21 e0       	ldi	r18, 0x01	; 1
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	04 c0       	rjmp	.+8      	; 0x22e <_fpadd_parts+0x148>
     226:	22 0f       	add	r18, r18
     228:	33 1f       	adc	r19, r19
     22a:	44 1f       	adc	r20, r20
     22c:	55 1f       	adc	r21, r21
     22e:	6a 95       	dec	r22
     230:	d2 f7       	brpl	.-12     	; 0x226 <_fpadd_parts+0x140>
     232:	21 50       	subi	r18, 0x01	; 1
     234:	30 40       	sbci	r19, 0x00	; 0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	50 40       	sbci	r21, 0x00	; 0
     23a:	2a 21       	and	r18, r10
     23c:	3b 21       	and	r19, r11
     23e:	4c 21       	and	r20, r12
     240:	5d 21       	and	r21, r13
     242:	21 15       	cp	r18, r1
     244:	31 05       	cpc	r19, r1
     246:	41 05       	cpc	r20, r1
     248:	51 05       	cpc	r21, r1
     24a:	21 f0       	breq	.+8      	; 0x254 <_fpadd_parts+0x16e>
     24c:	21 e0       	ldi	r18, 0x01	; 1
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e0       	ldi	r20, 0x00	; 0
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	59 01       	movw	r10, r18
     256:	6a 01       	movw	r12, r20
     258:	a6 28       	or	r10, r6
     25a:	b7 28       	or	r11, r7
     25c:	c8 28       	or	r12, r8
     25e:	d9 28       	or	r13, r9
     260:	0b c0       	rjmp	.+22     	; 0x278 <_fpadd_parts+0x192>
     262:	82 15       	cp	r24, r2
     264:	93 05       	cpc	r25, r3
     266:	2c f0       	brlt	.+10     	; 0x272 <_fpadd_parts+0x18c>
     268:	1c 01       	movw	r2, r24
     26a:	aa 24       	eor	r10, r10
     26c:	bb 24       	eor	r11, r11
     26e:	65 01       	movw	r12, r10
     270:	03 c0       	rjmp	.+6      	; 0x278 <_fpadd_parts+0x192>
     272:	ee 24       	eor	r14, r14
     274:	ff 24       	eor	r15, r15
     276:	87 01       	movw	r16, r14
     278:	11 96       	adiw	r26, 0x01	; 1
     27a:	9c 91       	ld	r25, X
     27c:	d2 01       	movw	r26, r4
     27e:	11 96       	adiw	r26, 0x01	; 1
     280:	8c 91       	ld	r24, X
     282:	98 17       	cp	r25, r24
     284:	09 f4       	brne	.+2      	; 0x288 <_fpadd_parts+0x1a2>
     286:	45 c0       	rjmp	.+138    	; 0x312 <_fpadd_parts+0x22c>
     288:	99 23       	and	r25, r25
     28a:	39 f0       	breq	.+14     	; 0x29a <_fpadd_parts+0x1b4>
     28c:	a8 01       	movw	r20, r16
     28e:	97 01       	movw	r18, r14
     290:	2a 19       	sub	r18, r10
     292:	3b 09       	sbc	r19, r11
     294:	4c 09       	sbc	r20, r12
     296:	5d 09       	sbc	r21, r13
     298:	06 c0       	rjmp	.+12     	; 0x2a6 <_fpadd_parts+0x1c0>
     29a:	a6 01       	movw	r20, r12
     29c:	95 01       	movw	r18, r10
     29e:	2e 19       	sub	r18, r14
     2a0:	3f 09       	sbc	r19, r15
     2a2:	40 0b       	sbc	r20, r16
     2a4:	51 0b       	sbc	r21, r17
     2a6:	57 fd       	sbrc	r21, 7
     2a8:	08 c0       	rjmp	.+16     	; 0x2ba <_fpadd_parts+0x1d4>
     2aa:	11 82       	std	Z+1, r1	; 0x01
     2ac:	33 82       	std	Z+3, r3	; 0x03
     2ae:	22 82       	std	Z+2, r2	; 0x02
     2b0:	24 83       	std	Z+4, r18	; 0x04
     2b2:	35 83       	std	Z+5, r19	; 0x05
     2b4:	46 83       	std	Z+6, r20	; 0x06
     2b6:	57 83       	std	Z+7, r21	; 0x07
     2b8:	1d c0       	rjmp	.+58     	; 0x2f4 <_fpadd_parts+0x20e>
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	81 83       	std	Z+1, r24	; 0x01
     2be:	33 82       	std	Z+3, r3	; 0x03
     2c0:	22 82       	std	Z+2, r2	; 0x02
     2c2:	88 27       	eor	r24, r24
     2c4:	99 27       	eor	r25, r25
     2c6:	dc 01       	movw	r26, r24
     2c8:	82 1b       	sub	r24, r18
     2ca:	93 0b       	sbc	r25, r19
     2cc:	a4 0b       	sbc	r26, r20
     2ce:	b5 0b       	sbc	r27, r21
     2d0:	84 83       	std	Z+4, r24	; 0x04
     2d2:	95 83       	std	Z+5, r25	; 0x05
     2d4:	a6 83       	std	Z+6, r26	; 0x06
     2d6:	b7 83       	std	Z+7, r27	; 0x07
     2d8:	0d c0       	rjmp	.+26     	; 0x2f4 <_fpadd_parts+0x20e>
     2da:	22 0f       	add	r18, r18
     2dc:	33 1f       	adc	r19, r19
     2de:	44 1f       	adc	r20, r20
     2e0:	55 1f       	adc	r21, r21
     2e2:	24 83       	std	Z+4, r18	; 0x04
     2e4:	35 83       	std	Z+5, r19	; 0x05
     2e6:	46 83       	std	Z+6, r20	; 0x06
     2e8:	57 83       	std	Z+7, r21	; 0x07
     2ea:	82 81       	ldd	r24, Z+2	; 0x02
     2ec:	93 81       	ldd	r25, Z+3	; 0x03
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	93 83       	std	Z+3, r25	; 0x03
     2f2:	82 83       	std	Z+2, r24	; 0x02
     2f4:	24 81       	ldd	r18, Z+4	; 0x04
     2f6:	35 81       	ldd	r19, Z+5	; 0x05
     2f8:	46 81       	ldd	r20, Z+6	; 0x06
     2fa:	57 81       	ldd	r21, Z+7	; 0x07
     2fc:	da 01       	movw	r26, r20
     2fe:	c9 01       	movw	r24, r18
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	a1 09       	sbc	r26, r1
     304:	b1 09       	sbc	r27, r1
     306:	8f 5f       	subi	r24, 0xFF	; 255
     308:	9f 4f       	sbci	r25, 0xFF	; 255
     30a:	af 4f       	sbci	r26, 0xFF	; 255
     30c:	bf 43       	sbci	r27, 0x3F	; 63
     30e:	28 f3       	brcs	.-54     	; 0x2da <_fpadd_parts+0x1f4>
     310:	0b c0       	rjmp	.+22     	; 0x328 <_fpadd_parts+0x242>
     312:	91 83       	std	Z+1, r25	; 0x01
     314:	33 82       	std	Z+3, r3	; 0x03
     316:	22 82       	std	Z+2, r2	; 0x02
     318:	ea 0c       	add	r14, r10
     31a:	fb 1c       	adc	r15, r11
     31c:	0c 1d       	adc	r16, r12
     31e:	1d 1d       	adc	r17, r13
     320:	e4 82       	std	Z+4, r14	; 0x04
     322:	f5 82       	std	Z+5, r15	; 0x05
     324:	06 83       	std	Z+6, r16	; 0x06
     326:	17 83       	std	Z+7, r17	; 0x07
     328:	83 e0       	ldi	r24, 0x03	; 3
     32a:	80 83       	st	Z, r24
     32c:	24 81       	ldd	r18, Z+4	; 0x04
     32e:	35 81       	ldd	r19, Z+5	; 0x05
     330:	46 81       	ldd	r20, Z+6	; 0x06
     332:	57 81       	ldd	r21, Z+7	; 0x07
     334:	57 ff       	sbrs	r21, 7
     336:	1a c0       	rjmp	.+52     	; 0x36c <_fpadd_parts+0x286>
     338:	c9 01       	movw	r24, r18
     33a:	aa 27       	eor	r26, r26
     33c:	97 fd       	sbrc	r25, 7
     33e:	a0 95       	com	r26
     340:	ba 2f       	mov	r27, r26
     342:	81 70       	andi	r24, 0x01	; 1
     344:	90 70       	andi	r25, 0x00	; 0
     346:	a0 70       	andi	r26, 0x00	; 0
     348:	b0 70       	andi	r27, 0x00	; 0
     34a:	56 95       	lsr	r21
     34c:	47 95       	ror	r20
     34e:	37 95       	ror	r19
     350:	27 95       	ror	r18
     352:	82 2b       	or	r24, r18
     354:	93 2b       	or	r25, r19
     356:	a4 2b       	or	r26, r20
     358:	b5 2b       	or	r27, r21
     35a:	84 83       	std	Z+4, r24	; 0x04
     35c:	95 83       	std	Z+5, r25	; 0x05
     35e:	a6 83       	std	Z+6, r26	; 0x06
     360:	b7 83       	std	Z+7, r27	; 0x07
     362:	82 81       	ldd	r24, Z+2	; 0x02
     364:	93 81       	ldd	r25, Z+3	; 0x03
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	93 83       	std	Z+3, r25	; 0x03
     36a:	82 83       	std	Z+2, r24	; 0x02
     36c:	df 01       	movw	r26, r30
     36e:	01 c0       	rjmp	.+2      	; 0x372 <_fpadd_parts+0x28c>
     370:	d2 01       	movw	r26, r4
     372:	cd 01       	movw	r24, r26
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
     378:	e2 e1       	ldi	r30, 0x12	; 18
     37a:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <__epilogue_restores__>

0000037e <__subsf3>:
     37e:	a0 e2       	ldi	r26, 0x20	; 32
     380:	b0 e0       	ldi	r27, 0x00	; 0
     382:	e5 ec       	ldi	r30, 0xC5	; 197
     384:	f1 e0       	ldi	r31, 0x01	; 1
     386:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__prologue_saves__+0x18>
     38a:	69 83       	std	Y+1, r22	; 0x01
     38c:	7a 83       	std	Y+2, r23	; 0x02
     38e:	8b 83       	std	Y+3, r24	; 0x03
     390:	9c 83       	std	Y+4, r25	; 0x04
     392:	2d 83       	std	Y+5, r18	; 0x05
     394:	3e 83       	std	Y+6, r19	; 0x06
     396:	4f 83       	std	Y+7, r20	; 0x07
     398:	58 87       	std	Y+8, r21	; 0x08
     39a:	e9 e0       	ldi	r30, 0x09	; 9
     39c:	ee 2e       	mov	r14, r30
     39e:	f1 2c       	mov	r15, r1
     3a0:	ec 0e       	add	r14, r28
     3a2:	fd 1e       	adc	r15, r29
     3a4:	ce 01       	movw	r24, r28
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	b7 01       	movw	r22, r14
     3aa:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__unpack_f>
     3ae:	8e 01       	movw	r16, r28
     3b0:	0f 5e       	subi	r16, 0xEF	; 239
     3b2:	1f 4f       	sbci	r17, 0xFF	; 255
     3b4:	ce 01       	movw	r24, r28
     3b6:	05 96       	adiw	r24, 0x05	; 5
     3b8:	b8 01       	movw	r22, r16
     3ba:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__unpack_f>
     3be:	8a 89       	ldd	r24, Y+18	; 0x12
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	89 27       	eor	r24, r25
     3c4:	8a 8b       	std	Y+18, r24	; 0x12
     3c6:	c7 01       	movw	r24, r14
     3c8:	b8 01       	movw	r22, r16
     3ca:	ae 01       	movw	r20, r28
     3cc:	47 5e       	subi	r20, 0xE7	; 231
     3ce:	5f 4f       	sbci	r21, 0xFF	; 255
     3d0:	0e 94 73 00 	call	0xe6	; 0xe6 <_fpadd_parts>
     3d4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__pack_f>
     3d8:	a0 96       	adiw	r28, 0x20	; 32
     3da:	e6 e0       	ldi	r30, 0x06	; 6
     3dc:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <__epilogue_restores__+0x18>

000003e0 <__addsf3>:
     3e0:	a0 e2       	ldi	r26, 0x20	; 32
     3e2:	b0 e0       	ldi	r27, 0x00	; 0
     3e4:	e6 ef       	ldi	r30, 0xF6	; 246
     3e6:	f1 e0       	ldi	r31, 0x01	; 1
     3e8:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__prologue_saves__+0x18>
     3ec:	69 83       	std	Y+1, r22	; 0x01
     3ee:	7a 83       	std	Y+2, r23	; 0x02
     3f0:	8b 83       	std	Y+3, r24	; 0x03
     3f2:	9c 83       	std	Y+4, r25	; 0x04
     3f4:	2d 83       	std	Y+5, r18	; 0x05
     3f6:	3e 83       	std	Y+6, r19	; 0x06
     3f8:	4f 83       	std	Y+7, r20	; 0x07
     3fa:	58 87       	std	Y+8, r21	; 0x08
     3fc:	f9 e0       	ldi	r31, 0x09	; 9
     3fe:	ef 2e       	mov	r14, r31
     400:	f1 2c       	mov	r15, r1
     402:	ec 0e       	add	r14, r28
     404:	fd 1e       	adc	r15, r29
     406:	ce 01       	movw	r24, r28
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	b7 01       	movw	r22, r14
     40c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__unpack_f>
     410:	8e 01       	movw	r16, r28
     412:	0f 5e       	subi	r16, 0xEF	; 239
     414:	1f 4f       	sbci	r17, 0xFF	; 255
     416:	ce 01       	movw	r24, r28
     418:	05 96       	adiw	r24, 0x05	; 5
     41a:	b8 01       	movw	r22, r16
     41c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__unpack_f>
     420:	c7 01       	movw	r24, r14
     422:	b8 01       	movw	r22, r16
     424:	ae 01       	movw	r20, r28
     426:	47 5e       	subi	r20, 0xE7	; 231
     428:	5f 4f       	sbci	r21, 0xFF	; 255
     42a:	0e 94 73 00 	call	0xe6	; 0xe6 <_fpadd_parts>
     42e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__pack_f>
     432:	a0 96       	adiw	r28, 0x20	; 32
     434:	e6 e0       	ldi	r30, 0x06	; 6
     436:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <__epilogue_restores__+0x18>

0000043a <__mulsf3>:
     43a:	a0 e2       	ldi	r26, 0x20	; 32
     43c:	b0 e0       	ldi	r27, 0x00	; 0
     43e:	e3 e2       	ldi	r30, 0x23	; 35
     440:	f2 e0       	ldi	r31, 0x02	; 2
     442:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__prologue_saves__>
     446:	69 83       	std	Y+1, r22	; 0x01
     448:	7a 83       	std	Y+2, r23	; 0x02
     44a:	8b 83       	std	Y+3, r24	; 0x03
     44c:	9c 83       	std	Y+4, r25	; 0x04
     44e:	2d 83       	std	Y+5, r18	; 0x05
     450:	3e 83       	std	Y+6, r19	; 0x06
     452:	4f 83       	std	Y+7, r20	; 0x07
     454:	58 87       	std	Y+8, r21	; 0x08
     456:	ce 01       	movw	r24, r28
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	be 01       	movw	r22, r28
     45c:	67 5f       	subi	r22, 0xF7	; 247
     45e:	7f 4f       	sbci	r23, 0xFF	; 255
     460:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__unpack_f>
     464:	ce 01       	movw	r24, r28
     466:	05 96       	adiw	r24, 0x05	; 5
     468:	be 01       	movw	r22, r28
     46a:	6f 5e       	subi	r22, 0xEF	; 239
     46c:	7f 4f       	sbci	r23, 0xFF	; 255
     46e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__unpack_f>
     472:	99 85       	ldd	r25, Y+9	; 0x09
     474:	92 30       	cpi	r25, 0x02	; 2
     476:	88 f0       	brcs	.+34     	; 0x49a <__mulsf3+0x60>
     478:	89 89       	ldd	r24, Y+17	; 0x11
     47a:	82 30       	cpi	r24, 0x02	; 2
     47c:	c8 f0       	brcs	.+50     	; 0x4b0 <__mulsf3+0x76>
     47e:	94 30       	cpi	r25, 0x04	; 4
     480:	19 f4       	brne	.+6      	; 0x488 <__mulsf3+0x4e>
     482:	82 30       	cpi	r24, 0x02	; 2
     484:	51 f4       	brne	.+20     	; 0x49a <__mulsf3+0x60>
     486:	04 c0       	rjmp	.+8      	; 0x490 <__mulsf3+0x56>
     488:	84 30       	cpi	r24, 0x04	; 4
     48a:	29 f4       	brne	.+10     	; 0x496 <__mulsf3+0x5c>
     48c:	92 30       	cpi	r25, 0x02	; 2
     48e:	81 f4       	brne	.+32     	; 0x4b0 <__mulsf3+0x76>
     490:	8e eb       	ldi	r24, 0xBE	; 190
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	c6 c0       	rjmp	.+396    	; 0x622 <__mulsf3+0x1e8>
     496:	92 30       	cpi	r25, 0x02	; 2
     498:	49 f4       	brne	.+18     	; 0x4ac <__mulsf3+0x72>
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	9a 85       	ldd	r25, Y+10	; 0x0a
     49e:	8a 89       	ldd	r24, Y+18	; 0x12
     4a0:	98 13       	cpse	r25, r24
     4a2:	21 e0       	ldi	r18, 0x01	; 1
     4a4:	2a 87       	std	Y+10, r18	; 0x0a
     4a6:	ce 01       	movw	r24, r28
     4a8:	09 96       	adiw	r24, 0x09	; 9
     4aa:	bb c0       	rjmp	.+374    	; 0x622 <__mulsf3+0x1e8>
     4ac:	82 30       	cpi	r24, 0x02	; 2
     4ae:	49 f4       	brne	.+18     	; 0x4c2 <__mulsf3+0x88>
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b4:	8a 89       	ldd	r24, Y+18	; 0x12
     4b6:	98 13       	cpse	r25, r24
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	2a 8b       	std	Y+18, r18	; 0x12
     4bc:	ce 01       	movw	r24, r28
     4be:	41 96       	adiw	r24, 0x11	; 17
     4c0:	b0 c0       	rjmp	.+352    	; 0x622 <__mulsf3+0x1e8>
     4c2:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c4:	3e 84       	ldd	r3, Y+14	; 0x0e
     4c6:	4f 84       	ldd	r4, Y+15	; 0x0f
     4c8:	58 88       	ldd	r5, Y+16	; 0x10
     4ca:	6d 88       	ldd	r6, Y+21	; 0x15
     4cc:	7e 88       	ldd	r7, Y+22	; 0x16
     4ce:	8f 88       	ldd	r8, Y+23	; 0x17
     4d0:	98 8c       	ldd	r9, Y+24	; 0x18
     4d2:	ee 24       	eor	r14, r14
     4d4:	ff 24       	eor	r15, r15
     4d6:	87 01       	movw	r16, r14
     4d8:	aa 24       	eor	r10, r10
     4da:	bb 24       	eor	r11, r11
     4dc:	65 01       	movw	r12, r10
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	e0 e0       	ldi	r30, 0x00	; 0
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	c1 01       	movw	r24, r2
     4ec:	81 70       	andi	r24, 0x01	; 1
     4ee:	90 70       	andi	r25, 0x00	; 0
     4f0:	89 2b       	or	r24, r25
     4f2:	e9 f0       	breq	.+58     	; 0x52e <__mulsf3+0xf4>
     4f4:	e6 0c       	add	r14, r6
     4f6:	f7 1c       	adc	r15, r7
     4f8:	08 1d       	adc	r16, r8
     4fa:	19 1d       	adc	r17, r9
     4fc:	9a 01       	movw	r18, r20
     4fe:	ab 01       	movw	r20, r22
     500:	2a 0d       	add	r18, r10
     502:	3b 1d       	adc	r19, r11
     504:	4c 1d       	adc	r20, r12
     506:	5d 1d       	adc	r21, r13
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	a0 e0       	ldi	r26, 0x00	; 0
     50e:	b0 e0       	ldi	r27, 0x00	; 0
     510:	e6 14       	cp	r14, r6
     512:	f7 04       	cpc	r15, r7
     514:	08 05       	cpc	r16, r8
     516:	19 05       	cpc	r17, r9
     518:	20 f4       	brcc	.+8      	; 0x522 <__mulsf3+0xe8>
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	a0 e0       	ldi	r26, 0x00	; 0
     520:	b0 e0       	ldi	r27, 0x00	; 0
     522:	ba 01       	movw	r22, r20
     524:	a9 01       	movw	r20, r18
     526:	48 0f       	add	r20, r24
     528:	59 1f       	adc	r21, r25
     52a:	6a 1f       	adc	r22, r26
     52c:	7b 1f       	adc	r23, r27
     52e:	aa 0c       	add	r10, r10
     530:	bb 1c       	adc	r11, r11
     532:	cc 1c       	adc	r12, r12
     534:	dd 1c       	adc	r13, r13
     536:	97 fe       	sbrs	r9, 7
     538:	08 c0       	rjmp	.+16     	; 0x54a <__mulsf3+0x110>
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	a0 e0       	ldi	r26, 0x00	; 0
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	a8 2a       	or	r10, r24
     544:	b9 2a       	or	r11, r25
     546:	ca 2a       	or	r12, r26
     548:	db 2a       	or	r13, r27
     54a:	31 96       	adiw	r30, 0x01	; 1
     54c:	e0 32       	cpi	r30, 0x20	; 32
     54e:	f1 05       	cpc	r31, r1
     550:	49 f0       	breq	.+18     	; 0x564 <__mulsf3+0x12a>
     552:	66 0c       	add	r6, r6
     554:	77 1c       	adc	r7, r7
     556:	88 1c       	adc	r8, r8
     558:	99 1c       	adc	r9, r9
     55a:	56 94       	lsr	r5
     55c:	47 94       	ror	r4
     55e:	37 94       	ror	r3
     560:	27 94       	ror	r2
     562:	c3 cf       	rjmp	.-122    	; 0x4ea <__mulsf3+0xb0>
     564:	fa 85       	ldd	r31, Y+10	; 0x0a
     566:	ea 89       	ldd	r30, Y+18	; 0x12
     568:	2b 89       	ldd	r18, Y+19	; 0x13
     56a:	3c 89       	ldd	r19, Y+20	; 0x14
     56c:	8b 85       	ldd	r24, Y+11	; 0x0b
     56e:	9c 85       	ldd	r25, Y+12	; 0x0c
     570:	28 0f       	add	r18, r24
     572:	39 1f       	adc	r19, r25
     574:	2e 5f       	subi	r18, 0xFE	; 254
     576:	3f 4f       	sbci	r19, 0xFF	; 255
     578:	17 c0       	rjmp	.+46     	; 0x5a8 <__mulsf3+0x16e>
     57a:	ca 01       	movw	r24, r20
     57c:	81 70       	andi	r24, 0x01	; 1
     57e:	90 70       	andi	r25, 0x00	; 0
     580:	89 2b       	or	r24, r25
     582:	61 f0       	breq	.+24     	; 0x59c <__mulsf3+0x162>
     584:	16 95       	lsr	r17
     586:	07 95       	ror	r16
     588:	f7 94       	ror	r15
     58a:	e7 94       	ror	r14
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	a0 e0       	ldi	r26, 0x00	; 0
     592:	b0 e8       	ldi	r27, 0x80	; 128
     594:	e8 2a       	or	r14, r24
     596:	f9 2a       	or	r15, r25
     598:	0a 2b       	or	r16, r26
     59a:	1b 2b       	or	r17, r27
     59c:	76 95       	lsr	r23
     59e:	67 95       	ror	r22
     5a0:	57 95       	ror	r21
     5a2:	47 95       	ror	r20
     5a4:	2f 5f       	subi	r18, 0xFF	; 255
     5a6:	3f 4f       	sbci	r19, 0xFF	; 255
     5a8:	77 fd       	sbrc	r23, 7
     5aa:	e7 cf       	rjmp	.-50     	; 0x57a <__mulsf3+0x140>
     5ac:	0c c0       	rjmp	.+24     	; 0x5c6 <__mulsf3+0x18c>
     5ae:	44 0f       	add	r20, r20
     5b0:	55 1f       	adc	r21, r21
     5b2:	66 1f       	adc	r22, r22
     5b4:	77 1f       	adc	r23, r23
     5b6:	17 fd       	sbrc	r17, 7
     5b8:	41 60       	ori	r20, 0x01	; 1
     5ba:	ee 0c       	add	r14, r14
     5bc:	ff 1c       	adc	r15, r15
     5be:	00 1f       	adc	r16, r16
     5c0:	11 1f       	adc	r17, r17
     5c2:	21 50       	subi	r18, 0x01	; 1
     5c4:	30 40       	sbci	r19, 0x00	; 0
     5c6:	40 30       	cpi	r20, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	59 07       	cpc	r21, r25
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	69 07       	cpc	r22, r25
     5d0:	90 e4       	ldi	r25, 0x40	; 64
     5d2:	79 07       	cpc	r23, r25
     5d4:	60 f3       	brcs	.-40     	; 0x5ae <__mulsf3+0x174>
     5d6:	2b 8f       	std	Y+27, r18	; 0x1b
     5d8:	3c 8f       	std	Y+28, r19	; 0x1c
     5da:	db 01       	movw	r26, r22
     5dc:	ca 01       	movw	r24, r20
     5de:	8f 77       	andi	r24, 0x7F	; 127
     5e0:	90 70       	andi	r25, 0x00	; 0
     5e2:	a0 70       	andi	r26, 0x00	; 0
     5e4:	b0 70       	andi	r27, 0x00	; 0
     5e6:	80 34       	cpi	r24, 0x40	; 64
     5e8:	91 05       	cpc	r25, r1
     5ea:	a1 05       	cpc	r26, r1
     5ec:	b1 05       	cpc	r27, r1
     5ee:	61 f4       	brne	.+24     	; 0x608 <__mulsf3+0x1ce>
     5f0:	47 fd       	sbrc	r20, 7
     5f2:	0a c0       	rjmp	.+20     	; 0x608 <__mulsf3+0x1ce>
     5f4:	e1 14       	cp	r14, r1
     5f6:	f1 04       	cpc	r15, r1
     5f8:	01 05       	cpc	r16, r1
     5fa:	11 05       	cpc	r17, r1
     5fc:	29 f0       	breq	.+10     	; 0x608 <__mulsf3+0x1ce>
     5fe:	40 5c       	subi	r20, 0xC0	; 192
     600:	5f 4f       	sbci	r21, 0xFF	; 255
     602:	6f 4f       	sbci	r22, 0xFF	; 255
     604:	7f 4f       	sbci	r23, 0xFF	; 255
     606:	40 78       	andi	r20, 0x80	; 128
     608:	1a 8e       	std	Y+26, r1	; 0x1a
     60a:	fe 17       	cp	r31, r30
     60c:	11 f0       	breq	.+4      	; 0x612 <__mulsf3+0x1d8>
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	8a 8f       	std	Y+26, r24	; 0x1a
     612:	4d 8f       	std	Y+29, r20	; 0x1d
     614:	5e 8f       	std	Y+30, r21	; 0x1e
     616:	6f 8f       	std	Y+31, r22	; 0x1f
     618:	78 a3       	std	Y+32, r23	; 0x20
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	89 8f       	std	Y+25, r24	; 0x19
     61e:	ce 01       	movw	r24, r28
     620:	49 96       	adiw	r24, 0x19	; 25
     622:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__pack_f>
     626:	a0 96       	adiw	r28, 0x20	; 32
     628:	e2 e1       	ldi	r30, 0x12	; 18
     62a:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <__epilogue_restores__>

0000062e <__gtsf2>:
     62e:	a8 e1       	ldi	r26, 0x18	; 24
     630:	b0 e0       	ldi	r27, 0x00	; 0
     632:	ed e1       	ldi	r30, 0x1D	; 29
     634:	f3 e0       	ldi	r31, 0x03	; 3
     636:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__prologue_saves__+0x18>
     63a:	69 83       	std	Y+1, r22	; 0x01
     63c:	7a 83       	std	Y+2, r23	; 0x02
     63e:	8b 83       	std	Y+3, r24	; 0x03
     640:	9c 83       	std	Y+4, r25	; 0x04
     642:	2d 83       	std	Y+5, r18	; 0x05
     644:	3e 83       	std	Y+6, r19	; 0x06
     646:	4f 83       	std	Y+7, r20	; 0x07
     648:	58 87       	std	Y+8, r21	; 0x08
     64a:	89 e0       	ldi	r24, 0x09	; 9
     64c:	e8 2e       	mov	r14, r24
     64e:	f1 2c       	mov	r15, r1
     650:	ec 0e       	add	r14, r28
     652:	fd 1e       	adc	r15, r29
     654:	ce 01       	movw	r24, r28
     656:	01 96       	adiw	r24, 0x01	; 1
     658:	b7 01       	movw	r22, r14
     65a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__unpack_f>
     65e:	8e 01       	movw	r16, r28
     660:	0f 5e       	subi	r16, 0xEF	; 239
     662:	1f 4f       	sbci	r17, 0xFF	; 255
     664:	ce 01       	movw	r24, r28
     666:	05 96       	adiw	r24, 0x05	; 5
     668:	b8 01       	movw	r22, r16
     66a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__unpack_f>
     66e:	89 85       	ldd	r24, Y+9	; 0x09
     670:	82 30       	cpi	r24, 0x02	; 2
     672:	40 f0       	brcs	.+16     	; 0x684 <__gtsf2+0x56>
     674:	89 89       	ldd	r24, Y+17	; 0x11
     676:	82 30       	cpi	r24, 0x02	; 2
     678:	28 f0       	brcs	.+10     	; 0x684 <__gtsf2+0x56>
     67a:	c7 01       	movw	r24, r14
     67c:	b8 01       	movw	r22, r16
     67e:	0e 94 48 05 	call	0xa90	; 0xa90 <__fpcmp_parts_f>
     682:	01 c0       	rjmp	.+2      	; 0x686 <__gtsf2+0x58>
     684:	8f ef       	ldi	r24, 0xFF	; 255
     686:	68 96       	adiw	r28, 0x18	; 24
     688:	e6 e0       	ldi	r30, 0x06	; 6
     68a:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <__epilogue_restores__+0x18>

0000068e <__gesf2>:
     68e:	a8 e1       	ldi	r26, 0x18	; 24
     690:	b0 e0       	ldi	r27, 0x00	; 0
     692:	ed e4       	ldi	r30, 0x4D	; 77
     694:	f3 e0       	ldi	r31, 0x03	; 3
     696:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__prologue_saves__+0x18>
     69a:	69 83       	std	Y+1, r22	; 0x01
     69c:	7a 83       	std	Y+2, r23	; 0x02
     69e:	8b 83       	std	Y+3, r24	; 0x03
     6a0:	9c 83       	std	Y+4, r25	; 0x04
     6a2:	2d 83       	std	Y+5, r18	; 0x05
     6a4:	3e 83       	std	Y+6, r19	; 0x06
     6a6:	4f 83       	std	Y+7, r20	; 0x07
     6a8:	58 87       	std	Y+8, r21	; 0x08
     6aa:	89 e0       	ldi	r24, 0x09	; 9
     6ac:	e8 2e       	mov	r14, r24
     6ae:	f1 2c       	mov	r15, r1
     6b0:	ec 0e       	add	r14, r28
     6b2:	fd 1e       	adc	r15, r29
     6b4:	ce 01       	movw	r24, r28
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	b7 01       	movw	r22, r14
     6ba:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__unpack_f>
     6be:	8e 01       	movw	r16, r28
     6c0:	0f 5e       	subi	r16, 0xEF	; 239
     6c2:	1f 4f       	sbci	r17, 0xFF	; 255
     6c4:	ce 01       	movw	r24, r28
     6c6:	05 96       	adiw	r24, 0x05	; 5
     6c8:	b8 01       	movw	r22, r16
     6ca:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__unpack_f>
     6ce:	89 85       	ldd	r24, Y+9	; 0x09
     6d0:	82 30       	cpi	r24, 0x02	; 2
     6d2:	40 f0       	brcs	.+16     	; 0x6e4 <__gesf2+0x56>
     6d4:	89 89       	ldd	r24, Y+17	; 0x11
     6d6:	82 30       	cpi	r24, 0x02	; 2
     6d8:	28 f0       	brcs	.+10     	; 0x6e4 <__gesf2+0x56>
     6da:	c7 01       	movw	r24, r14
     6dc:	b8 01       	movw	r22, r16
     6de:	0e 94 48 05 	call	0xa90	; 0xa90 <__fpcmp_parts_f>
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <__gesf2+0x58>
     6e4:	8f ef       	ldi	r24, 0xFF	; 255
     6e6:	68 96       	adiw	r28, 0x18	; 24
     6e8:	e6 e0       	ldi	r30, 0x06	; 6
     6ea:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <__epilogue_restores__+0x18>

000006ee <__ltsf2>:
     6ee:	a8 e1       	ldi	r26, 0x18	; 24
     6f0:	b0 e0       	ldi	r27, 0x00	; 0
     6f2:	ed e7       	ldi	r30, 0x7D	; 125
     6f4:	f3 e0       	ldi	r31, 0x03	; 3
     6f6:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__prologue_saves__+0x18>
     6fa:	69 83       	std	Y+1, r22	; 0x01
     6fc:	7a 83       	std	Y+2, r23	; 0x02
     6fe:	8b 83       	std	Y+3, r24	; 0x03
     700:	9c 83       	std	Y+4, r25	; 0x04
     702:	2d 83       	std	Y+5, r18	; 0x05
     704:	3e 83       	std	Y+6, r19	; 0x06
     706:	4f 83       	std	Y+7, r20	; 0x07
     708:	58 87       	std	Y+8, r21	; 0x08
     70a:	89 e0       	ldi	r24, 0x09	; 9
     70c:	e8 2e       	mov	r14, r24
     70e:	f1 2c       	mov	r15, r1
     710:	ec 0e       	add	r14, r28
     712:	fd 1e       	adc	r15, r29
     714:	ce 01       	movw	r24, r28
     716:	01 96       	adiw	r24, 0x01	; 1
     718:	b7 01       	movw	r22, r14
     71a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__unpack_f>
     71e:	8e 01       	movw	r16, r28
     720:	0f 5e       	subi	r16, 0xEF	; 239
     722:	1f 4f       	sbci	r17, 0xFF	; 255
     724:	ce 01       	movw	r24, r28
     726:	05 96       	adiw	r24, 0x05	; 5
     728:	b8 01       	movw	r22, r16
     72a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__unpack_f>
     72e:	89 85       	ldd	r24, Y+9	; 0x09
     730:	82 30       	cpi	r24, 0x02	; 2
     732:	40 f0       	brcs	.+16     	; 0x744 <__ltsf2+0x56>
     734:	89 89       	ldd	r24, Y+17	; 0x11
     736:	82 30       	cpi	r24, 0x02	; 2
     738:	28 f0       	brcs	.+10     	; 0x744 <__ltsf2+0x56>
     73a:	c7 01       	movw	r24, r14
     73c:	b8 01       	movw	r22, r16
     73e:	0e 94 48 05 	call	0xa90	; 0xa90 <__fpcmp_parts_f>
     742:	01 c0       	rjmp	.+2      	; 0x746 <__ltsf2+0x58>
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	68 96       	adiw	r28, 0x18	; 24
     748:	e6 e0       	ldi	r30, 0x06	; 6
     74a:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <__epilogue_restores__+0x18>

0000074e <__fixsfsi>:
     74e:	ac e0       	ldi	r26, 0x0C	; 12
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	ed ea       	ldi	r30, 0xAD	; 173
     754:	f3 e0       	ldi	r31, 0x03	; 3
     756:	0c 94 d2 19 	jmp	0x33a4	; 0x33a4 <__prologue_saves__+0x20>
     75a:	69 83       	std	Y+1, r22	; 0x01
     75c:	7a 83       	std	Y+2, r23	; 0x02
     75e:	8b 83       	std	Y+3, r24	; 0x03
     760:	9c 83       	std	Y+4, r25	; 0x04
     762:	ce 01       	movw	r24, r28
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	be 01       	movw	r22, r28
     768:	6b 5f       	subi	r22, 0xFB	; 251
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__unpack_f>
     770:	8d 81       	ldd	r24, Y+5	; 0x05
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	61 f1       	breq	.+88     	; 0x7ce <__fixsfsi+0x80>
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	50 f1       	brcs	.+84     	; 0x7ce <__fixsfsi+0x80>
     77a:	84 30       	cpi	r24, 0x04	; 4
     77c:	21 f4       	brne	.+8      	; 0x786 <__fixsfsi+0x38>
     77e:	8e 81       	ldd	r24, Y+6	; 0x06
     780:	88 23       	and	r24, r24
     782:	51 f1       	breq	.+84     	; 0x7d8 <__fixsfsi+0x8a>
     784:	2e c0       	rjmp	.+92     	; 0x7e2 <__fixsfsi+0x94>
     786:	2f 81       	ldd	r18, Y+7	; 0x07
     788:	38 85       	ldd	r19, Y+8	; 0x08
     78a:	37 fd       	sbrc	r19, 7
     78c:	20 c0       	rjmp	.+64     	; 0x7ce <__fixsfsi+0x80>
     78e:	6e 81       	ldd	r22, Y+6	; 0x06
     790:	2f 31       	cpi	r18, 0x1F	; 31
     792:	31 05       	cpc	r19, r1
     794:	1c f0       	brlt	.+6      	; 0x79c <__fixsfsi+0x4e>
     796:	66 23       	and	r22, r22
     798:	f9 f0       	breq	.+62     	; 0x7d8 <__fixsfsi+0x8a>
     79a:	23 c0       	rjmp	.+70     	; 0x7e2 <__fixsfsi+0x94>
     79c:	8e e1       	ldi	r24, 0x1E	; 30
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	82 1b       	sub	r24, r18
     7a2:	93 0b       	sbc	r25, r19
     7a4:	29 85       	ldd	r18, Y+9	; 0x09
     7a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7a8:	4b 85       	ldd	r20, Y+11	; 0x0b
     7aa:	5c 85       	ldd	r21, Y+12	; 0x0c
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__fixsfsi+0x68>
     7ae:	56 95       	lsr	r21
     7b0:	47 95       	ror	r20
     7b2:	37 95       	ror	r19
     7b4:	27 95       	ror	r18
     7b6:	8a 95       	dec	r24
     7b8:	d2 f7       	brpl	.-12     	; 0x7ae <__fixsfsi+0x60>
     7ba:	66 23       	and	r22, r22
     7bc:	b1 f0       	breq	.+44     	; 0x7ea <__fixsfsi+0x9c>
     7be:	50 95       	com	r21
     7c0:	40 95       	com	r20
     7c2:	30 95       	com	r19
     7c4:	21 95       	neg	r18
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	4f 4f       	sbci	r20, 0xFF	; 255
     7ca:	5f 4f       	sbci	r21, 0xFF	; 255
     7cc:	0e c0       	rjmp	.+28     	; 0x7ea <__fixsfsi+0x9c>
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	09 c0       	rjmp	.+18     	; 0x7ea <__fixsfsi+0x9c>
     7d8:	2f ef       	ldi	r18, 0xFF	; 255
     7da:	3f ef       	ldi	r19, 0xFF	; 255
     7dc:	4f ef       	ldi	r20, 0xFF	; 255
     7de:	5f e7       	ldi	r21, 0x7F	; 127
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <__fixsfsi+0x9c>
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e8       	ldi	r21, 0x80	; 128
     7ea:	b9 01       	movw	r22, r18
     7ec:	ca 01       	movw	r24, r20
     7ee:	2c 96       	adiw	r28, 0x0c	; 12
     7f0:	e2 e0       	ldi	r30, 0x02	; 2
     7f2:	0c 94 ee 19 	jmp	0x33dc	; 0x33dc <__epilogue_restores__+0x20>

000007f6 <__pack_f>:
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	fc 01       	movw	r30, r24
     802:	e4 80       	ldd	r14, Z+4	; 0x04
     804:	f5 80       	ldd	r15, Z+5	; 0x05
     806:	06 81       	ldd	r16, Z+6	; 0x06
     808:	17 81       	ldd	r17, Z+7	; 0x07
     80a:	d1 80       	ldd	r13, Z+1	; 0x01
     80c:	80 81       	ld	r24, Z
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	48 f4       	brcc	.+18     	; 0x824 <__pack_f+0x2e>
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	a0 e1       	ldi	r26, 0x10	; 16
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	e8 2a       	or	r14, r24
     81c:	f9 2a       	or	r15, r25
     81e:	0a 2b       	or	r16, r26
     820:	1b 2b       	or	r17, r27
     822:	a5 c0       	rjmp	.+330    	; 0x96e <__stack+0x10f>
     824:	84 30       	cpi	r24, 0x04	; 4
     826:	09 f4       	brne	.+2      	; 0x82a <__pack_f+0x34>
     828:	9f c0       	rjmp	.+318    	; 0x968 <__stack+0x109>
     82a:	82 30       	cpi	r24, 0x02	; 2
     82c:	21 f4       	brne	.+8      	; 0x836 <__pack_f+0x40>
     82e:	ee 24       	eor	r14, r14
     830:	ff 24       	eor	r15, r15
     832:	87 01       	movw	r16, r14
     834:	05 c0       	rjmp	.+10     	; 0x840 <__pack_f+0x4a>
     836:	e1 14       	cp	r14, r1
     838:	f1 04       	cpc	r15, r1
     83a:	01 05       	cpc	r16, r1
     83c:	11 05       	cpc	r17, r1
     83e:	19 f4       	brne	.+6      	; 0x846 <__pack_f+0x50>
     840:	e0 e0       	ldi	r30, 0x00	; 0
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	96 c0       	rjmp	.+300    	; 0x972 <__stack+0x113>
     846:	62 81       	ldd	r22, Z+2	; 0x02
     848:	73 81       	ldd	r23, Z+3	; 0x03
     84a:	9f ef       	ldi	r25, 0xFF	; 255
     84c:	62 38       	cpi	r22, 0x82	; 130
     84e:	79 07       	cpc	r23, r25
     850:	0c f0       	brlt	.+2      	; 0x854 <__pack_f+0x5e>
     852:	5b c0       	rjmp	.+182    	; 0x90a <__stack+0xab>
     854:	22 e8       	ldi	r18, 0x82	; 130
     856:	3f ef       	ldi	r19, 0xFF	; 255
     858:	26 1b       	sub	r18, r22
     85a:	37 0b       	sbc	r19, r23
     85c:	2a 31       	cpi	r18, 0x1A	; 26
     85e:	31 05       	cpc	r19, r1
     860:	2c f0       	brlt	.+10     	; 0x86c <__stack+0xd>
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	2a c0       	rjmp	.+84     	; 0x8c0 <__stack+0x61>
     86c:	b8 01       	movw	r22, r16
     86e:	a7 01       	movw	r20, r14
     870:	02 2e       	mov	r0, r18
     872:	04 c0       	rjmp	.+8      	; 0x87c <__stack+0x1d>
     874:	76 95       	lsr	r23
     876:	67 95       	ror	r22
     878:	57 95       	ror	r21
     87a:	47 95       	ror	r20
     87c:	0a 94       	dec	r0
     87e:	d2 f7       	brpl	.-12     	; 0x874 <__stack+0x15>
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	a0 e0       	ldi	r26, 0x00	; 0
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	04 c0       	rjmp	.+8      	; 0x892 <__stack+0x33>
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	aa 1f       	adc	r26, r26
     890:	bb 1f       	adc	r27, r27
     892:	2a 95       	dec	r18
     894:	d2 f7       	brpl	.-12     	; 0x88a <__stack+0x2b>
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	a1 09       	sbc	r26, r1
     89a:	b1 09       	sbc	r27, r1
     89c:	8e 21       	and	r24, r14
     89e:	9f 21       	and	r25, r15
     8a0:	a0 23       	and	r26, r16
     8a2:	b1 23       	and	r27, r17
     8a4:	00 97       	sbiw	r24, 0x00	; 0
     8a6:	a1 05       	cpc	r26, r1
     8a8:	b1 05       	cpc	r27, r1
     8aa:	21 f0       	breq	.+8      	; 0x8b4 <__stack+0x55>
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	a0 e0       	ldi	r26, 0x00	; 0
     8b2:	b0 e0       	ldi	r27, 0x00	; 0
     8b4:	9a 01       	movw	r18, r20
     8b6:	ab 01       	movw	r20, r22
     8b8:	28 2b       	or	r18, r24
     8ba:	39 2b       	or	r19, r25
     8bc:	4a 2b       	or	r20, r26
     8be:	5b 2b       	or	r21, r27
     8c0:	da 01       	movw	r26, r20
     8c2:	c9 01       	movw	r24, r18
     8c4:	8f 77       	andi	r24, 0x7F	; 127
     8c6:	90 70       	andi	r25, 0x00	; 0
     8c8:	a0 70       	andi	r26, 0x00	; 0
     8ca:	b0 70       	andi	r27, 0x00	; 0
     8cc:	80 34       	cpi	r24, 0x40	; 64
     8ce:	91 05       	cpc	r25, r1
     8d0:	a1 05       	cpc	r26, r1
     8d2:	b1 05       	cpc	r27, r1
     8d4:	39 f4       	brne	.+14     	; 0x8e4 <__stack+0x85>
     8d6:	27 ff       	sbrs	r18, 7
     8d8:	09 c0       	rjmp	.+18     	; 0x8ec <__stack+0x8d>
     8da:	20 5c       	subi	r18, 0xC0	; 192
     8dc:	3f 4f       	sbci	r19, 0xFF	; 255
     8de:	4f 4f       	sbci	r20, 0xFF	; 255
     8e0:	5f 4f       	sbci	r21, 0xFF	; 255
     8e2:	04 c0       	rjmp	.+8      	; 0x8ec <__stack+0x8d>
     8e4:	21 5c       	subi	r18, 0xC1	; 193
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	e0 e0       	ldi	r30, 0x00	; 0
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	20 30       	cpi	r18, 0x00	; 0
     8f2:	a0 e0       	ldi	r26, 0x00	; 0
     8f4:	3a 07       	cpc	r19, r26
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	4a 07       	cpc	r20, r26
     8fa:	a0 e4       	ldi	r26, 0x40	; 64
     8fc:	5a 07       	cpc	r21, r26
     8fe:	10 f0       	brcs	.+4      	; 0x904 <__stack+0xa5>
     900:	e1 e0       	ldi	r30, 0x01	; 1
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	79 01       	movw	r14, r18
     906:	8a 01       	movw	r16, r20
     908:	27 c0       	rjmp	.+78     	; 0x958 <__stack+0xf9>
     90a:	60 38       	cpi	r22, 0x80	; 128
     90c:	71 05       	cpc	r23, r1
     90e:	64 f5       	brge	.+88     	; 0x968 <__stack+0x109>
     910:	fb 01       	movw	r30, r22
     912:	e1 58       	subi	r30, 0x81	; 129
     914:	ff 4f       	sbci	r31, 0xFF	; 255
     916:	d8 01       	movw	r26, r16
     918:	c7 01       	movw	r24, r14
     91a:	8f 77       	andi	r24, 0x7F	; 127
     91c:	90 70       	andi	r25, 0x00	; 0
     91e:	a0 70       	andi	r26, 0x00	; 0
     920:	b0 70       	andi	r27, 0x00	; 0
     922:	80 34       	cpi	r24, 0x40	; 64
     924:	91 05       	cpc	r25, r1
     926:	a1 05       	cpc	r26, r1
     928:	b1 05       	cpc	r27, r1
     92a:	39 f4       	brne	.+14     	; 0x93a <__stack+0xdb>
     92c:	e7 fe       	sbrs	r14, 7
     92e:	0d c0       	rjmp	.+26     	; 0x94a <__stack+0xeb>
     930:	80 e4       	ldi	r24, 0x40	; 64
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	a0 e0       	ldi	r26, 0x00	; 0
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	04 c0       	rjmp	.+8      	; 0x942 <__stack+0xe3>
     93a:	8f e3       	ldi	r24, 0x3F	; 63
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	a0 e0       	ldi	r26, 0x00	; 0
     940:	b0 e0       	ldi	r27, 0x00	; 0
     942:	e8 0e       	add	r14, r24
     944:	f9 1e       	adc	r15, r25
     946:	0a 1f       	adc	r16, r26
     948:	1b 1f       	adc	r17, r27
     94a:	17 ff       	sbrs	r17, 7
     94c:	05 c0       	rjmp	.+10     	; 0x958 <__stack+0xf9>
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	31 96       	adiw	r30, 0x01	; 1
     958:	87 e0       	ldi	r24, 0x07	; 7
     95a:	16 95       	lsr	r17
     95c:	07 95       	ror	r16
     95e:	f7 94       	ror	r15
     960:	e7 94       	ror	r14
     962:	8a 95       	dec	r24
     964:	d1 f7       	brne	.-12     	; 0x95a <__stack+0xfb>
     966:	05 c0       	rjmp	.+10     	; 0x972 <__stack+0x113>
     968:	ee 24       	eor	r14, r14
     96a:	ff 24       	eor	r15, r15
     96c:	87 01       	movw	r16, r14
     96e:	ef ef       	ldi	r30, 0xFF	; 255
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	6e 2f       	mov	r22, r30
     974:	67 95       	ror	r22
     976:	66 27       	eor	r22, r22
     978:	67 95       	ror	r22
     97a:	90 2f       	mov	r25, r16
     97c:	9f 77       	andi	r25, 0x7F	; 127
     97e:	d7 94       	ror	r13
     980:	dd 24       	eor	r13, r13
     982:	d7 94       	ror	r13
     984:	8e 2f       	mov	r24, r30
     986:	86 95       	lsr	r24
     988:	49 2f       	mov	r20, r25
     98a:	46 2b       	or	r20, r22
     98c:	58 2f       	mov	r21, r24
     98e:	5d 29       	or	r21, r13
     990:	b7 01       	movw	r22, r14
     992:	ca 01       	movw	r24, r20
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	ff 90       	pop	r15
     99a:	ef 90       	pop	r14
     99c:	df 90       	pop	r13
     99e:	08 95       	ret

000009a0 <__unpack_f>:
     9a0:	fc 01       	movw	r30, r24
     9a2:	db 01       	movw	r26, r22
     9a4:	40 81       	ld	r20, Z
     9a6:	51 81       	ldd	r21, Z+1	; 0x01
     9a8:	22 81       	ldd	r18, Z+2	; 0x02
     9aa:	62 2f       	mov	r22, r18
     9ac:	6f 77       	andi	r22, 0x7F	; 127
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	22 1f       	adc	r18, r18
     9b2:	22 27       	eor	r18, r18
     9b4:	22 1f       	adc	r18, r18
     9b6:	93 81       	ldd	r25, Z+3	; 0x03
     9b8:	89 2f       	mov	r24, r25
     9ba:	88 0f       	add	r24, r24
     9bc:	82 2b       	or	r24, r18
     9be:	28 2f       	mov	r18, r24
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	99 1f       	adc	r25, r25
     9c4:	99 27       	eor	r25, r25
     9c6:	99 1f       	adc	r25, r25
     9c8:	11 96       	adiw	r26, 0x01	; 1
     9ca:	9c 93       	st	X, r25
     9cc:	11 97       	sbiw	r26, 0x01	; 1
     9ce:	21 15       	cp	r18, r1
     9d0:	31 05       	cpc	r19, r1
     9d2:	a9 f5       	brne	.+106    	; 0xa3e <__unpack_f+0x9e>
     9d4:	41 15       	cp	r20, r1
     9d6:	51 05       	cpc	r21, r1
     9d8:	61 05       	cpc	r22, r1
     9da:	71 05       	cpc	r23, r1
     9dc:	11 f4       	brne	.+4      	; 0x9e2 <__unpack_f+0x42>
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	37 c0       	rjmp	.+110    	; 0xa50 <__unpack_f+0xb0>
     9e2:	82 e8       	ldi	r24, 0x82	; 130
     9e4:	9f ef       	ldi	r25, 0xFF	; 255
     9e6:	13 96       	adiw	r26, 0x03	; 3
     9e8:	9c 93       	st	X, r25
     9ea:	8e 93       	st	-X, r24
     9ec:	12 97       	sbiw	r26, 0x02	; 2
     9ee:	9a 01       	movw	r18, r20
     9f0:	ab 01       	movw	r20, r22
     9f2:	67 e0       	ldi	r22, 0x07	; 7
     9f4:	22 0f       	add	r18, r18
     9f6:	33 1f       	adc	r19, r19
     9f8:	44 1f       	adc	r20, r20
     9fa:	55 1f       	adc	r21, r21
     9fc:	6a 95       	dec	r22
     9fe:	d1 f7       	brne	.-12     	; 0x9f4 <__unpack_f+0x54>
     a00:	83 e0       	ldi	r24, 0x03	; 3
     a02:	8c 93       	st	X, r24
     a04:	0d c0       	rjmp	.+26     	; 0xa20 <__unpack_f+0x80>
     a06:	22 0f       	add	r18, r18
     a08:	33 1f       	adc	r19, r19
     a0a:	44 1f       	adc	r20, r20
     a0c:	55 1f       	adc	r21, r21
     a0e:	12 96       	adiw	r26, 0x02	; 2
     a10:	8d 91       	ld	r24, X+
     a12:	9c 91       	ld	r25, X
     a14:	13 97       	sbiw	r26, 0x03	; 3
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	13 96       	adiw	r26, 0x03	; 3
     a1a:	9c 93       	st	X, r25
     a1c:	8e 93       	st	-X, r24
     a1e:	12 97       	sbiw	r26, 0x02	; 2
     a20:	20 30       	cpi	r18, 0x00	; 0
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	38 07       	cpc	r19, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	48 07       	cpc	r20, r24
     a2a:	80 e4       	ldi	r24, 0x40	; 64
     a2c:	58 07       	cpc	r21, r24
     a2e:	58 f3       	brcs	.-42     	; 0xa06 <__unpack_f+0x66>
     a30:	14 96       	adiw	r26, 0x04	; 4
     a32:	2d 93       	st	X+, r18
     a34:	3d 93       	st	X+, r19
     a36:	4d 93       	st	X+, r20
     a38:	5c 93       	st	X, r21
     a3a:	17 97       	sbiw	r26, 0x07	; 7
     a3c:	08 95       	ret
     a3e:	2f 3f       	cpi	r18, 0xFF	; 255
     a40:	31 05       	cpc	r19, r1
     a42:	79 f4       	brne	.+30     	; 0xa62 <__unpack_f+0xc2>
     a44:	41 15       	cp	r20, r1
     a46:	51 05       	cpc	r21, r1
     a48:	61 05       	cpc	r22, r1
     a4a:	71 05       	cpc	r23, r1
     a4c:	19 f4       	brne	.+6      	; 0xa54 <__unpack_f+0xb4>
     a4e:	84 e0       	ldi	r24, 0x04	; 4
     a50:	8c 93       	st	X, r24
     a52:	08 95       	ret
     a54:	64 ff       	sbrs	r22, 4
     a56:	03 c0       	rjmp	.+6      	; 0xa5e <__unpack_f+0xbe>
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	8c 93       	st	X, r24
     a5c:	12 c0       	rjmp	.+36     	; 0xa82 <__unpack_f+0xe2>
     a5e:	1c 92       	st	X, r1
     a60:	10 c0       	rjmp	.+32     	; 0xa82 <__unpack_f+0xe2>
     a62:	2f 57       	subi	r18, 0x7F	; 127
     a64:	30 40       	sbci	r19, 0x00	; 0
     a66:	13 96       	adiw	r26, 0x03	; 3
     a68:	3c 93       	st	X, r19
     a6a:	2e 93       	st	-X, r18
     a6c:	12 97       	sbiw	r26, 0x02	; 2
     a6e:	83 e0       	ldi	r24, 0x03	; 3
     a70:	8c 93       	st	X, r24
     a72:	87 e0       	ldi	r24, 0x07	; 7
     a74:	44 0f       	add	r20, r20
     a76:	55 1f       	adc	r21, r21
     a78:	66 1f       	adc	r22, r22
     a7a:	77 1f       	adc	r23, r23
     a7c:	8a 95       	dec	r24
     a7e:	d1 f7       	brne	.-12     	; 0xa74 <__unpack_f+0xd4>
     a80:	70 64       	ori	r23, 0x40	; 64
     a82:	14 96       	adiw	r26, 0x04	; 4
     a84:	4d 93       	st	X+, r20
     a86:	5d 93       	st	X+, r21
     a88:	6d 93       	st	X+, r22
     a8a:	7c 93       	st	X, r23
     a8c:	17 97       	sbiw	r26, 0x07	; 7
     a8e:	08 95       	ret

00000a90 <__fpcmp_parts_f>:
     a90:	1f 93       	push	r17
     a92:	dc 01       	movw	r26, r24
     a94:	fb 01       	movw	r30, r22
     a96:	9c 91       	ld	r25, X
     a98:	92 30       	cpi	r25, 0x02	; 2
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <__fpcmp_parts_f+0xe>
     a9c:	47 c0       	rjmp	.+142    	; 0xb2c <__fpcmp_parts_f+0x9c>
     a9e:	80 81       	ld	r24, Z
     aa0:	82 30       	cpi	r24, 0x02	; 2
     aa2:	08 f4       	brcc	.+2      	; 0xaa6 <__fpcmp_parts_f+0x16>
     aa4:	43 c0       	rjmp	.+134    	; 0xb2c <__fpcmp_parts_f+0x9c>
     aa6:	94 30       	cpi	r25, 0x04	; 4
     aa8:	51 f4       	brne	.+20     	; 0xabe <__fpcmp_parts_f+0x2e>
     aaa:	11 96       	adiw	r26, 0x01	; 1
     aac:	1c 91       	ld	r17, X
     aae:	84 30       	cpi	r24, 0x04	; 4
     ab0:	99 f5       	brne	.+102    	; 0xb18 <__fpcmp_parts_f+0x88>
     ab2:	81 81       	ldd	r24, Z+1	; 0x01
     ab4:	68 2f       	mov	r22, r24
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	61 1b       	sub	r22, r17
     aba:	71 09       	sbc	r23, r1
     abc:	3f c0       	rjmp	.+126    	; 0xb3c <__fpcmp_parts_f+0xac>
     abe:	84 30       	cpi	r24, 0x04	; 4
     ac0:	21 f0       	breq	.+8      	; 0xaca <__fpcmp_parts_f+0x3a>
     ac2:	92 30       	cpi	r25, 0x02	; 2
     ac4:	31 f4       	brne	.+12     	; 0xad2 <__fpcmp_parts_f+0x42>
     ac6:	82 30       	cpi	r24, 0x02	; 2
     ac8:	b9 f1       	breq	.+110    	; 0xb38 <__fpcmp_parts_f+0xa8>
     aca:	81 81       	ldd	r24, Z+1	; 0x01
     acc:	88 23       	and	r24, r24
     ace:	89 f1       	breq	.+98     	; 0xb32 <__fpcmp_parts_f+0xa2>
     ad0:	2d c0       	rjmp	.+90     	; 0xb2c <__fpcmp_parts_f+0x9c>
     ad2:	11 96       	adiw	r26, 0x01	; 1
     ad4:	1c 91       	ld	r17, X
     ad6:	11 97       	sbiw	r26, 0x01	; 1
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	f1 f0       	breq	.+60     	; 0xb18 <__fpcmp_parts_f+0x88>
     adc:	81 81       	ldd	r24, Z+1	; 0x01
     ade:	18 17       	cp	r17, r24
     ae0:	d9 f4       	brne	.+54     	; 0xb18 <__fpcmp_parts_f+0x88>
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	2d 91       	ld	r18, X+
     ae6:	3c 91       	ld	r19, X
     ae8:	13 97       	sbiw	r26, 0x03	; 3
     aea:	82 81       	ldd	r24, Z+2	; 0x02
     aec:	93 81       	ldd	r25, Z+3	; 0x03
     aee:	82 17       	cp	r24, r18
     af0:	93 07       	cpc	r25, r19
     af2:	94 f0       	brlt	.+36     	; 0xb18 <__fpcmp_parts_f+0x88>
     af4:	28 17       	cp	r18, r24
     af6:	39 07       	cpc	r19, r25
     af8:	bc f0       	brlt	.+46     	; 0xb28 <__fpcmp_parts_f+0x98>
     afa:	14 96       	adiw	r26, 0x04	; 4
     afc:	8d 91       	ld	r24, X+
     afe:	9d 91       	ld	r25, X+
     b00:	0d 90       	ld	r0, X+
     b02:	bc 91       	ld	r27, X
     b04:	a0 2d       	mov	r26, r0
     b06:	24 81       	ldd	r18, Z+4	; 0x04
     b08:	35 81       	ldd	r19, Z+5	; 0x05
     b0a:	46 81       	ldd	r20, Z+6	; 0x06
     b0c:	57 81       	ldd	r21, Z+7	; 0x07
     b0e:	28 17       	cp	r18, r24
     b10:	39 07       	cpc	r19, r25
     b12:	4a 07       	cpc	r20, r26
     b14:	5b 07       	cpc	r21, r27
     b16:	18 f4       	brcc	.+6      	; 0xb1e <__fpcmp_parts_f+0x8e>
     b18:	11 23       	and	r17, r17
     b1a:	41 f0       	breq	.+16     	; 0xb2c <__fpcmp_parts_f+0x9c>
     b1c:	0a c0       	rjmp	.+20     	; 0xb32 <__fpcmp_parts_f+0xa2>
     b1e:	82 17       	cp	r24, r18
     b20:	93 07       	cpc	r25, r19
     b22:	a4 07       	cpc	r26, r20
     b24:	b5 07       	cpc	r27, r21
     b26:	40 f4       	brcc	.+16     	; 0xb38 <__fpcmp_parts_f+0xa8>
     b28:	11 23       	and	r17, r17
     b2a:	19 f0       	breq	.+6      	; 0xb32 <__fpcmp_parts_f+0xa2>
     b2c:	61 e0       	ldi	r22, 0x01	; 1
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	05 c0       	rjmp	.+10     	; 0xb3c <__fpcmp_parts_f+0xac>
     b32:	6f ef       	ldi	r22, 0xFF	; 255
     b34:	7f ef       	ldi	r23, 0xFF	; 255
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <__fpcmp_parts_f+0xac>
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	cb 01       	movw	r24, r22
     b3e:	1f 91       	pop	r17
     b40:	08 95       	ret

00000b42 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
     b42:	df 93       	push	r29
     b44:	cf 93       	push	r28
     b46:	00 d0       	rcall	.+0      	; 0xb48 <GPIO_setupPinDirection+0x6>
     b48:	00 d0       	rcall	.+0      	; 0xb4a <GPIO_setupPinDirection+0x8>
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	6a 83       	std	Y+2, r22	; 0x02
     b54:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     b56:	8a 81       	ldd	r24, Y+2	; 0x02
     b58:	88 30       	cpi	r24, 0x08	; 8
     b5a:	08 f0       	brcs	.+2      	; 0xb5e <GPIO_setupPinDirection+0x1c>
     b5c:	d5 c0       	rjmp	.+426    	; 0xd08 <GPIO_setupPinDirection+0x1c6>
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	84 30       	cpi	r24, 0x04	; 4
     b62:	08 f0       	brcs	.+2      	; 0xb66 <GPIO_setupPinDirection+0x24>
     b64:	d1 c0       	rjmp	.+418    	; 0xd08 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	28 2f       	mov	r18, r24
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	3d 83       	std	Y+5, r19	; 0x05
     b6e:	2c 83       	std	Y+4, r18	; 0x04
     b70:	8c 81       	ldd	r24, Y+4	; 0x04
     b72:	9d 81       	ldd	r25, Y+5	; 0x05
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	91 05       	cpc	r25, r1
     b78:	09 f4       	brne	.+2      	; 0xb7c <GPIO_setupPinDirection+0x3a>
     b7a:	43 c0       	rjmp	.+134    	; 0xc02 <GPIO_setupPinDirection+0xc0>
     b7c:	2c 81       	ldd	r18, Y+4	; 0x04
     b7e:	3d 81       	ldd	r19, Y+5	; 0x05
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <GPIO_setupPinDirection+0x4e>
     b86:	8c 81       	ldd	r24, Y+4	; 0x04
     b88:	9d 81       	ldd	r25, Y+5	; 0x05
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	71 f0       	breq	.+28     	; 0xbaa <GPIO_setupPinDirection+0x68>
     b8e:	bc c0       	rjmp	.+376    	; 0xd08 <GPIO_setupPinDirection+0x1c6>
     b90:	2c 81       	ldd	r18, Y+4	; 0x04
     b92:	3d 81       	ldd	r19, Y+5	; 0x05
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <GPIO_setupPinDirection+0x5a>
     b9a:	5f c0       	rjmp	.+190    	; 0xc5a <GPIO_setupPinDirection+0x118>
     b9c:	8c 81       	ldd	r24, Y+4	; 0x04
     b9e:	9d 81       	ldd	r25, Y+5	; 0x05
     ba0:	83 30       	cpi	r24, 0x03	; 3
     ba2:	91 05       	cpc	r25, r1
     ba4:	09 f4       	brne	.+2      	; 0xba8 <GPIO_setupPinDirection+0x66>
     ba6:	85 c0       	rjmp	.+266    	; 0xcb2 <GPIO_setupPinDirection+0x170>
     ba8:	af c0       	rjmp	.+350    	; 0xd08 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	81 30       	cpi	r24, 0x01	; 1
     bae:	a1 f4       	brne	.+40     	; 0xbd8 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
     bb0:	aa e3       	ldi	r26, 0x3A	; 58
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e3       	ldi	r30, 0x3A	; 58
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	48 2f       	mov	r20, r24
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	02 2e       	mov	r0, r18
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <GPIO_setupPinDirection+0x8c>
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	0a 94       	dec	r0
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <GPIO_setupPinDirection+0x88>
     bd2:	84 2b       	or	r24, r20
     bd4:	8c 93       	st	X, r24
     bd6:	98 c0       	rjmp	.+304    	; 0xd08 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
     bd8:	aa e3       	ldi	r26, 0x3A	; 58
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	ea e3       	ldi	r30, 0x3A	; 58
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	48 2f       	mov	r20, r24
     be4:	8a 81       	ldd	r24, Y+2	; 0x02
     be6:	28 2f       	mov	r18, r24
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	02 2e       	mov	r0, r18
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <GPIO_setupPinDirection+0xb4>
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	0a 94       	dec	r0
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <GPIO_setupPinDirection+0xb0>
     bfa:	80 95       	com	r24
     bfc:	84 23       	and	r24, r20
     bfe:	8c 93       	st	X, r24
     c00:	83 c0       	rjmp	.+262    	; 0xd08 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	a1 f4       	brne	.+40     	; 0xc30 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
     c08:	a7 e3       	ldi	r26, 0x37	; 55
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e7 e3       	ldi	r30, 0x37	; 55
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	48 2f       	mov	r20, r24
     c14:	8a 81       	ldd	r24, Y+2	; 0x02
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	02 2e       	mov	r0, r18
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <GPIO_setupPinDirection+0xe4>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	0a 94       	dec	r0
     c28:	e2 f7       	brpl	.-8      	; 0xc22 <GPIO_setupPinDirection+0xe0>
     c2a:	84 2b       	or	r24, r20
     c2c:	8c 93       	st	X, r24
     c2e:	6c c0       	rjmp	.+216    	; 0xd08 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
     c30:	a7 e3       	ldi	r26, 0x37	; 55
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e7 e3       	ldi	r30, 0x37	; 55
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	48 2f       	mov	r20, r24
     c3c:	8a 81       	ldd	r24, Y+2	; 0x02
     c3e:	28 2f       	mov	r18, r24
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	02 2e       	mov	r0, r18
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <GPIO_setupPinDirection+0x10c>
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	0a 94       	dec	r0
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <GPIO_setupPinDirection+0x108>
     c52:	80 95       	com	r24
     c54:	84 23       	and	r24, r20
     c56:	8c 93       	st	X, r24
     c58:	57 c0       	rjmp	.+174    	; 0xd08 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	a1 f4       	brne	.+40     	; 0xc88 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
     c60:	a4 e3       	ldi	r26, 0x34	; 52
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e4 e3       	ldi	r30, 0x34	; 52
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	48 2f       	mov	r20, r24
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	02 2e       	mov	r0, r18
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <GPIO_setupPinDirection+0x13c>
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	0a 94       	dec	r0
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <GPIO_setupPinDirection+0x138>
     c82:	84 2b       	or	r24, r20
     c84:	8c 93       	st	X, r24
     c86:	40 c0       	rjmp	.+128    	; 0xd08 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
     c88:	a4 e3       	ldi	r26, 0x34	; 52
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e4 e3       	ldi	r30, 0x34	; 52
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	48 2f       	mov	r20, r24
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 2e       	mov	r0, r18
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <GPIO_setupPinDirection+0x164>
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	0a 94       	dec	r0
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <GPIO_setupPinDirection+0x160>
     caa:	80 95       	com	r24
     cac:	84 23       	and	r24, r20
     cae:	8c 93       	st	X, r24
     cb0:	2b c0       	rjmp	.+86     	; 0xd08 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	a1 f4       	brne	.+40     	; 0xce0 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
     cb8:	a1 e3       	ldi	r26, 0x31	; 49
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e1 e3       	ldi	r30, 0x31	; 49
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <GPIO_setupPinDirection+0x194>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <GPIO_setupPinDirection+0x190>
     cda:	84 2b       	or	r24, r20
     cdc:	8c 93       	st	X, r24
     cde:	14 c0       	rjmp	.+40     	; 0xd08 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
     ce0:	a1 e3       	ldi	r26, 0x31	; 49
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e1 e3       	ldi	r30, 0x31	; 49
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	48 2f       	mov	r20, r24
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 2e       	mov	r0, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <GPIO_setupPinDirection+0x1bc>
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	0a 94       	dec	r0
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <GPIO_setupPinDirection+0x1b8>
     d02:	80 95       	com	r24
     d04:	84 23       	and	r24, r20
     d06:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <GPIO_writePin+0x6>
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <GPIO_writePin+0x8>
     d20:	0f 92       	push	r0
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	89 83       	std	Y+1, r24	; 0x01
     d28:	6a 83       	std	Y+2, r22	; 0x02
     d2a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	88 30       	cpi	r24, 0x08	; 8
     d30:	08 f0       	brcs	.+2      	; 0xd34 <GPIO_writePin+0x1c>
     d32:	d5 c0       	rjmp	.+426    	; 0xede <GPIO_writePin+0x1c6>
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	84 30       	cpi	r24, 0x04	; 4
     d38:	08 f0       	brcs	.+2      	; 0xd3c <GPIO_writePin+0x24>
     d3a:	d1 c0       	rjmp	.+418    	; 0xede <GPIO_writePin+0x1c6>
		/* Do Nothing */
	} else {
		/* putting the port value as required */
		switch (port_num) {
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	3d 83       	std	Y+5, r19	; 0x05
     d44:	2c 83       	std	Y+4, r18	; 0x04
     d46:	8c 81       	ldd	r24, Y+4	; 0x04
     d48:	9d 81       	ldd	r25, Y+5	; 0x05
     d4a:	81 30       	cpi	r24, 0x01	; 1
     d4c:	91 05       	cpc	r25, r1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <GPIO_writePin+0x3a>
     d50:	43 c0       	rjmp	.+134    	; 0xdd8 <GPIO_writePin+0xc0>
     d52:	2c 81       	ldd	r18, Y+4	; 0x04
     d54:	3d 81       	ldd	r19, Y+5	; 0x05
     d56:	22 30       	cpi	r18, 0x02	; 2
     d58:	31 05       	cpc	r19, r1
     d5a:	2c f4       	brge	.+10     	; 0xd66 <GPIO_writePin+0x4e>
     d5c:	8c 81       	ldd	r24, Y+4	; 0x04
     d5e:	9d 81       	ldd	r25, Y+5	; 0x05
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	71 f0       	breq	.+28     	; 0xd80 <GPIO_writePin+0x68>
     d64:	bc c0       	rjmp	.+376    	; 0xede <GPIO_writePin+0x1c6>
     d66:	2c 81       	ldd	r18, Y+4	; 0x04
     d68:	3d 81       	ldd	r19, Y+5	; 0x05
     d6a:	22 30       	cpi	r18, 0x02	; 2
     d6c:	31 05       	cpc	r19, r1
     d6e:	09 f4       	brne	.+2      	; 0xd72 <GPIO_writePin+0x5a>
     d70:	5f c0       	rjmp	.+190    	; 0xe30 <GPIO_writePin+0x118>
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	9d 81       	ldd	r25, Y+5	; 0x05
     d76:	83 30       	cpi	r24, 0x03	; 3
     d78:	91 05       	cpc	r25, r1
     d7a:	09 f4       	brne	.+2      	; 0xd7e <GPIO_writePin+0x66>
     d7c:	85 c0       	rjmp	.+266    	; 0xe88 <GPIO_writePin+0x170>
     d7e:	af c0       	rjmp	.+350    	; 0xede <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == 0)
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	88 23       	and	r24, r24
     d84:	a9 f4       	brne	.+42     	; 0xdb0 <GPIO_writePin+0x98>
				CLEAR_BIT(PORTA, pin_num);
     d86:	ab e3       	ldi	r26, 0x3B	; 59
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	eb e3       	ldi	r30, 0x3B	; 59
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <GPIO_writePin+0x8c>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <GPIO_writePin+0x88>
     da8:	80 95       	com	r24
     daa:	84 23       	and	r24, r20
     dac:	8c 93       	st	X, r24
     dae:	97 c0       	rjmp	.+302    	; 0xede <GPIO_writePin+0x1c6>
			else
				SET_BIT(PORTA, pin_num);
     db0:	ab e3       	ldi	r26, 0x3B	; 59
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	eb e3       	ldi	r30, 0x3B	; 59
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 2e       	mov	r0, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <GPIO_writePin+0xb6>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <GPIO_writePin+0xb2>
     dd2:	84 2b       	or	r24, r20
     dd4:	8c 93       	st	X, r24
     dd6:	83 c0       	rjmp	.+262    	; 0xede <GPIO_writePin+0x1c6>
			break;
		case PORTB_ID:
			if (value == 0)
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	88 23       	and	r24, r24
     ddc:	a9 f4       	brne	.+42     	; 0xe08 <GPIO_writePin+0xf0>
				CLEAR_BIT(PORTB, pin_num);
     dde:	a8 e3       	ldi	r26, 0x38	; 56
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e8 e3       	ldi	r30, 0x38	; 56
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <GPIO_writePin+0xe4>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <GPIO_writePin+0xe0>
     e00:	80 95       	com	r24
     e02:	84 23       	and	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	6b c0       	rjmp	.+214    	; 0xede <GPIO_writePin+0x1c6>
			else
				SET_BIT(PORTB, pin_num);
     e08:	a8 e3       	ldi	r26, 0x38	; 56
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e8 e3       	ldi	r30, 0x38	; 56
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <GPIO_writePin+0x10e>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <GPIO_writePin+0x10a>
     e2a:	84 2b       	or	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	57 c0       	rjmp	.+174    	; 0xede <GPIO_writePin+0x1c6>
			break;
		case PORTC_ID:
			if (value == 0)
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	88 23       	and	r24, r24
     e34:	a9 f4       	brne	.+42     	; 0xe60 <GPIO_writePin+0x148>
				CLEAR_BIT(PORTC, pin_num);
     e36:	a5 e3       	ldi	r26, 0x35	; 53
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e5 e3       	ldi	r30, 0x35	; 53
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <GPIO_writePin+0x13c>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <GPIO_writePin+0x138>
     e58:	80 95       	com	r24
     e5a:	84 23       	and	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	3f c0       	rjmp	.+126    	; 0xede <GPIO_writePin+0x1c6>
			else
				SET_BIT(PORTC, pin_num);
     e60:	a5 e3       	ldi	r26, 0x35	; 53
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e5 e3       	ldi	r30, 0x35	; 53
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	48 2f       	mov	r20, r24
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 2e       	mov	r0, r18
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <GPIO_writePin+0x166>
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	0a 94       	dec	r0
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <GPIO_writePin+0x162>
     e82:	84 2b       	or	r24, r20
     e84:	8c 93       	st	X, r24
     e86:	2b c0       	rjmp	.+86     	; 0xede <GPIO_writePin+0x1c6>
			break;
		case PORTD_ID:
			if (value == 0)
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	88 23       	and	r24, r24
     e8c:	a9 f4       	brne	.+42     	; 0xeb8 <GPIO_writePin+0x1a0>
				CLEAR_BIT(PORTD, pin_num);
     e8e:	a2 e3       	ldi	r26, 0x32	; 50
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e2 e3       	ldi	r30, 0x32	; 50
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <GPIO_writePin+0x194>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <GPIO_writePin+0x190>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	13 c0       	rjmp	.+38     	; 0xede <GPIO_writePin+0x1c6>
			else
				SET_BIT(PORTD, pin_num);
     eb8:	a2 e3       	ldi	r26, 0x32	; 50
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e2 e3       	ldi	r30, 0x32	; 50
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <GPIO_writePin+0x1be>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <GPIO_writePin+0x1ba>
     eda:	84 2b       	or	r24, r20
     edc:	8c 93       	st	X, r24
			break;
		}
	}

}
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	2a 97       	sbiw	r28, 0x0a	; 10
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	18 f4       	brcc	.+6      	; 0xf12 <GPIO_readPin+0x24>
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	84 30       	cpi	r24, 0x04	; 4
     f10:	10 f0       	brcs	.+4      	; 0xf16 <GPIO_readPin+0x28>
		return LOGIC_LOW;
     f12:	19 86       	std	Y+9, r1	; 0x09
     f14:	8a c0       	rjmp	.+276    	; 0x102a <GPIO_readPin+0x13c>
	} else {
		/* getting the required pin value */
		switch (port_num) {
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	38 87       	std	Y+8, r19	; 0x08
     f1e:	2f 83       	std	Y+7, r18	; 0x07
     f20:	4f 81       	ldd	r20, Y+7	; 0x07
     f22:	58 85       	ldd	r21, Y+8	; 0x08
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	89 f1       	breq	.+98     	; 0xf8c <GPIO_readPin+0x9e>
     f2a:	8f 81       	ldd	r24, Y+7	; 0x07
     f2c:	98 85       	ldd	r25, Y+8	; 0x08
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x52>
     f34:	2f 81       	ldd	r18, Y+7	; 0x07
     f36:	38 85       	ldd	r19, Y+8	; 0x08
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x6a>
     f3e:	74 c0       	rjmp	.+232    	; 0x1028 <GPIO_readPin+0x13a>
     f40:	4f 81       	ldd	r20, Y+7	; 0x07
     f42:	58 85       	ldd	r21, Y+8	; 0x08
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	d9 f1       	breq	.+118    	; 0xfc0 <GPIO_readPin+0xd2>
     f4a:	8f 81       	ldd	r24, Y+7	; 0x07
     f4c:	98 85       	ldd	r25, Y+8	; 0x08
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x68>
     f54:	4f c0       	rjmp	.+158    	; 0xff4 <GPIO_readPin+0x106>
     f56:	68 c0       	rjmp	.+208    	; 0x1028 <GPIO_readPin+0x13a>
		case PORTA_ID:
			return BIT_IS_SET(PINA, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x82>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7e>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x96>
     f7e:	51 e0       	ldi	r21, 0x01	; 1
     f80:	5e 83       	std	Y+6, r21	; 0x06
     f82:	01 c0       	rjmp	.+2      	; 0xf86 <GPIO_readPin+0x98>
     f84:	1e 82       	std	Y+6, r1	; 0x06
     f86:	8e 81       	ldd	r24, Y+6	; 0x06
     f88:	89 87       	std	Y+9, r24	; 0x09
     f8a:	4f c0       	rjmp	.+158    	; 0x102a <GPIO_readPin+0x13c>
			break;
		case PORTB_ID:
			return BIT_IS_SET(PINB, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
     f8c:	e6 e3       	ldi	r30, 0x36	; 54
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	88 2f       	mov	r24, r24
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	a9 01       	movw	r20, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <GPIO_readPin+0xb6>
     fa0:	55 95       	asr	r21
     fa2:	47 95       	ror	r20
     fa4:	8a 95       	dec	r24
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <GPIO_readPin+0xb2>
     fa8:	ca 01       	movw	r24, r20
     faa:	81 70       	andi	r24, 0x01	; 1
     fac:	90 70       	andi	r25, 0x00	; 0
     fae:	88 23       	and	r24, r24
     fb0:	19 f0       	breq	.+6      	; 0xfb8 <GPIO_readPin+0xca>
     fb2:	51 e0       	ldi	r21, 0x01	; 1
     fb4:	5d 83       	std	Y+5, r21	; 0x05
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <GPIO_readPin+0xcc>
     fb8:	1d 82       	std	Y+5, r1	; 0x05
     fba:	8d 81       	ldd	r24, Y+5	; 0x05
     fbc:	89 87       	std	Y+9, r24	; 0x09
     fbe:	35 c0       	rjmp	.+106    	; 0x102a <GPIO_readPin+0x13c>
			break;
		case PORTC_ID:
			return BIT_IS_SET(PINC, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
     fc0:	e3 e3       	ldi	r30, 0x33	; 51
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a9 01       	movw	r20, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <GPIO_readPin+0xea>
     fd4:	55 95       	asr	r21
     fd6:	47 95       	ror	r20
     fd8:	8a 95       	dec	r24
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <GPIO_readPin+0xe6>
     fdc:	ca 01       	movw	r24, r20
     fde:	81 70       	andi	r24, 0x01	; 1
     fe0:	90 70       	andi	r25, 0x00	; 0
     fe2:	88 23       	and	r24, r24
     fe4:	19 f0       	breq	.+6      	; 0xfec <GPIO_readPin+0xfe>
     fe6:	51 e0       	ldi	r21, 0x01	; 1
     fe8:	5c 83       	std	Y+4, r21	; 0x04
     fea:	01 c0       	rjmp	.+2      	; 0xfee <GPIO_readPin+0x100>
     fec:	1c 82       	std	Y+4, r1	; 0x04
     fee:	8c 81       	ldd	r24, Y+4	; 0x04
     ff0:	89 87       	std	Y+9, r24	; 0x09
     ff2:	1b c0       	rjmp	.+54     	; 0x102a <GPIO_readPin+0x13c>
			break;
		case PORTD_ID:
			return BIT_IS_SET(PIND, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
     ff4:	e0 e3       	ldi	r30, 0x30	; 48
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	a9 01       	movw	r20, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <GPIO_readPin+0x11e>
    1008:	55 95       	asr	r21
    100a:	47 95       	ror	r20
    100c:	8a 95       	dec	r24
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <GPIO_readPin+0x11a>
    1010:	ca 01       	movw	r24, r20
    1012:	81 70       	andi	r24, 0x01	; 1
    1014:	90 70       	andi	r25, 0x00	; 0
    1016:	88 23       	and	r24, r24
    1018:	19 f0       	breq	.+6      	; 0x1020 <GPIO_readPin+0x132>
    101a:	51 e0       	ldi	r21, 0x01	; 1
    101c:	5b 83       	std	Y+3, r21	; 0x03
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <GPIO_readPin+0x134>
    1020:	1b 82       	std	Y+3, r1	; 0x03
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	89 87       	std	Y+9, r24	; 0x09
    1026:	01 c0       	rjmp	.+2      	; 0x102a <GPIO_readPin+0x13c>
    1028:	02 c0       	rjmp	.+4      	; 0x102e <GPIO_readPin+0x140>
			break;
		}
	}
}
    102a:	99 85       	ldd	r25, Y+9	; 0x09
    102c:	9a 87       	std	Y+10, r25	; 0x0a
    102e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1030:	2a 96       	adiw	r28, 0x0a	; 10
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	00 d0       	rcall	.+0      	; 0x1048 <GPIO_setupPortDirection+0x6>
    1048:	00 d0       	rcall	.+0      	; 0x104a <GPIO_setupPortDirection+0x8>
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	84 30       	cpi	r24, 0x04	; 4
    1056:	90 f5       	brcc	.+100    	; 0x10bc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	3c 83       	std	Y+4, r19	; 0x04
    1060:	2b 83       	std	Y+3, r18	; 0x03
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	9c 81       	ldd	r25, Y+4	; 0x04
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	91 05       	cpc	r25, r1
    106a:	d1 f0       	breq	.+52     	; 0x10a0 <GPIO_setupPortDirection+0x5e>
    106c:	2b 81       	ldd	r18, Y+3	; 0x03
    106e:	3c 81       	ldd	r19, Y+4	; 0x04
    1070:	22 30       	cpi	r18, 0x02	; 2
    1072:	31 05       	cpc	r19, r1
    1074:	2c f4       	brge	.+10     	; 0x1080 <GPIO_setupPortDirection+0x3e>
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	9c 81       	ldd	r25, Y+4	; 0x04
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	61 f0       	breq	.+24     	; 0x1096 <GPIO_setupPortDirection+0x54>
    107e:	1e c0       	rjmp	.+60     	; 0x10bc <GPIO_setupPortDirection+0x7a>
    1080:	2b 81       	ldd	r18, Y+3	; 0x03
    1082:	3c 81       	ldd	r19, Y+4	; 0x04
    1084:	22 30       	cpi	r18, 0x02	; 2
    1086:	31 05       	cpc	r19, r1
    1088:	81 f0       	breq	.+32     	; 0x10aa <GPIO_setupPortDirection+0x68>
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	9c 81       	ldd	r25, Y+4	; 0x04
    108e:	83 30       	cpi	r24, 0x03	; 3
    1090:	91 05       	cpc	r25, r1
    1092:	81 f0       	breq	.+32     	; 0x10b4 <GPIO_setupPortDirection+0x72>
    1094:	13 c0       	rjmp	.+38     	; 0x10bc <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    1096:	ea e3       	ldi	r30, 0x3A	; 58
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	80 83       	st	Z, r24
    109e:	0e c0       	rjmp	.+28     	; 0x10bc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    10a0:	e7 e3       	ldi	r30, 0x37	; 55
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	80 83       	st	Z, r24
    10a8:	09 c0       	rjmp	.+18     	; 0x10bc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    10aa:	e4 e3       	ldi	r30, 0x34	; 52
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	80 83       	st	Z, r24
    10b2:	04 c0       	rjmp	.+8      	; 0x10bc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    10b4:	e1 e3       	ldi	r30, 0x31	; 49
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	80 83       	st	Z, r24
			break;
		}
	}
}
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <GPIO_writePort+0x6>
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <GPIO_writePort+0x8>
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	84 30       	cpi	r24, 0x04	; 4
    10de:	90 f5       	brcc	.+100    	; 0x1144 <GPIO_writePort+0x7a>
		/* Do Nothing */
	} else {
		/* Write the required port as required */
		switch (port_num) {
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	3c 83       	std	Y+4, r19	; 0x04
    10e8:	2b 83       	std	Y+3, r18	; 0x03
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	9c 81       	ldd	r25, Y+4	; 0x04
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	91 05       	cpc	r25, r1
    10f2:	d1 f0       	breq	.+52     	; 0x1128 <GPIO_writePort+0x5e>
    10f4:	2b 81       	ldd	r18, Y+3	; 0x03
    10f6:	3c 81       	ldd	r19, Y+4	; 0x04
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	31 05       	cpc	r19, r1
    10fc:	2c f4       	brge	.+10     	; 0x1108 <GPIO_writePort+0x3e>
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	9c 81       	ldd	r25, Y+4	; 0x04
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	61 f0       	breq	.+24     	; 0x111e <GPIO_writePort+0x54>
    1106:	1e c0       	rjmp	.+60     	; 0x1144 <GPIO_writePort+0x7a>
    1108:	2b 81       	ldd	r18, Y+3	; 0x03
    110a:	3c 81       	ldd	r19, Y+4	; 0x04
    110c:	22 30       	cpi	r18, 0x02	; 2
    110e:	31 05       	cpc	r19, r1
    1110:	81 f0       	breq	.+32     	; 0x1132 <GPIO_writePort+0x68>
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	9c 81       	ldd	r25, Y+4	; 0x04
    1116:	83 30       	cpi	r24, 0x03	; 3
    1118:	91 05       	cpc	r25, r1
    111a:	81 f0       	breq	.+32     	; 0x113c <GPIO_writePort+0x72>
    111c:	13 c0       	rjmp	.+38     	; 0x1144 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    111e:	eb e3       	ldi	r30, 0x3B	; 59
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	80 83       	st	Z, r24
    1126:	0e c0       	rjmp	.+28     	; 0x1144 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1128:	e8 e3       	ldi	r30, 0x38	; 56
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	80 83       	st	Z, r24
    1130:	09 c0       	rjmp	.+18     	; 0x1144 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1132:	e5 e3       	ldi	r30, 0x35	; 53
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	80 83       	st	Z, r24
    113a:	04 c0       	rjmp	.+8      	; 0x1144 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    113c:	e2 e3       	ldi	r30, 0x32	; 50
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	80 83       	st	Z, r24
			break;
		}
	}
}
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	00 d0       	rcall	.+0      	; 0x1158 <GPIO_readPort+0x6>
    1158:	00 d0       	rcall	.+0      	; 0x115a <GPIO_readPort+0x8>
    115a:	0f 92       	push	r0
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	84 30       	cpi	r24, 0x04	; 4
    1166:	10 f0       	brcs	.+4      	; 0x116c <GPIO_readPort+0x1a>
		return 0; // if the port does not exist
    1168:	1c 82       	std	Y+4, r1	; 0x04
    116a:	34 c0       	rjmp	.+104    	; 0x11d4 <GPIO_readPort+0x82>
	} else {
		/* Get the required pin */
		switch (port_num) {
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	3b 83       	std	Y+3, r19	; 0x03
    1174:	2a 83       	std	Y+2, r18	; 0x02
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	9b 81       	ldd	r25, Y+3	; 0x03
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	91 05       	cpc	r25, r1
    117e:	d1 f0       	breq	.+52     	; 0x11b4 <GPIO_readPort+0x62>
    1180:	2a 81       	ldd	r18, Y+2	; 0x02
    1182:	3b 81       	ldd	r19, Y+3	; 0x03
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	2c f4       	brge	.+10     	; 0x1194 <GPIO_readPort+0x42>
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	9b 81       	ldd	r25, Y+3	; 0x03
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	61 f0       	breq	.+24     	; 0x11aa <GPIO_readPort+0x58>
    1192:	1f c0       	rjmp	.+62     	; 0x11d2 <GPIO_readPort+0x80>
    1194:	2a 81       	ldd	r18, Y+2	; 0x02
    1196:	3b 81       	ldd	r19, Y+3	; 0x03
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	81 f0       	breq	.+32     	; 0x11be <GPIO_readPort+0x6c>
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	9b 81       	ldd	r25, Y+3	; 0x03
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	91 05       	cpc	r25, r1
    11a6:	81 f0       	breq	.+32     	; 0x11c8 <GPIO_readPort+0x76>
    11a8:	14 c0       	rjmp	.+40     	; 0x11d2 <GPIO_readPort+0x80>
		case PORTA_ID:
			return PINA;
    11aa:	e9 e3       	ldi	r30, 0x39	; 57
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	90 81       	ld	r25, Z
    11b0:	9c 83       	std	Y+4, r25	; 0x04
    11b2:	10 c0       	rjmp	.+32     	; 0x11d4 <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			return PINB;
    11b4:	e6 e3       	ldi	r30, 0x36	; 54
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	20 81       	ld	r18, Z
    11ba:	2c 83       	std	Y+4, r18	; 0x04
    11bc:	0b c0       	rjmp	.+22     	; 0x11d4 <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			return PINC;
    11be:	e3 e3       	ldi	r30, 0x33	; 51
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	30 81       	ld	r19, Z
    11c4:	3c 83       	std	Y+4, r19	; 0x04
    11c6:	06 c0       	rjmp	.+12     	; 0x11d4 <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			return PIND;
    11c8:	e0 e3       	ldi	r30, 0x30	; 48
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	8c 83       	std	Y+4, r24	; 0x04
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <GPIO_readPort+0x82>
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <GPIO_readPort+0x86>
			break;
		}
	}
}
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	9d 83       	std	Y+5, r25	; 0x05
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <GPIO_togglePin>:


uint8 GPIO_togglePin(uint8 port_num, uint8 pin_num){
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <GPIO_togglePin+0x6>
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <GPIO_togglePin+0x8>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <GPIO_togglePin+0xa>
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	6a 83       	std	Y+2, r22	; 0x02
	/*
		 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
		 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
		 * In this case the input is not valid port/pin number
		 */
		if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	88 30       	cpi	r24, 0x08	; 8
    1200:	08 f0       	brcs	.+2      	; 0x1204 <GPIO_togglePin+0x1a>
    1202:	7b c0       	rjmp	.+246    	; 0x12fa <GPIO_togglePin+0x110>
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	84 30       	cpi	r24, 0x04	; 4
    1208:	08 f0       	brcs	.+2      	; 0x120c <GPIO_togglePin+0x22>
    120a:	77 c0       	rjmp	.+238    	; 0x12fa <GPIO_togglePin+0x110>
			/*Do nothing*/
		} else {
			/* getting the required pin value */
			switch (port_num) {
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	3d 83       	std	Y+5, r19	; 0x05
    1214:	2c 83       	std	Y+4, r18	; 0x04
    1216:	8c 81       	ldd	r24, Y+4	; 0x04
    1218:	9d 81       	ldd	r25, Y+5	; 0x05
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	91 05       	cpc	r25, r1
    121e:	61 f1       	breq	.+88     	; 0x1278 <GPIO_togglePin+0x8e>
    1220:	2c 81       	ldd	r18, Y+4	; 0x04
    1222:	3d 81       	ldd	r19, Y+5	; 0x05
    1224:	22 30       	cpi	r18, 0x02	; 2
    1226:	31 05       	cpc	r19, r1
    1228:	2c f4       	brge	.+10     	; 0x1234 <GPIO_togglePin+0x4a>
    122a:	8c 81       	ldd	r24, Y+4	; 0x04
    122c:	9d 81       	ldd	r25, Y+5	; 0x05
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	69 f0       	breq	.+26     	; 0x124c <GPIO_togglePin+0x62>
    1232:	63 c0       	rjmp	.+198    	; 0x12fa <GPIO_togglePin+0x110>
    1234:	2c 81       	ldd	r18, Y+4	; 0x04
    1236:	3d 81       	ldd	r19, Y+5	; 0x05
    1238:	22 30       	cpi	r18, 0x02	; 2
    123a:	31 05       	cpc	r19, r1
    123c:	91 f1       	breq	.+100    	; 0x12a2 <GPIO_togglePin+0xb8>
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	83 30       	cpi	r24, 0x03	; 3
    1244:	91 05       	cpc	r25, r1
    1246:	09 f4       	brne	.+2      	; 0x124a <GPIO_togglePin+0x60>
    1248:	42 c0       	rjmp	.+132    	; 0x12ce <GPIO_togglePin+0xe4>
    124a:	57 c0       	rjmp	.+174    	; 0x12fa <GPIO_togglePin+0x110>
			case PORTA_ID:
				return TOGGLE_BIT(PORTA,pin_num);
    124c:	ab e3       	ldi	r26, 0x3B	; 59
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	eb e3       	ldi	r30, 0x3B	; 59
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <GPIO_togglePin+0x80>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <GPIO_togglePin+0x7c>
    126e:	84 27       	eor	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	9c 91       	ld	r25, X
    1274:	9b 83       	std	Y+3, r25	; 0x03
    1276:	42 c0       	rjmp	.+132    	; 0x12fc <GPIO_togglePin+0x112>
				break;
			case PORTB_ID:
				return TOGGLE_BIT(PORTB,pin_num);
    1278:	a8 e3       	ldi	r26, 0x38	; 56
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e8 e3       	ldi	r30, 0x38	; 56
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <GPIO_togglePin+0xaa>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	2a 95       	dec	r18
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <GPIO_togglePin+0xa6>
    1298:	84 27       	eor	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	2c 91       	ld	r18, X
    129e:	2b 83       	std	Y+3, r18	; 0x03
    12a0:	2d c0       	rjmp	.+90     	; 0x12fc <GPIO_togglePin+0x112>
				break;
			case PORTC_ID:
				return TOGGLE_BIT(PORTC,pin_num);
    12a2:	a5 e3       	ldi	r26, 0x35	; 53
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e5 e3       	ldi	r30, 0x35	; 53
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <GPIO_togglePin+0xd6>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <GPIO_togglePin+0xd2>
    12c4:	84 27       	eor	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	3c 91       	ld	r19, X
    12ca:	3b 83       	std	Y+3, r19	; 0x03
    12cc:	17 c0       	rjmp	.+46     	; 0x12fc <GPIO_togglePin+0x112>
				break;
			case PORTD_ID:
				return TOGGLE_BIT(PORTD,pin_num);
    12ce:	a2 e3       	ldi	r26, 0x32	; 50
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e2 e3       	ldi	r30, 0x32	; 50
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <GPIO_togglePin+0x102>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <GPIO_togglePin+0xfe>
    12f0:	84 27       	eor	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	8c 91       	ld	r24, X
    12f6:	8b 83       	std	Y+3, r24	; 0x03
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <GPIO_togglePin+0x112>
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <GPIO_togglePin+0x116>
				break;
			}
		}
}
    12fc:	9b 81       	ldd	r25, Y+3	; 0x03
    12fe:	9e 83       	std	Y+6, r25	; 0x06
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	26 96       	adiw	r28, 0x06	; 6
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	2e 97       	sbiw	r28, 0x0e	; 14
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	61 e0       	ldi	r22, 0x01	; 1
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	0e 94 a1 05 	call	0xb42	; 0xb42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	62 e0       	ldi	r22, 0x02	; 2
    1336:	41 e0       	ldi	r20, 0x01	; 1
    1338:	0e 94 a1 05 	call	0xb42	; 0xb42 <GPIO_setupPinDirection>
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	a0 ea       	ldi	r26, 0xA0	; 160
    1342:	b1 e4       	ldi	r27, 0x41	; 65
    1344:	8b 87       	std	Y+11, r24	; 0x0b
    1346:	9c 87       	std	Y+12, r25	; 0x0c
    1348:	ad 87       	std	Y+13, r26	; 0x0d
    134a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134c:	6b 85       	ldd	r22, Y+11	; 0x0b
    134e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1350:	8d 85       	ldd	r24, Y+13	; 0x0d
    1352:	9e 85       	ldd	r25, Y+14	; 0x0e
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	4a e7       	ldi	r20, 0x7A	; 122
    135a:	55 e4       	ldi	r21, 0x45	; 69
    135c:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	8f 83       	std	Y+7, r24	; 0x07
    1366:	98 87       	std	Y+8, r25	; 0x08
    1368:	a9 87       	std	Y+9, r26	; 0x09
    136a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    136c:	6f 81       	ldd	r22, Y+7	; 0x07
    136e:	78 85       	ldd	r23, Y+8	; 0x08
    1370:	89 85       	ldd	r24, Y+9	; 0x09
    1372:	9a 85       	ldd	r25, Y+10	; 0x0a
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e8       	ldi	r20, 0x80	; 128
    137a:	5f e3       	ldi	r21, 0x3F	; 63
    137c:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    1380:	88 23       	and	r24, r24
    1382:	2c f4       	brge	.+10     	; 0x138e <LCD_init+0x7a>
		__ticks = 1;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	9e 83       	std	Y+6, r25	; 0x06
    138a:	8d 83       	std	Y+5, r24	; 0x05
    138c:	3f c0       	rjmp	.+126    	; 0x140c <LCD_init+0xf8>
	else if (__tmp > 65535)
    138e:	6f 81       	ldd	r22, Y+7	; 0x07
    1390:	78 85       	ldd	r23, Y+8	; 0x08
    1392:	89 85       	ldd	r24, Y+9	; 0x09
    1394:	9a 85       	ldd	r25, Y+10	; 0x0a
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	3f ef       	ldi	r19, 0xFF	; 255
    139a:	4f e7       	ldi	r20, 0x7F	; 127
    139c:	57 e4       	ldi	r21, 0x47	; 71
    139e:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    13a2:	18 16       	cp	r1, r24
    13a4:	4c f5       	brge	.+82     	; 0x13f8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e2       	ldi	r20, 0x20	; 32
    13b4:	51 e4       	ldi	r21, 0x41	; 65
    13b6:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	bc 01       	movw	r22, r24
    13c0:	cd 01       	movw	r24, r26
    13c2:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	9e 83       	std	Y+6, r25	; 0x06
    13cc:	8d 83       	std	Y+5, r24	; 0x05
    13ce:	0f c0       	rjmp	.+30     	; 0x13ee <LCD_init+0xda>
    13d0:	80 e9       	ldi	r24, 0x90	; 144
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	9c 83       	std	Y+4, r25	; 0x04
    13d6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	9c 81       	ldd	r25, Y+4	; 0x04
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <LCD_init+0xc8>
    13e0:	9c 83       	std	Y+4, r25	; 0x04
    13e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	9e 81       	ldd	r25, Y+6	; 0x06
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	9e 83       	std	Y+6, r25	; 0x06
    13ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	69 f7       	brne	.-38     	; 0x13d0 <LCD_init+0xbc>
    13f6:	14 c0       	rjmp	.+40     	; 0x1420 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f8:	6f 81       	ldd	r22, Y+7	; 0x07
    13fa:	78 85       	ldd	r23, Y+8	; 0x08
    13fc:	89 85       	ldd	r24, Y+9	; 0x09
    13fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1400:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	9e 83       	std	Y+6, r25	; 0x06
    140a:	8d 83       	std	Y+5, r24	; 0x05
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	9e 81       	ldd	r25, Y+6	; 0x06
    1410:	9a 83       	std	Y+2, r25	; 0x02
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	9a 81       	ldd	r25, Y+2	; 0x02
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <LCD_init+0x104>
    141c:	9a 83       	std	Y+2, r25	; 0x02
    141e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	63 e0       	ldi	r22, 0x03	; 3
    1424:	41 e0       	ldi	r20, 0x01	; 1
    1426:	0e 94 a1 05 	call	0xb42	; 0xb42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	64 e0       	ldi	r22, 0x04	; 4
    142e:	41 e0       	ldi	r20, 0x01	; 1
    1430:	0e 94 a1 05 	call	0xb42	; 0xb42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	65 e0       	ldi	r22, 0x05	; 5
    1438:	41 e0       	ldi	r20, 0x01	; 1
    143a:	0e 94 a1 05 	call	0xb42	; 0xb42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	66 e0       	ldi	r22, 0x06	; 6
    1442:	41 e0       	ldi	r20, 0x01	; 1
    1444:	0e 94 a1 05 	call	0xb42	; 0xb42 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1448:	83 e3       	ldi	r24, 0x33	; 51
    144a:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    144e:	82 e3       	ldi	r24, 0x32	; 50
    1450:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1454:	88 e2       	ldi	r24, 0x28	; 40
    1456:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    145a:	8c e0       	ldi	r24, 0x0C	; 12
    145c:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_sendCommand>
}
    1466:	2e 96       	adiw	r28, 0x0e	; 14
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	c3 56       	subi	r28, 0x63	; 99
    1486:	d0 40       	sbci	r29, 0x00	; 0
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	fe 01       	movw	r30, r28
    1494:	ed 59       	subi	r30, 0x9D	; 157
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
    14a4:	fe 01       	movw	r30, r28
    14a6:	e1 5a       	subi	r30, 0xA1	; 161
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a0 e8       	ldi	r26, 0x80	; 128
    14b0:	bf e3       	ldi	r27, 0x3F	; 63
    14b2:	80 83       	st	Z, r24
    14b4:	91 83       	std	Z+1, r25	; 0x01
    14b6:	a2 83       	std	Z+2, r26	; 0x02
    14b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ba:	8e 01       	movw	r16, r28
    14bc:	05 5a       	subi	r16, 0xA5	; 165
    14be:	1f 4f       	sbci	r17, 0xFF	; 255
    14c0:	fe 01       	movw	r30, r28
    14c2:	e1 5a       	subi	r30, 0xA1	; 161
    14c4:	ff 4f       	sbci	r31, 0xFF	; 255
    14c6:	60 81       	ld	r22, Z
    14c8:	71 81       	ldd	r23, Z+1	; 0x01
    14ca:	82 81       	ldd	r24, Z+2	; 0x02
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	4a e7       	ldi	r20, 0x7A	; 122
    14d4:	55 e4       	ldi	r21, 0x45	; 69
    14d6:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	f8 01       	movw	r30, r16
    14e0:	80 83       	st	Z, r24
    14e2:	91 83       	std	Z+1, r25	; 0x01
    14e4:	a2 83       	std	Z+2, r26	; 0x02
    14e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14e8:	fe 01       	movw	r30, r28
    14ea:	e5 5a       	subi	r30, 0xA5	; 165
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	60 81       	ld	r22, Z
    14f0:	71 81       	ldd	r23, Z+1	; 0x01
    14f2:	82 81       	ldd	r24, Z+2	; 0x02
    14f4:	93 81       	ldd	r25, Z+3	; 0x03
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 e8       	ldi	r20, 0x80	; 128
    14fc:	5f e3       	ldi	r21, 0x3F	; 63
    14fe:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    1502:	88 23       	and	r24, r24
    1504:	44 f4       	brge	.+16     	; 0x1516 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1506:	fe 01       	movw	r30, r28
    1508:	e7 5a       	subi	r30, 0xA7	; 167
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	91 83       	std	Z+1, r25	; 0x01
    1512:	80 83       	st	Z, r24
    1514:	64 c0       	rjmp	.+200    	; 0x15de <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1516:	fe 01       	movw	r30, r28
    1518:	e5 5a       	subi	r30, 0xA5	; 165
    151a:	ff 4f       	sbci	r31, 0xFF	; 255
    151c:	60 81       	ld	r22, Z
    151e:	71 81       	ldd	r23, Z+1	; 0x01
    1520:	82 81       	ldd	r24, Z+2	; 0x02
    1522:	93 81       	ldd	r25, Z+3	; 0x03
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	3f ef       	ldi	r19, 0xFF	; 255
    1528:	4f e7       	ldi	r20, 0x7F	; 127
    152a:	57 e4       	ldi	r21, 0x47	; 71
    152c:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    1530:	18 16       	cp	r1, r24
    1532:	0c f0       	brlt	.+2      	; 0x1536 <LCD_sendCommand+0xbe>
    1534:	43 c0       	rjmp	.+134    	; 0x15bc <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1536:	fe 01       	movw	r30, r28
    1538:	e1 5a       	subi	r30, 0xA1	; 161
    153a:	ff 4f       	sbci	r31, 0xFF	; 255
    153c:	60 81       	ld	r22, Z
    153e:	71 81       	ldd	r23, Z+1	; 0x01
    1540:	82 81       	ldd	r24, Z+2	; 0x02
    1542:	93 81       	ldd	r25, Z+3	; 0x03
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e2       	ldi	r20, 0x20	; 32
    154a:	51 e4       	ldi	r21, 0x41	; 65
    154c:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	8e 01       	movw	r16, r28
    1556:	07 5a       	subi	r16, 0xA7	; 167
    1558:	1f 4f       	sbci	r17, 0xFF	; 255
    155a:	bc 01       	movw	r22, r24
    155c:	cd 01       	movw	r24, r26
    155e:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	f8 01       	movw	r30, r16
    1568:	91 83       	std	Z+1, r25	; 0x01
    156a:	80 83       	st	Z, r24
    156c:	1f c0       	rjmp	.+62     	; 0x15ac <LCD_sendCommand+0x134>
    156e:	fe 01       	movw	r30, r28
    1570:	e9 5a       	subi	r30, 0xA9	; 169
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	80 e9       	ldi	r24, 0x90	; 144
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	91 83       	std	Z+1, r25	; 0x01
    157a:	80 83       	st	Z, r24
    157c:	fe 01       	movw	r30, r28
    157e:	e9 5a       	subi	r30, 0xA9	; 169
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	80 81       	ld	r24, Z
    1584:	91 81       	ldd	r25, Z+1	; 0x01
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <LCD_sendCommand+0x10e>
    158a:	fe 01       	movw	r30, r28
    158c:	e9 5a       	subi	r30, 0xA9	; 169
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	91 83       	std	Z+1, r25	; 0x01
    1592:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1594:	de 01       	movw	r26, r28
    1596:	a7 5a       	subi	r26, 0xA7	; 167
    1598:	bf 4f       	sbci	r27, 0xFF	; 255
    159a:	fe 01       	movw	r30, r28
    159c:	e7 5a       	subi	r30, 0xA7	; 167
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	80 81       	ld	r24, Z
    15a2:	91 81       	ldd	r25, Z+1	; 0x01
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	11 96       	adiw	r26, 0x01	; 1
    15a8:	9c 93       	st	X, r25
    15aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ac:	fe 01       	movw	r30, r28
    15ae:	e7 5a       	subi	r30, 0xA7	; 167
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	80 81       	ld	r24, Z
    15b4:	91 81       	ldd	r25, Z+1	; 0x01
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	d1 f6       	brne	.-76     	; 0x156e <LCD_sendCommand+0xf6>
    15ba:	27 c0       	rjmp	.+78     	; 0x160a <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15bc:	8e 01       	movw	r16, r28
    15be:	07 5a       	subi	r16, 0xA7	; 167
    15c0:	1f 4f       	sbci	r17, 0xFF	; 255
    15c2:	fe 01       	movw	r30, r28
    15c4:	e5 5a       	subi	r30, 0xA5	; 165
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	60 81       	ld	r22, Z
    15ca:	71 81       	ldd	r23, Z+1	; 0x01
    15cc:	82 81       	ldd	r24, Z+2	; 0x02
    15ce:	93 81       	ldd	r25, Z+3	; 0x03
    15d0:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	f8 01       	movw	r30, r16
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	80 83       	st	Z, r24
    15de:	de 01       	movw	r26, r28
    15e0:	ab 5a       	subi	r26, 0xAB	; 171
    15e2:	bf 4f       	sbci	r27, 0xFF	; 255
    15e4:	fe 01       	movw	r30, r28
    15e6:	e7 5a       	subi	r30, 0xA7	; 167
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	80 81       	ld	r24, Z
    15ec:	91 81       	ldd	r25, Z+1	; 0x01
    15ee:	8d 93       	st	X+, r24
    15f0:	9c 93       	st	X, r25
    15f2:	fe 01       	movw	r30, r28
    15f4:	eb 5a       	subi	r30, 0xAB	; 171
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	80 81       	ld	r24, Z
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <LCD_sendCommand+0x184>
    1600:	fe 01       	movw	r30, r28
    1602:	eb 5a       	subi	r30, 0xAB	; 171
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	62 e0       	ldi	r22, 0x02	; 2
    160e:	41 e0       	ldi	r20, 0x01	; 1
    1610:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
    1614:	fe 01       	movw	r30, r28
    1616:	ef 5a       	subi	r30, 0xAF	; 175
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	a0 e8       	ldi	r26, 0x80	; 128
    1620:	bf e3       	ldi	r27, 0x3F	; 63
    1622:	80 83       	st	Z, r24
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	a2 83       	std	Z+2, r26	; 0x02
    1628:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162a:	8e 01       	movw	r16, r28
    162c:	03 5b       	subi	r16, 0xB3	; 179
    162e:	1f 4f       	sbci	r17, 0xFF	; 255
    1630:	fe 01       	movw	r30, r28
    1632:	ef 5a       	subi	r30, 0xAF	; 175
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	4a e7       	ldi	r20, 0x7A	; 122
    1644:	55 e4       	ldi	r21, 0x45	; 69
    1646:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	f8 01       	movw	r30, r16
    1650:	80 83       	st	Z, r24
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	a2 83       	std	Z+2, r26	; 0x02
    1656:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1658:	fe 01       	movw	r30, r28
    165a:	e3 5b       	subi	r30, 0xB3	; 179
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e8       	ldi	r20, 0x80	; 128
    166c:	5f e3       	ldi	r21, 0x3F	; 63
    166e:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    1672:	88 23       	and	r24, r24
    1674:	44 f4       	brge	.+16     	; 0x1686 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1676:	fe 01       	movw	r30, r28
    1678:	e5 5b       	subi	r30, 0xB5	; 181
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	91 83       	std	Z+1, r25	; 0x01
    1682:	80 83       	st	Z, r24
    1684:	64 c0       	rjmp	.+200    	; 0x174e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1686:	fe 01       	movw	r30, r28
    1688:	e3 5b       	subi	r30, 0xB3	; 179
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	3f ef       	ldi	r19, 0xFF	; 255
    1698:	4f e7       	ldi	r20, 0x7F	; 127
    169a:	57 e4       	ldi	r21, 0x47	; 71
    169c:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    16a0:	18 16       	cp	r1, r24
    16a2:	0c f0       	brlt	.+2      	; 0x16a6 <LCD_sendCommand+0x22e>
    16a4:	43 c0       	rjmp	.+134    	; 0x172c <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a6:	fe 01       	movw	r30, r28
    16a8:	ef 5a       	subi	r30, 0xAF	; 175
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e2       	ldi	r20, 0x20	; 32
    16ba:	51 e4       	ldi	r21, 0x41	; 65
    16bc:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	8e 01       	movw	r16, r28
    16c6:	05 5b       	subi	r16, 0xB5	; 181
    16c8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ca:	bc 01       	movw	r22, r24
    16cc:	cd 01       	movw	r24, r26
    16ce:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	f8 01       	movw	r30, r16
    16d8:	91 83       	std	Z+1, r25	; 0x01
    16da:	80 83       	st	Z, r24
    16dc:	1f c0       	rjmp	.+62     	; 0x171c <LCD_sendCommand+0x2a4>
    16de:	fe 01       	movw	r30, r28
    16e0:	e7 5b       	subi	r30, 0xB7	; 183
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	80 e9       	ldi	r24, 0x90	; 144
    16e6:	91 e0       	ldi	r25, 0x01	; 1
    16e8:	91 83       	std	Z+1, r25	; 0x01
    16ea:	80 83       	st	Z, r24
    16ec:	fe 01       	movw	r30, r28
    16ee:	e7 5b       	subi	r30, 0xB7	; 183
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <LCD_sendCommand+0x27e>
    16fa:	fe 01       	movw	r30, r28
    16fc:	e7 5b       	subi	r30, 0xB7	; 183
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	91 83       	std	Z+1, r25	; 0x01
    1702:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1704:	de 01       	movw	r26, r28
    1706:	a5 5b       	subi	r26, 0xB5	; 181
    1708:	bf 4f       	sbci	r27, 0xFF	; 255
    170a:	fe 01       	movw	r30, r28
    170c:	e5 5b       	subi	r30, 0xB5	; 181
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	80 81       	ld	r24, Z
    1712:	91 81       	ldd	r25, Z+1	; 0x01
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	11 96       	adiw	r26, 0x01	; 1
    1718:	9c 93       	st	X, r25
    171a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171c:	fe 01       	movw	r30, r28
    171e:	e5 5b       	subi	r30, 0xB5	; 181
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	d1 f6       	brne	.-76     	; 0x16de <LCD_sendCommand+0x266>
    172a:	27 c0       	rjmp	.+78     	; 0x177a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172c:	8e 01       	movw	r16, r28
    172e:	05 5b       	subi	r16, 0xB5	; 181
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	fe 01       	movw	r30, r28
    1734:	e3 5b       	subi	r30, 0xB3	; 179
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	93 81       	ldd	r25, Z+3	; 0x03
    1740:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	f8 01       	movw	r30, r16
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	80 83       	st	Z, r24
    174e:	de 01       	movw	r26, r28
    1750:	a9 5b       	subi	r26, 0xB9	; 185
    1752:	bf 4f       	sbci	r27, 0xFF	; 255
    1754:	fe 01       	movw	r30, r28
    1756:	e5 5b       	subi	r30, 0xB5	; 181
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	80 81       	ld	r24, Z
    175c:	91 81       	ldd	r25, Z+1	; 0x01
    175e:	8d 93       	st	X+, r24
    1760:	9c 93       	st	X, r25
    1762:	fe 01       	movw	r30, r28
    1764:	e9 5b       	subi	r30, 0xB9	; 185
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	80 81       	ld	r24, Z
    176a:	91 81       	ldd	r25, Z+1	; 0x01
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <LCD_sendCommand+0x2f4>
    1770:	fe 01       	movw	r30, r28
    1772:	e9 5b       	subi	r30, 0xB9	; 185
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    177a:	fe 01       	movw	r30, r28
    177c:	ed 59       	subi	r30, 0x9D	; 157
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	80 81       	ld	r24, Z
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	80 71       	andi	r24, 0x10	; 16
    1788:	90 70       	andi	r25, 0x00	; 0
    178a:	95 95       	asr	r25
    178c:	87 95       	ror	r24
    178e:	95 95       	asr	r25
    1790:	87 95       	ror	r24
    1792:	95 95       	asr	r25
    1794:	87 95       	ror	r24
    1796:	95 95       	asr	r25
    1798:	87 95       	ror	r24
    179a:	98 2f       	mov	r25, r24
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	63 e0       	ldi	r22, 0x03	; 3
    17a0:	49 2f       	mov	r20, r25
    17a2:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    17a6:	fe 01       	movw	r30, r28
    17a8:	ed 59       	subi	r30, 0x9D	; 157
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	80 81       	ld	r24, Z
    17ae:	88 2f       	mov	r24, r24
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	80 72       	andi	r24, 0x20	; 32
    17b4:	90 70       	andi	r25, 0x00	; 0
    17b6:	95 95       	asr	r25
    17b8:	87 95       	ror	r24
    17ba:	95 95       	asr	r25
    17bc:	87 95       	ror	r24
    17be:	95 95       	asr	r25
    17c0:	87 95       	ror	r24
    17c2:	95 95       	asr	r25
    17c4:	87 95       	ror	r24
    17c6:	95 95       	asr	r25
    17c8:	87 95       	ror	r24
    17ca:	98 2f       	mov	r25, r24
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	64 e0       	ldi	r22, 0x04	; 4
    17d0:	49 2f       	mov	r20, r25
    17d2:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    17d6:	fe 01       	movw	r30, r28
    17d8:	ed 59       	subi	r30, 0x9D	; 157
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	80 81       	ld	r24, Z
    17de:	88 2f       	mov	r24, r24
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	80 74       	andi	r24, 0x40	; 64
    17e4:	90 70       	andi	r25, 0x00	; 0
    17e6:	08 2e       	mov	r0, r24
    17e8:	89 2f       	mov	r24, r25
    17ea:	00 0c       	add	r0, r0
    17ec:	88 1f       	adc	r24, r24
    17ee:	99 0b       	sbc	r25, r25
    17f0:	00 0c       	add	r0, r0
    17f2:	88 1f       	adc	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	98 2f       	mov	r25, r24
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	65 e0       	ldi	r22, 0x05	; 5
    17fc:	49 2f       	mov	r20, r25
    17fe:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1802:	fe 01       	movw	r30, r28
    1804:	ed 59       	subi	r30, 0x9D	; 157
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	80 81       	ld	r24, Z
    180a:	98 2f       	mov	r25, r24
    180c:	99 1f       	adc	r25, r25
    180e:	99 27       	eor	r25, r25
    1810:	99 1f       	adc	r25, r25
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	66 e0       	ldi	r22, 0x06	; 6
    1816:	49 2f       	mov	r20, r25
    1818:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
    181c:	fe 01       	movw	r30, r28
    181e:	ed 5b       	subi	r30, 0xBD	; 189
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	a0 e8       	ldi	r26, 0x80	; 128
    1828:	bf e3       	ldi	r27, 0x3F	; 63
    182a:	80 83       	st	Z, r24
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	a2 83       	std	Z+2, r26	; 0x02
    1830:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1832:	8e 01       	movw	r16, r28
    1834:	01 5c       	subi	r16, 0xC1	; 193
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	fe 01       	movw	r30, r28
    183a:	ed 5b       	subi	r30, 0xBD	; 189
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	4a e7       	ldi	r20, 0x7A	; 122
    184c:	55 e4       	ldi	r21, 0x45	; 69
    184e:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	f8 01       	movw	r30, r16
    1858:	80 83       	st	Z, r24
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	a2 83       	std	Z+2, r26	; 0x02
    185e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1860:	fe 01       	movw	r30, r28
    1862:	ff 96       	adiw	r30, 0x3f	; 63
    1864:	60 81       	ld	r22, Z
    1866:	71 81       	ldd	r23, Z+1	; 0x01
    1868:	82 81       	ldd	r24, Z+2	; 0x02
    186a:	93 81       	ldd	r25, Z+3	; 0x03
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e8       	ldi	r20, 0x80	; 128
    1872:	5f e3       	ldi	r21, 0x3F	; 63
    1874:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    1878:	88 23       	and	r24, r24
    187a:	2c f4       	brge	.+10     	; 0x1886 <LCD_sendCommand+0x40e>
		__ticks = 1;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9e af       	std	Y+62, r25	; 0x3e
    1882:	8d af       	std	Y+61, r24	; 0x3d
    1884:	46 c0       	rjmp	.+140    	; 0x1912 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1886:	fe 01       	movw	r30, r28
    1888:	ff 96       	adiw	r30, 0x3f	; 63
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	3f ef       	ldi	r19, 0xFF	; 255
    1896:	4f e7       	ldi	r20, 0x7F	; 127
    1898:	57 e4       	ldi	r21, 0x47	; 71
    189a:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    189e:	18 16       	cp	r1, r24
    18a0:	64 f5       	brge	.+88     	; 0x18fa <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a2:	fe 01       	movw	r30, r28
    18a4:	ed 5b       	subi	r30, 0xBD	; 189
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	60 81       	ld	r22, Z
    18aa:	71 81       	ldd	r23, Z+1	; 0x01
    18ac:	82 81       	ldd	r24, Z+2	; 0x02
    18ae:	93 81       	ldd	r25, Z+3	; 0x03
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e2       	ldi	r20, 0x20	; 32
    18b6:	51 e4       	ldi	r21, 0x41	; 65
    18b8:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	bc 01       	movw	r22, r24
    18c2:	cd 01       	movw	r24, r26
    18c4:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	9e af       	std	Y+62, r25	; 0x3e
    18ce:	8d af       	std	Y+61, r24	; 0x3d
    18d0:	0f c0       	rjmp	.+30     	; 0x18f0 <LCD_sendCommand+0x478>
    18d2:	80 e9       	ldi	r24, 0x90	; 144
    18d4:	91 e0       	ldi	r25, 0x01	; 1
    18d6:	9c af       	std	Y+60, r25	; 0x3c
    18d8:	8b af       	std	Y+59, r24	; 0x3b
    18da:	8b ad       	ldd	r24, Y+59	; 0x3b
    18dc:	9c ad       	ldd	r25, Y+60	; 0x3c
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <LCD_sendCommand+0x466>
    18e2:	9c af       	std	Y+60, r25	; 0x3c
    18e4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    18e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	9e af       	std	Y+62, r25	; 0x3e
    18ee:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    18f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	69 f7       	brne	.-38     	; 0x18d2 <LCD_sendCommand+0x45a>
    18f8:	16 c0       	rjmp	.+44     	; 0x1926 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fa:	fe 01       	movw	r30, r28
    18fc:	ff 96       	adiw	r30, 0x3f	; 63
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	9e af       	std	Y+62, r25	; 0x3e
    1910:	8d af       	std	Y+61, r24	; 0x3d
    1912:	8d ad       	ldd	r24, Y+61	; 0x3d
    1914:	9e ad       	ldd	r25, Y+62	; 0x3e
    1916:	9a af       	std	Y+58, r25	; 0x3a
    1918:	89 af       	std	Y+57, r24	; 0x39
    191a:	89 ad       	ldd	r24, Y+57	; 0x39
    191c:	9a ad       	ldd	r25, Y+58	; 0x3a
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <LCD_sendCommand+0x4a6>
    1922:	9a af       	std	Y+58, r25	; 0x3a
    1924:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	62 e0       	ldi	r22, 0x02	; 2
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	a0 e8       	ldi	r26, 0x80	; 128
    1936:	bf e3       	ldi	r27, 0x3F	; 63
    1938:	8d ab       	std	Y+53, r24	; 0x35
    193a:	9e ab       	std	Y+54, r25	; 0x36
    193c:	af ab       	std	Y+55, r26	; 0x37
    193e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1940:	6d a9       	ldd	r22, Y+53	; 0x35
    1942:	7e a9       	ldd	r23, Y+54	; 0x36
    1944:	8f a9       	ldd	r24, Y+55	; 0x37
    1946:	98 ad       	ldd	r25, Y+56	; 0x38
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	4a e7       	ldi	r20, 0x7A	; 122
    194e:	55 e4       	ldi	r21, 0x45	; 69
    1950:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	89 ab       	std	Y+49, r24	; 0x31
    195a:	9a ab       	std	Y+50, r25	; 0x32
    195c:	ab ab       	std	Y+51, r26	; 0x33
    195e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1960:	69 a9       	ldd	r22, Y+49	; 0x31
    1962:	7a a9       	ldd	r23, Y+50	; 0x32
    1964:	8b a9       	ldd	r24, Y+51	; 0x33
    1966:	9c a9       	ldd	r25, Y+52	; 0x34
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e8       	ldi	r20, 0x80	; 128
    196e:	5f e3       	ldi	r21, 0x3F	; 63
    1970:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    1974:	88 23       	and	r24, r24
    1976:	2c f4       	brge	.+10     	; 0x1982 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	98 ab       	std	Y+48, r25	; 0x30
    197e:	8f a7       	std	Y+47, r24	; 0x2f
    1980:	3f c0       	rjmp	.+126    	; 0x1a00 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1982:	69 a9       	ldd	r22, Y+49	; 0x31
    1984:	7a a9       	ldd	r23, Y+50	; 0x32
    1986:	8b a9       	ldd	r24, Y+51	; 0x33
    1988:	9c a9       	ldd	r25, Y+52	; 0x34
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	3f ef       	ldi	r19, 0xFF	; 255
    198e:	4f e7       	ldi	r20, 0x7F	; 127
    1990:	57 e4       	ldi	r21, 0x47	; 71
    1992:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    1996:	18 16       	cp	r1, r24
    1998:	4c f5       	brge	.+82     	; 0x19ec <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199a:	6d a9       	ldd	r22, Y+53	; 0x35
    199c:	7e a9       	ldd	r23, Y+54	; 0x36
    199e:	8f a9       	ldd	r24, Y+55	; 0x37
    19a0:	98 ad       	ldd	r25, Y+56	; 0x38
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e2       	ldi	r20, 0x20	; 32
    19a8:	51 e4       	ldi	r21, 0x41	; 65
    19aa:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	bc 01       	movw	r22, r24
    19b4:	cd 01       	movw	r24, r26
    19b6:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	98 ab       	std	Y+48, r25	; 0x30
    19c0:	8f a7       	std	Y+47, r24	; 0x2f
    19c2:	0f c0       	rjmp	.+30     	; 0x19e2 <LCD_sendCommand+0x56a>
    19c4:	80 e9       	ldi	r24, 0x90	; 144
    19c6:	91 e0       	ldi	r25, 0x01	; 1
    19c8:	9e a7       	std	Y+46, r25	; 0x2e
    19ca:	8d a7       	std	Y+45, r24	; 0x2d
    19cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    19ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <LCD_sendCommand+0x558>
    19d4:	9e a7       	std	Y+46, r25	; 0x2e
    19d6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    19da:	98 a9       	ldd	r25, Y+48	; 0x30
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	98 ab       	std	Y+48, r25	; 0x30
    19e0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    19e4:	98 a9       	ldd	r25, Y+48	; 0x30
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	69 f7       	brne	.-38     	; 0x19c4 <LCD_sendCommand+0x54c>
    19ea:	14 c0       	rjmp	.+40     	; 0x1a14 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ec:	69 a9       	ldd	r22, Y+49	; 0x31
    19ee:	7a a9       	ldd	r23, Y+50	; 0x32
    19f0:	8b a9       	ldd	r24, Y+51	; 0x33
    19f2:	9c a9       	ldd	r25, Y+52	; 0x34
    19f4:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	98 ab       	std	Y+48, r25	; 0x30
    19fe:	8f a7       	std	Y+47, r24	; 0x2f
    1a00:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a02:	98 a9       	ldd	r25, Y+48	; 0x30
    1a04:	9c a7       	std	Y+44, r25	; 0x2c
    1a06:	8b a7       	std	Y+43, r24	; 0x2b
    1a08:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a0a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <LCD_sendCommand+0x594>
    1a10:	9c a7       	std	Y+44, r25	; 0x2c
    1a12:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	62 e0       	ldi	r22, 0x02	; 2
    1a18:	41 e0       	ldi	r20, 0x01	; 1
    1a1a:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a0 e8       	ldi	r26, 0x80	; 128
    1a24:	bf e3       	ldi	r27, 0x3F	; 63
    1a26:	8f a3       	std	Y+39, r24	; 0x27
    1a28:	98 a7       	std	Y+40, r25	; 0x28
    1a2a:	a9 a7       	std	Y+41, r26	; 0x29
    1a2c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a30:	78 a5       	ldd	r23, Y+40	; 0x28
    1a32:	89 a5       	ldd	r24, Y+41	; 0x29
    1a34:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	4a e7       	ldi	r20, 0x7A	; 122
    1a3c:	55 e4       	ldi	r21, 0x45	; 69
    1a3e:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	8b a3       	std	Y+35, r24	; 0x23
    1a48:	9c a3       	std	Y+36, r25	; 0x24
    1a4a:	ad a3       	std	Y+37, r26	; 0x25
    1a4c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a50:	7c a1       	ldd	r23, Y+36	; 0x24
    1a52:	8d a1       	ldd	r24, Y+37	; 0x25
    1a54:	9e a1       	ldd	r25, Y+38	; 0x26
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e8       	ldi	r20, 0x80	; 128
    1a5c:	5f e3       	ldi	r21, 0x3F	; 63
    1a5e:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    1a62:	88 23       	and	r24, r24
    1a64:	2c f4       	brge	.+10     	; 0x1a70 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9a a3       	std	Y+34, r25	; 0x22
    1a6c:	89 a3       	std	Y+33, r24	; 0x21
    1a6e:	3f c0       	rjmp	.+126    	; 0x1aee <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1a70:	6b a1       	ldd	r22, Y+35	; 0x23
    1a72:	7c a1       	ldd	r23, Y+36	; 0x24
    1a74:	8d a1       	ldd	r24, Y+37	; 0x25
    1a76:	9e a1       	ldd	r25, Y+38	; 0x26
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	3f ef       	ldi	r19, 0xFF	; 255
    1a7c:	4f e7       	ldi	r20, 0x7F	; 127
    1a7e:	57 e4       	ldi	r21, 0x47	; 71
    1a80:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    1a84:	18 16       	cp	r1, r24
    1a86:	4c f5       	brge	.+82     	; 0x1ada <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a88:	6f a1       	ldd	r22, Y+39	; 0x27
    1a8a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a8c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e2       	ldi	r20, 0x20	; 32
    1a96:	51 e4       	ldi	r21, 0x41	; 65
    1a98:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	cd 01       	movw	r24, r26
    1aa4:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	9a a3       	std	Y+34, r25	; 0x22
    1aae:	89 a3       	std	Y+33, r24	; 0x21
    1ab0:	0f c0       	rjmp	.+30     	; 0x1ad0 <LCD_sendCommand+0x658>
    1ab2:	80 e9       	ldi	r24, 0x90	; 144
    1ab4:	91 e0       	ldi	r25, 0x01	; 1
    1ab6:	98 a3       	std	Y+32, r25	; 0x20
    1ab8:	8f 8f       	std	Y+31, r24	; 0x1f
    1aba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1abc:	98 a1       	ldd	r25, Y+32	; 0x20
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <LCD_sendCommand+0x646>
    1ac2:	98 a3       	std	Y+32, r25	; 0x20
    1ac4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	9a a3       	std	Y+34, r25	; 0x22
    1ace:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	69 f7       	brne	.-38     	; 0x1ab2 <LCD_sendCommand+0x63a>
    1ad8:	14 c0       	rjmp	.+40     	; 0x1b02 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ada:	6b a1       	ldd	r22, Y+35	; 0x23
    1adc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ade:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae2:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9a a3       	std	Y+34, r25	; 0x22
    1aec:	89 a3       	std	Y+33, r24	; 0x21
    1aee:	89 a1       	ldd	r24, Y+33	; 0x21
    1af0:	9a a1       	ldd	r25, Y+34	; 0x22
    1af2:	9e 8f       	std	Y+30, r25	; 0x1e
    1af4:	8d 8f       	std	Y+29, r24	; 0x1d
    1af6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1af8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <LCD_sendCommand+0x682>
    1afe:	9e 8f       	std	Y+30, r25	; 0x1e
    1b00:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1b02:	fe 01       	movw	r30, r28
    1b04:	ed 59       	subi	r30, 0x9D	; 157
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	80 81       	ld	r24, Z
    1b0a:	98 2f       	mov	r25, r24
    1b0c:	91 70       	andi	r25, 0x01	; 1
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	63 e0       	ldi	r22, 0x03	; 3
    1b12:	49 2f       	mov	r20, r25
    1b14:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1b18:	fe 01       	movw	r30, r28
    1b1a:	ed 59       	subi	r30, 0x9D	; 157
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	80 81       	ld	r24, Z
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	82 70       	andi	r24, 0x02	; 2
    1b26:	90 70       	andi	r25, 0x00	; 0
    1b28:	95 95       	asr	r25
    1b2a:	87 95       	ror	r24
    1b2c:	98 2f       	mov	r25, r24
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	64 e0       	ldi	r22, 0x04	; 4
    1b32:	49 2f       	mov	r20, r25
    1b34:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1b38:	fe 01       	movw	r30, r28
    1b3a:	ed 59       	subi	r30, 0x9D	; 157
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	80 81       	ld	r24, Z
    1b40:	88 2f       	mov	r24, r24
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	84 70       	andi	r24, 0x04	; 4
    1b46:	90 70       	andi	r25, 0x00	; 0
    1b48:	95 95       	asr	r25
    1b4a:	87 95       	ror	r24
    1b4c:	95 95       	asr	r25
    1b4e:	87 95       	ror	r24
    1b50:	98 2f       	mov	r25, r24
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	65 e0       	ldi	r22, 0x05	; 5
    1b56:	49 2f       	mov	r20, r25
    1b58:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	ed 59       	subi	r30, 0x9D	; 157
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	80 81       	ld	r24, Z
    1b64:	88 2f       	mov	r24, r24
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	88 70       	andi	r24, 0x08	; 8
    1b6a:	90 70       	andi	r25, 0x00	; 0
    1b6c:	95 95       	asr	r25
    1b6e:	87 95       	ror	r24
    1b70:	95 95       	asr	r25
    1b72:	87 95       	ror	r24
    1b74:	95 95       	asr	r25
    1b76:	87 95       	ror	r24
    1b78:	98 2f       	mov	r25, r24
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	66 e0       	ldi	r22, 0x06	; 6
    1b7e:	49 2f       	mov	r20, r25
    1b80:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a0 e8       	ldi	r26, 0x80	; 128
    1b8a:	bf e3       	ldi	r27, 0x3F	; 63
    1b8c:	89 8f       	std	Y+25, r24	; 0x19
    1b8e:	9a 8f       	std	Y+26, r25	; 0x1a
    1b90:	ab 8f       	std	Y+27, r26	; 0x1b
    1b92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b94:	69 8d       	ldd	r22, Y+25	; 0x19
    1b96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	4a e7       	ldi	r20, 0x7A	; 122
    1ba2:	55 e4       	ldi	r21, 0x45	; 69
    1ba4:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	8d 8b       	std	Y+21, r24	; 0x15
    1bae:	9e 8b       	std	Y+22, r25	; 0x16
    1bb0:	af 8b       	std	Y+23, r26	; 0x17
    1bb2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bba:	98 8d       	ldd	r25, Y+24	; 0x18
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e8       	ldi	r20, 0x80	; 128
    1bc2:	5f e3       	ldi	r21, 0x3F	; 63
    1bc4:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    1bc8:	88 23       	and	r24, r24
    1bca:	2c f4       	brge	.+10     	; 0x1bd6 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	9c 8b       	std	Y+20, r25	; 0x14
    1bd2:	8b 8b       	std	Y+19, r24	; 0x13
    1bd4:	3f c0       	rjmp	.+126    	; 0x1c54 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1bd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bda:	8f 89       	ldd	r24, Y+23	; 0x17
    1bdc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	3f ef       	ldi	r19, 0xFF	; 255
    1be2:	4f e7       	ldi	r20, 0x7F	; 127
    1be4:	57 e4       	ldi	r21, 0x47	; 71
    1be6:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    1bea:	18 16       	cp	r1, r24
    1bec:	4c f5       	brge	.+82     	; 0x1c40 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bee:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e2       	ldi	r20, 0x20	; 32
    1bfc:	51 e4       	ldi	r21, 0x41	; 65
    1bfe:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	bc 01       	movw	r22, r24
    1c08:	cd 01       	movw	r24, r26
    1c0a:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	9c 8b       	std	Y+20, r25	; 0x14
    1c14:	8b 8b       	std	Y+19, r24	; 0x13
    1c16:	0f c0       	rjmp	.+30     	; 0x1c36 <LCD_sendCommand+0x7be>
    1c18:	80 e9       	ldi	r24, 0x90	; 144
    1c1a:	91 e0       	ldi	r25, 0x01	; 1
    1c1c:	9a 8b       	std	Y+18, r25	; 0x12
    1c1e:	89 8b       	std	Y+17, r24	; 0x11
    1c20:	89 89       	ldd	r24, Y+17	; 0x11
    1c22:	9a 89       	ldd	r25, Y+18	; 0x12
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <LCD_sendCommand+0x7ac>
    1c28:	9a 8b       	std	Y+18, r25	; 0x12
    1c2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	9c 8b       	std	Y+20, r25	; 0x14
    1c34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c36:	8b 89       	ldd	r24, Y+19	; 0x13
    1c38:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	69 f7       	brne	.-38     	; 0x1c18 <LCD_sendCommand+0x7a0>
    1c3e:	14 c0       	rjmp	.+40     	; 0x1c68 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c40:	6d 89       	ldd	r22, Y+21	; 0x15
    1c42:	7e 89       	ldd	r23, Y+22	; 0x16
    1c44:	8f 89       	ldd	r24, Y+23	; 0x17
    1c46:	98 8d       	ldd	r25, Y+24	; 0x18
    1c48:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	9c 8b       	std	Y+20, r25	; 0x14
    1c52:	8b 8b       	std	Y+19, r24	; 0x13
    1c54:	8b 89       	ldd	r24, Y+19	; 0x13
    1c56:	9c 89       	ldd	r25, Y+20	; 0x14
    1c58:	98 8b       	std	Y+16, r25	; 0x10
    1c5a:	8f 87       	std	Y+15, r24	; 0x0f
    1c5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c5e:	98 89       	ldd	r25, Y+16	; 0x10
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <LCD_sendCommand+0x7e8>
    1c64:	98 8b       	std	Y+16, r25	; 0x10
    1c66:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	62 e0       	ldi	r22, 0x02	; 2
    1c6c:	40 e0       	ldi	r20, 0x00	; 0
    1c6e:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	a0 e8       	ldi	r26, 0x80	; 128
    1c78:	bf e3       	ldi	r27, 0x3F	; 63
    1c7a:	8b 87       	std	Y+11, r24	; 0x0b
    1c7c:	9c 87       	std	Y+12, r25	; 0x0c
    1c7e:	ad 87       	std	Y+13, r26	; 0x0d
    1c80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	4a e7       	ldi	r20, 0x7A	; 122
    1c90:	55 e4       	ldi	r21, 0x45	; 69
    1c92:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	8f 83       	std	Y+7, r24	; 0x07
    1c9c:	98 87       	std	Y+8, r25	; 0x08
    1c9e:	a9 87       	std	Y+9, r26	; 0x09
    1ca0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ca2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca4:	78 85       	ldd	r23, Y+8	; 0x08
    1ca6:	89 85       	ldd	r24, Y+9	; 0x09
    1ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e8       	ldi	r20, 0x80	; 128
    1cb0:	5f e3       	ldi	r21, 0x3F	; 63
    1cb2:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    1cb6:	88 23       	and	r24, r24
    1cb8:	2c f4       	brge	.+10     	; 0x1cc4 <LCD_sendCommand+0x84c>
		__ticks = 1;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	9e 83       	std	Y+6, r25	; 0x06
    1cc0:	8d 83       	std	Y+5, r24	; 0x05
    1cc2:	3f c0       	rjmp	.+126    	; 0x1d42 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc6:	78 85       	ldd	r23, Y+8	; 0x08
    1cc8:	89 85       	ldd	r24, Y+9	; 0x09
    1cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	3f ef       	ldi	r19, 0xFF	; 255
    1cd0:	4f e7       	ldi	r20, 0x7F	; 127
    1cd2:	57 e4       	ldi	r21, 0x47	; 71
    1cd4:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    1cd8:	18 16       	cp	r1, r24
    1cda:	4c f5       	brge	.+82     	; 0x1d2e <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e2       	ldi	r20, 0x20	; 32
    1cea:	51 e4       	ldi	r21, 0x41	; 65
    1cec:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	bc 01       	movw	r22, r24
    1cf6:	cd 01       	movw	r24, r26
    1cf8:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	9e 83       	std	Y+6, r25	; 0x06
    1d02:	8d 83       	std	Y+5, r24	; 0x05
    1d04:	0f c0       	rjmp	.+30     	; 0x1d24 <LCD_sendCommand+0x8ac>
    1d06:	80 e9       	ldi	r24, 0x90	; 144
    1d08:	91 e0       	ldi	r25, 0x01	; 1
    1d0a:	9c 83       	std	Y+4, r25	; 0x04
    1d0c:	8b 83       	std	Y+3, r24	; 0x03
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	f1 f7       	brne	.-4      	; 0x1d12 <LCD_sendCommand+0x89a>
    1d16:	9c 83       	std	Y+4, r25	; 0x04
    1d18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	9e 83       	std	Y+6, r25	; 0x06
    1d22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d24:	8d 81       	ldd	r24, Y+5	; 0x05
    1d26:	9e 81       	ldd	r25, Y+6	; 0x06
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	69 f7       	brne	.-38     	; 0x1d06 <LCD_sendCommand+0x88e>
    1d2c:	14 c0       	rjmp	.+40     	; 0x1d56 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d30:	78 85       	ldd	r23, Y+8	; 0x08
    1d32:	89 85       	ldd	r24, Y+9	; 0x09
    1d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d36:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	9e 83       	std	Y+6, r25	; 0x06
    1d40:	8d 83       	std	Y+5, r24	; 0x05
    1d42:	8d 81       	ldd	r24, Y+5	; 0x05
    1d44:	9e 81       	ldd	r25, Y+6	; 0x06
    1d46:	9a 83       	std	Y+2, r25	; 0x02
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <LCD_sendCommand+0x8d6>
    1d52:	9a 83       	std	Y+2, r25	; 0x02
    1d54:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1d56:	cd 59       	subi	r28, 0x9D	; 157
    1d58:	df 4f       	sbci	r29, 0xFF	; 255
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	de bf       	out	0x3e, r29	; 62
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	cd bf       	out	0x3d, r28	; 61
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	1f 91       	pop	r17
    1d6a:	0f 91       	pop	r16
    1d6c:	08 95       	ret

00001d6e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	c3 56       	subi	r28, 0x63	; 99
    1d7c:	d0 40       	sbci	r29, 0x00	; 0
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	fe 01       	movw	r30, r28
    1d8a:	ed 59       	subi	r30, 0x9D	; 157
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	41 e0       	ldi	r20, 0x01	; 1
    1d96:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	e1 5a       	subi	r30, 0xA1	; 161
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 e8       	ldi	r26, 0x80	; 128
    1da6:	bf e3       	ldi	r27, 0x3F	; 63
    1da8:	80 83       	st	Z, r24
    1daa:	91 83       	std	Z+1, r25	; 0x01
    1dac:	a2 83       	std	Z+2, r26	; 0x02
    1dae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db0:	8e 01       	movw	r16, r28
    1db2:	05 5a       	subi	r16, 0xA5	; 165
    1db4:	1f 4f       	sbci	r17, 0xFF	; 255
    1db6:	fe 01       	movw	r30, r28
    1db8:	e1 5a       	subi	r30, 0xA1	; 161
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	60 81       	ld	r22, Z
    1dbe:	71 81       	ldd	r23, Z+1	; 0x01
    1dc0:	82 81       	ldd	r24, Z+2	; 0x02
    1dc2:	93 81       	ldd	r25, Z+3	; 0x03
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	4a e7       	ldi	r20, 0x7A	; 122
    1dca:	55 e4       	ldi	r21, 0x45	; 69
    1dcc:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	80 83       	st	Z, r24
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	a2 83       	std	Z+2, r26	; 0x02
    1ddc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dde:	fe 01       	movw	r30, r28
    1de0:	e5 5a       	subi	r30, 0xA5	; 165
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	60 81       	ld	r22, Z
    1de6:	71 81       	ldd	r23, Z+1	; 0x01
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e8       	ldi	r20, 0x80	; 128
    1df2:	5f e3       	ldi	r21, 0x3F	; 63
    1df4:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    1df8:	88 23       	and	r24, r24
    1dfa:	44 f4       	brge	.+16     	; 0x1e0c <LCD_displayCharacter+0x9e>
		__ticks = 1;
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	e7 5a       	subi	r30, 0xA7	; 167
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	91 83       	std	Z+1, r25	; 0x01
    1e08:	80 83       	st	Z, r24
    1e0a:	64 c0       	rjmp	.+200    	; 0x1ed4 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e5 5a       	subi	r30, 0xA5	; 165
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	60 81       	ld	r22, Z
    1e14:	71 81       	ldd	r23, Z+1	; 0x01
    1e16:	82 81       	ldd	r24, Z+2	; 0x02
    1e18:	93 81       	ldd	r25, Z+3	; 0x03
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	3f ef       	ldi	r19, 0xFF	; 255
    1e1e:	4f e7       	ldi	r20, 0x7F	; 127
    1e20:	57 e4       	ldi	r21, 0x47	; 71
    1e22:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    1e26:	18 16       	cp	r1, r24
    1e28:	0c f0       	brlt	.+2      	; 0x1e2c <LCD_displayCharacter+0xbe>
    1e2a:	43 c0       	rjmp	.+134    	; 0x1eb2 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	e1 5a       	subi	r30, 0xA1	; 161
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	60 81       	ld	r22, Z
    1e34:	71 81       	ldd	r23, Z+1	; 0x01
    1e36:	82 81       	ldd	r24, Z+2	; 0x02
    1e38:	93 81       	ldd	r25, Z+3	; 0x03
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e2       	ldi	r20, 0x20	; 32
    1e40:	51 e4       	ldi	r21, 0x41	; 65
    1e42:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	8e 01       	movw	r16, r28
    1e4c:	07 5a       	subi	r16, 0xA7	; 167
    1e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e50:	bc 01       	movw	r22, r24
    1e52:	cd 01       	movw	r24, r26
    1e54:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	80 83       	st	Z, r24
    1e62:	1f c0       	rjmp	.+62     	; 0x1ea2 <LCD_displayCharacter+0x134>
    1e64:	fe 01       	movw	r30, r28
    1e66:	e9 5a       	subi	r30, 0xA9	; 169
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	80 e9       	ldi	r24, 0x90	; 144
    1e6c:	91 e0       	ldi	r25, 0x01	; 1
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	80 83       	st	Z, r24
    1e72:	fe 01       	movw	r30, r28
    1e74:	e9 5a       	subi	r30, 0xA9	; 169
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	80 81       	ld	r24, Z
    1e7a:	91 81       	ldd	r25, Z+1	; 0x01
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <LCD_displayCharacter+0x10e>
    1e80:	fe 01       	movw	r30, r28
    1e82:	e9 5a       	subi	r30, 0xA9	; 169
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8a:	de 01       	movw	r26, r28
    1e8c:	a7 5a       	subi	r26, 0xA7	; 167
    1e8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e90:	fe 01       	movw	r30, r28
    1e92:	e7 5a       	subi	r30, 0xA7	; 167
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	11 96       	adiw	r26, 0x01	; 1
    1e9e:	9c 93       	st	X, r25
    1ea0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e7 5a       	subi	r30, 0xA7	; 167
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	80 81       	ld	r24, Z
    1eaa:	91 81       	ldd	r25, Z+1	; 0x01
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	d1 f6       	brne	.-76     	; 0x1e64 <LCD_displayCharacter+0xf6>
    1eb0:	27 c0       	rjmp	.+78     	; 0x1f00 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb2:	8e 01       	movw	r16, r28
    1eb4:	07 5a       	subi	r16, 0xA7	; 167
    1eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e5 5a       	subi	r30, 0xA5	; 165
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	60 81       	ld	r22, Z
    1ec0:	71 81       	ldd	r23, Z+1	; 0x01
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	93 81       	ldd	r25, Z+3	; 0x03
    1ec6:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	f8 01       	movw	r30, r16
    1ed0:	91 83       	std	Z+1, r25	; 0x01
    1ed2:	80 83       	st	Z, r24
    1ed4:	de 01       	movw	r26, r28
    1ed6:	ab 5a       	subi	r26, 0xAB	; 171
    1ed8:	bf 4f       	sbci	r27, 0xFF	; 255
    1eda:	fe 01       	movw	r30, r28
    1edc:	e7 5a       	subi	r30, 0xA7	; 167
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	80 81       	ld	r24, Z
    1ee2:	91 81       	ldd	r25, Z+1	; 0x01
    1ee4:	8d 93       	st	X+, r24
    1ee6:	9c 93       	st	X, r25
    1ee8:	fe 01       	movw	r30, r28
    1eea:	eb 5a       	subi	r30, 0xAB	; 171
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	80 81       	ld	r24, Z
    1ef0:	91 81       	ldd	r25, Z+1	; 0x01
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <LCD_displayCharacter+0x184>
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	eb 5a       	subi	r30, 0xAB	; 171
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	91 83       	std	Z+1, r25	; 0x01
    1efe:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	62 e0       	ldi	r22, 0x02	; 2
    1f04:	41 e0       	ldi	r20, 0x01	; 1
    1f06:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	ef 5a       	subi	r30, 0xAF	; 175
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	a0 e8       	ldi	r26, 0x80	; 128
    1f16:	bf e3       	ldi	r27, 0x3F	; 63
    1f18:	80 83       	st	Z, r24
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	a2 83       	std	Z+2, r26	; 0x02
    1f1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f20:	8e 01       	movw	r16, r28
    1f22:	03 5b       	subi	r16, 0xB3	; 179
    1f24:	1f 4f       	sbci	r17, 0xFF	; 255
    1f26:	fe 01       	movw	r30, r28
    1f28:	ef 5a       	subi	r30, 0xAF	; 175
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	60 81       	ld	r22, Z
    1f2e:	71 81       	ldd	r23, Z+1	; 0x01
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	93 81       	ldd	r25, Z+3	; 0x03
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	4a e7       	ldi	r20, 0x7A	; 122
    1f3a:	55 e4       	ldi	r21, 0x45	; 69
    1f3c:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	f8 01       	movw	r30, r16
    1f46:	80 83       	st	Z, r24
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	a2 83       	std	Z+2, r26	; 0x02
    1f4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e3 5b       	subi	r30, 0xB3	; 179
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	60 81       	ld	r22, Z
    1f56:	71 81       	ldd	r23, Z+1	; 0x01
    1f58:	82 81       	ldd	r24, Z+2	; 0x02
    1f5a:	93 81       	ldd	r25, Z+3	; 0x03
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e8       	ldi	r20, 0x80	; 128
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    1f68:	88 23       	and	r24, r24
    1f6a:	44 f4       	brge	.+16     	; 0x1f7c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e5 5b       	subi	r30, 0xB5	; 181
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	91 83       	std	Z+1, r25	; 0x01
    1f78:	80 83       	st	Z, r24
    1f7a:	64 c0       	rjmp	.+200    	; 0x2044 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	e3 5b       	subi	r30, 0xB3	; 179
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	60 81       	ld	r22, Z
    1f84:	71 81       	ldd	r23, Z+1	; 0x01
    1f86:	82 81       	ldd	r24, Z+2	; 0x02
    1f88:	93 81       	ldd	r25, Z+3	; 0x03
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	3f ef       	ldi	r19, 0xFF	; 255
    1f8e:	4f e7       	ldi	r20, 0x7F	; 127
    1f90:	57 e4       	ldi	r21, 0x47	; 71
    1f92:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    1f96:	18 16       	cp	r1, r24
    1f98:	0c f0       	brlt	.+2      	; 0x1f9c <LCD_displayCharacter+0x22e>
    1f9a:	43 c0       	rjmp	.+134    	; 0x2022 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	ef 5a       	subi	r30, 0xAF	; 175
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	60 81       	ld	r22, Z
    1fa4:	71 81       	ldd	r23, Z+1	; 0x01
    1fa6:	82 81       	ldd	r24, Z+2	; 0x02
    1fa8:	93 81       	ldd	r25, Z+3	; 0x03
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e2       	ldi	r20, 0x20	; 32
    1fb0:	51 e4       	ldi	r21, 0x41	; 65
    1fb2:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	8e 01       	movw	r16, r28
    1fbc:	05 5b       	subi	r16, 0xB5	; 181
    1fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	f8 01       	movw	r30, r16
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
    1fd2:	1f c0       	rjmp	.+62     	; 0x2012 <LCD_displayCharacter+0x2a4>
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e7 5b       	subi	r30, 0xB7	; 183
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	80 e9       	ldi	r24, 0x90	; 144
    1fdc:	91 e0       	ldi	r25, 0x01	; 1
    1fde:	91 83       	std	Z+1, r25	; 0x01
    1fe0:	80 83       	st	Z, r24
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e7 5b       	subi	r30, 0xB7	; 183
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	80 81       	ld	r24, Z
    1fea:	91 81       	ldd	r25, Z+1	; 0x01
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_displayCharacter+0x27e>
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e7 5b       	subi	r30, 0xB7	; 183
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	91 83       	std	Z+1, r25	; 0x01
    1ff8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffa:	de 01       	movw	r26, r28
    1ffc:	a5 5b       	subi	r26, 0xB5	; 181
    1ffe:	bf 4f       	sbci	r27, 0xFF	; 255
    2000:	fe 01       	movw	r30, r28
    2002:	e5 5b       	subi	r30, 0xB5	; 181
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 81       	ld	r24, Z
    2008:	91 81       	ldd	r25, Z+1	; 0x01
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	11 96       	adiw	r26, 0x01	; 1
    200e:	9c 93       	st	X, r25
    2010:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2012:	fe 01       	movw	r30, r28
    2014:	e5 5b       	subi	r30, 0xB5	; 181
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	80 81       	ld	r24, Z
    201a:	91 81       	ldd	r25, Z+1	; 0x01
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	d1 f6       	brne	.-76     	; 0x1fd4 <LCD_displayCharacter+0x266>
    2020:	27 c0       	rjmp	.+78     	; 0x2070 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2022:	8e 01       	movw	r16, r28
    2024:	05 5b       	subi	r16, 0xB5	; 181
    2026:	1f 4f       	sbci	r17, 0xFF	; 255
    2028:	fe 01       	movw	r30, r28
    202a:	e3 5b       	subi	r30, 0xB3	; 179
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	60 81       	ld	r22, Z
    2030:	71 81       	ldd	r23, Z+1	; 0x01
    2032:	82 81       	ldd	r24, Z+2	; 0x02
    2034:	93 81       	ldd	r25, Z+3	; 0x03
    2036:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	f8 01       	movw	r30, r16
    2040:	91 83       	std	Z+1, r25	; 0x01
    2042:	80 83       	st	Z, r24
    2044:	de 01       	movw	r26, r28
    2046:	a9 5b       	subi	r26, 0xB9	; 185
    2048:	bf 4f       	sbci	r27, 0xFF	; 255
    204a:	fe 01       	movw	r30, r28
    204c:	e5 5b       	subi	r30, 0xB5	; 181
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	80 81       	ld	r24, Z
    2052:	91 81       	ldd	r25, Z+1	; 0x01
    2054:	8d 93       	st	X+, r24
    2056:	9c 93       	st	X, r25
    2058:	fe 01       	movw	r30, r28
    205a:	e9 5b       	subi	r30, 0xB9	; 185
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	80 81       	ld	r24, Z
    2060:	91 81       	ldd	r25, Z+1	; 0x01
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_displayCharacter+0x2f4>
    2066:	fe 01       	movw	r30, r28
    2068:	e9 5b       	subi	r30, 0xB9	; 185
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2070:	fe 01       	movw	r30, r28
    2072:	ed 59       	subi	r30, 0x9D	; 157
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	80 81       	ld	r24, Z
    2078:	88 2f       	mov	r24, r24
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	80 71       	andi	r24, 0x10	; 16
    207e:	90 70       	andi	r25, 0x00	; 0
    2080:	95 95       	asr	r25
    2082:	87 95       	ror	r24
    2084:	95 95       	asr	r25
    2086:	87 95       	ror	r24
    2088:	95 95       	asr	r25
    208a:	87 95       	ror	r24
    208c:	95 95       	asr	r25
    208e:	87 95       	ror	r24
    2090:	98 2f       	mov	r25, r24
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	63 e0       	ldi	r22, 0x03	; 3
    2096:	49 2f       	mov	r20, r25
    2098:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    209c:	fe 01       	movw	r30, r28
    209e:	ed 59       	subi	r30, 0x9D	; 157
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	80 81       	ld	r24, Z
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	80 72       	andi	r24, 0x20	; 32
    20aa:	90 70       	andi	r25, 0x00	; 0
    20ac:	95 95       	asr	r25
    20ae:	87 95       	ror	r24
    20b0:	95 95       	asr	r25
    20b2:	87 95       	ror	r24
    20b4:	95 95       	asr	r25
    20b6:	87 95       	ror	r24
    20b8:	95 95       	asr	r25
    20ba:	87 95       	ror	r24
    20bc:	95 95       	asr	r25
    20be:	87 95       	ror	r24
    20c0:	98 2f       	mov	r25, r24
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	64 e0       	ldi	r22, 0x04	; 4
    20c6:	49 2f       	mov	r20, r25
    20c8:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    20cc:	fe 01       	movw	r30, r28
    20ce:	ed 59       	subi	r30, 0x9D	; 157
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	80 81       	ld	r24, Z
    20d4:	88 2f       	mov	r24, r24
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	80 74       	andi	r24, 0x40	; 64
    20da:	90 70       	andi	r25, 0x00	; 0
    20dc:	08 2e       	mov	r0, r24
    20de:	89 2f       	mov	r24, r25
    20e0:	00 0c       	add	r0, r0
    20e2:	88 1f       	adc	r24, r24
    20e4:	99 0b       	sbc	r25, r25
    20e6:	00 0c       	add	r0, r0
    20e8:	88 1f       	adc	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	98 2f       	mov	r25, r24
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	65 e0       	ldi	r22, 0x05	; 5
    20f2:	49 2f       	mov	r20, r25
    20f4:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    20f8:	fe 01       	movw	r30, r28
    20fa:	ed 59       	subi	r30, 0x9D	; 157
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	80 81       	ld	r24, Z
    2100:	98 2f       	mov	r25, r24
    2102:	99 1f       	adc	r25, r25
    2104:	99 27       	eor	r25, r25
    2106:	99 1f       	adc	r25, r25
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	66 e0       	ldi	r22, 0x06	; 6
    210c:	49 2f       	mov	r20, r25
    210e:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
    2112:	fe 01       	movw	r30, r28
    2114:	ed 5b       	subi	r30, 0xBD	; 189
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a0 e8       	ldi	r26, 0x80	; 128
    211e:	bf e3       	ldi	r27, 0x3F	; 63
    2120:	80 83       	st	Z, r24
    2122:	91 83       	std	Z+1, r25	; 0x01
    2124:	a2 83       	std	Z+2, r26	; 0x02
    2126:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2128:	8e 01       	movw	r16, r28
    212a:	01 5c       	subi	r16, 0xC1	; 193
    212c:	1f 4f       	sbci	r17, 0xFF	; 255
    212e:	fe 01       	movw	r30, r28
    2130:	ed 5b       	subi	r30, 0xBD	; 189
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	60 81       	ld	r22, Z
    2136:	71 81       	ldd	r23, Z+1	; 0x01
    2138:	82 81       	ldd	r24, Z+2	; 0x02
    213a:	93 81       	ldd	r25, Z+3	; 0x03
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	4a e7       	ldi	r20, 0x7A	; 122
    2142:	55 e4       	ldi	r21, 0x45	; 69
    2144:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	f8 01       	movw	r30, r16
    214e:	80 83       	st	Z, r24
    2150:	91 83       	std	Z+1, r25	; 0x01
    2152:	a2 83       	std	Z+2, r26	; 0x02
    2154:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2156:	fe 01       	movw	r30, r28
    2158:	ff 96       	adiw	r30, 0x3f	; 63
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	2c f4       	brge	.+10     	; 0x217c <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9e af       	std	Y+62, r25	; 0x3e
    2178:	8d af       	std	Y+61, r24	; 0x3d
    217a:	46 c0       	rjmp	.+140    	; 0x2208 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    217c:	fe 01       	movw	r30, r28
    217e:	ff 96       	adiw	r30, 0x3f	; 63
    2180:	60 81       	ld	r22, Z
    2182:	71 81       	ldd	r23, Z+1	; 0x01
    2184:	82 81       	ldd	r24, Z+2	; 0x02
    2186:	93 81       	ldd	r25, Z+3	; 0x03
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	57 e4       	ldi	r21, 0x47	; 71
    2190:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	64 f5       	brge	.+88     	; 0x21f0 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	fe 01       	movw	r30, r28
    219a:	ed 5b       	subi	r30, 0xBD	; 189
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	60 81       	ld	r22, Z
    21a0:	71 81       	ldd	r23, Z+1	; 0x01
    21a2:	82 81       	ldd	r24, Z+2	; 0x02
    21a4:	93 81       	ldd	r25, Z+3	; 0x03
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e2       	ldi	r20, 0x20	; 32
    21ac:	51 e4       	ldi	r21, 0x41	; 65
    21ae:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	9e af       	std	Y+62, r25	; 0x3e
    21c4:	8d af       	std	Y+61, r24	; 0x3d
    21c6:	0f c0       	rjmp	.+30     	; 0x21e6 <LCD_displayCharacter+0x478>
    21c8:	80 e9       	ldi	r24, 0x90	; 144
    21ca:	91 e0       	ldi	r25, 0x01	; 1
    21cc:	9c af       	std	Y+60, r25	; 0x3c
    21ce:	8b af       	std	Y+59, r24	; 0x3b
    21d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    21d2:	9c ad       	ldd	r25, Y+60	; 0x3c
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_displayCharacter+0x466>
    21d8:	9c af       	std	Y+60, r25	; 0x3c
    21da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    21de:	9e ad       	ldd	r25, Y+62	; 0x3e
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	9e af       	std	Y+62, r25	; 0x3e
    21e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    21e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	69 f7       	brne	.-38     	; 0x21c8 <LCD_displayCharacter+0x45a>
    21ee:	16 c0       	rjmp	.+44     	; 0x221c <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f0:	fe 01       	movw	r30, r28
    21f2:	ff 96       	adiw	r30, 0x3f	; 63
    21f4:	60 81       	ld	r22, Z
    21f6:	71 81       	ldd	r23, Z+1	; 0x01
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	9e af       	std	Y+62, r25	; 0x3e
    2206:	8d af       	std	Y+61, r24	; 0x3d
    2208:	8d ad       	ldd	r24, Y+61	; 0x3d
    220a:	9e ad       	ldd	r25, Y+62	; 0x3e
    220c:	9a af       	std	Y+58, r25	; 0x3a
    220e:	89 af       	std	Y+57, r24	; 0x39
    2210:	89 ad       	ldd	r24, Y+57	; 0x39
    2212:	9a ad       	ldd	r25, Y+58	; 0x3a
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <LCD_displayCharacter+0x4a6>
    2218:	9a af       	std	Y+58, r25	; 0x3a
    221a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	62 e0       	ldi	r22, 0x02	; 2
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	a0 e8       	ldi	r26, 0x80	; 128
    222c:	bf e3       	ldi	r27, 0x3F	; 63
    222e:	8d ab       	std	Y+53, r24	; 0x35
    2230:	9e ab       	std	Y+54, r25	; 0x36
    2232:	af ab       	std	Y+55, r26	; 0x37
    2234:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2236:	6d a9       	ldd	r22, Y+53	; 0x35
    2238:	7e a9       	ldd	r23, Y+54	; 0x36
    223a:	8f a9       	ldd	r24, Y+55	; 0x37
    223c:	98 ad       	ldd	r25, Y+56	; 0x38
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	4a e7       	ldi	r20, 0x7A	; 122
    2244:	55 e4       	ldi	r21, 0x45	; 69
    2246:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	89 ab       	std	Y+49, r24	; 0x31
    2250:	9a ab       	std	Y+50, r25	; 0x32
    2252:	ab ab       	std	Y+51, r26	; 0x33
    2254:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2256:	69 a9       	ldd	r22, Y+49	; 0x31
    2258:	7a a9       	ldd	r23, Y+50	; 0x32
    225a:	8b a9       	ldd	r24, Y+51	; 0x33
    225c:	9c a9       	ldd	r25, Y+52	; 0x34
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e8       	ldi	r20, 0x80	; 128
    2264:	5f e3       	ldi	r21, 0x3F	; 63
    2266:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    226a:	88 23       	and	r24, r24
    226c:	2c f4       	brge	.+10     	; 0x2278 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	98 ab       	std	Y+48, r25	; 0x30
    2274:	8f a7       	std	Y+47, r24	; 0x2f
    2276:	3f c0       	rjmp	.+126    	; 0x22f6 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2278:	69 a9       	ldd	r22, Y+49	; 0x31
    227a:	7a a9       	ldd	r23, Y+50	; 0x32
    227c:	8b a9       	ldd	r24, Y+51	; 0x33
    227e:	9c a9       	ldd	r25, Y+52	; 0x34
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	3f ef       	ldi	r19, 0xFF	; 255
    2284:	4f e7       	ldi	r20, 0x7F	; 127
    2286:	57 e4       	ldi	r21, 0x47	; 71
    2288:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    228c:	18 16       	cp	r1, r24
    228e:	4c f5       	brge	.+82     	; 0x22e2 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2290:	6d a9       	ldd	r22, Y+53	; 0x35
    2292:	7e a9       	ldd	r23, Y+54	; 0x36
    2294:	8f a9       	ldd	r24, Y+55	; 0x37
    2296:	98 ad       	ldd	r25, Y+56	; 0x38
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e2       	ldi	r20, 0x20	; 32
    229e:	51 e4       	ldi	r21, 0x41	; 65
    22a0:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	bc 01       	movw	r22, r24
    22aa:	cd 01       	movw	r24, r26
    22ac:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	98 ab       	std	Y+48, r25	; 0x30
    22b6:	8f a7       	std	Y+47, r24	; 0x2f
    22b8:	0f c0       	rjmp	.+30     	; 0x22d8 <LCD_displayCharacter+0x56a>
    22ba:	80 e9       	ldi	r24, 0x90	; 144
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	9e a7       	std	Y+46, r25	; 0x2e
    22c0:	8d a7       	std	Y+45, r24	; 0x2d
    22c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    22c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <LCD_displayCharacter+0x558>
    22ca:	9e a7       	std	Y+46, r25	; 0x2e
    22cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    22d0:	98 a9       	ldd	r25, Y+48	; 0x30
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	98 ab       	std	Y+48, r25	; 0x30
    22d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22da:	98 a9       	ldd	r25, Y+48	; 0x30
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	69 f7       	brne	.-38     	; 0x22ba <LCD_displayCharacter+0x54c>
    22e0:	14 c0       	rjmp	.+40     	; 0x230a <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e2:	69 a9       	ldd	r22, Y+49	; 0x31
    22e4:	7a a9       	ldd	r23, Y+50	; 0x32
    22e6:	8b a9       	ldd	r24, Y+51	; 0x33
    22e8:	9c a9       	ldd	r25, Y+52	; 0x34
    22ea:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	98 ab       	std	Y+48, r25	; 0x30
    22f4:	8f a7       	std	Y+47, r24	; 0x2f
    22f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22f8:	98 a9       	ldd	r25, Y+48	; 0x30
    22fa:	9c a7       	std	Y+44, r25	; 0x2c
    22fc:	8b a7       	std	Y+43, r24	; 0x2b
    22fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2300:	9c a5       	ldd	r25, Y+44	; 0x2c
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <LCD_displayCharacter+0x594>
    2306:	9c a7       	std	Y+44, r25	; 0x2c
    2308:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	62 e0       	ldi	r22, 0x02	; 2
    230e:	41 e0       	ldi	r20, 0x01	; 1
    2310:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	a0 e8       	ldi	r26, 0x80	; 128
    231a:	bf e3       	ldi	r27, 0x3F	; 63
    231c:	8f a3       	std	Y+39, r24	; 0x27
    231e:	98 a7       	std	Y+40, r25	; 0x28
    2320:	a9 a7       	std	Y+41, r26	; 0x29
    2322:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2324:	6f a1       	ldd	r22, Y+39	; 0x27
    2326:	78 a5       	ldd	r23, Y+40	; 0x28
    2328:	89 a5       	ldd	r24, Y+41	; 0x29
    232a:	9a a5       	ldd	r25, Y+42	; 0x2a
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	4a e7       	ldi	r20, 0x7A	; 122
    2332:	55 e4       	ldi	r21, 0x45	; 69
    2334:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	8b a3       	std	Y+35, r24	; 0x23
    233e:	9c a3       	std	Y+36, r25	; 0x24
    2340:	ad a3       	std	Y+37, r26	; 0x25
    2342:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2344:	6b a1       	ldd	r22, Y+35	; 0x23
    2346:	7c a1       	ldd	r23, Y+36	; 0x24
    2348:	8d a1       	ldd	r24, Y+37	; 0x25
    234a:	9e a1       	ldd	r25, Y+38	; 0x26
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e8       	ldi	r20, 0x80	; 128
    2352:	5f e3       	ldi	r21, 0x3F	; 63
    2354:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    2358:	88 23       	and	r24, r24
    235a:	2c f4       	brge	.+10     	; 0x2366 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	9a a3       	std	Y+34, r25	; 0x22
    2362:	89 a3       	std	Y+33, r24	; 0x21
    2364:	3f c0       	rjmp	.+126    	; 0x23e4 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2366:	6b a1       	ldd	r22, Y+35	; 0x23
    2368:	7c a1       	ldd	r23, Y+36	; 0x24
    236a:	8d a1       	ldd	r24, Y+37	; 0x25
    236c:	9e a1       	ldd	r25, Y+38	; 0x26
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	3f ef       	ldi	r19, 0xFF	; 255
    2372:	4f e7       	ldi	r20, 0x7F	; 127
    2374:	57 e4       	ldi	r21, 0x47	; 71
    2376:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    237a:	18 16       	cp	r1, r24
    237c:	4c f5       	brge	.+82     	; 0x23d0 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237e:	6f a1       	ldd	r22, Y+39	; 0x27
    2380:	78 a5       	ldd	r23, Y+40	; 0x28
    2382:	89 a5       	ldd	r24, Y+41	; 0x29
    2384:	9a a5       	ldd	r25, Y+42	; 0x2a
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e2       	ldi	r20, 0x20	; 32
    238c:	51 e4       	ldi	r21, 0x41	; 65
    238e:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	bc 01       	movw	r22, r24
    2398:	cd 01       	movw	r24, r26
    239a:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	9a a3       	std	Y+34, r25	; 0x22
    23a4:	89 a3       	std	Y+33, r24	; 0x21
    23a6:	0f c0       	rjmp	.+30     	; 0x23c6 <LCD_displayCharacter+0x658>
    23a8:	80 e9       	ldi	r24, 0x90	; 144
    23aa:	91 e0       	ldi	r25, 0x01	; 1
    23ac:	98 a3       	std	Y+32, r25	; 0x20
    23ae:	8f 8f       	std	Y+31, r24	; 0x1f
    23b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23b2:	98 a1       	ldd	r25, Y+32	; 0x20
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <LCD_displayCharacter+0x646>
    23b8:	98 a3       	std	Y+32, r25	; 0x20
    23ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23bc:	89 a1       	ldd	r24, Y+33	; 0x21
    23be:	9a a1       	ldd	r25, Y+34	; 0x22
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	9a a3       	std	Y+34, r25	; 0x22
    23c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c6:	89 a1       	ldd	r24, Y+33	; 0x21
    23c8:	9a a1       	ldd	r25, Y+34	; 0x22
    23ca:	00 97       	sbiw	r24, 0x00	; 0
    23cc:	69 f7       	brne	.-38     	; 0x23a8 <LCD_displayCharacter+0x63a>
    23ce:	14 c0       	rjmp	.+40     	; 0x23f8 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d0:	6b a1       	ldd	r22, Y+35	; 0x23
    23d2:	7c a1       	ldd	r23, Y+36	; 0x24
    23d4:	8d a1       	ldd	r24, Y+37	; 0x25
    23d6:	9e a1       	ldd	r25, Y+38	; 0x26
    23d8:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	9a a3       	std	Y+34, r25	; 0x22
    23e2:	89 a3       	std	Y+33, r24	; 0x21
    23e4:	89 a1       	ldd	r24, Y+33	; 0x21
    23e6:	9a a1       	ldd	r25, Y+34	; 0x22
    23e8:	9e 8f       	std	Y+30, r25	; 0x1e
    23ea:	8d 8f       	std	Y+29, r24	; 0x1d
    23ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <LCD_displayCharacter+0x682>
    23f4:	9e 8f       	std	Y+30, r25	; 0x1e
    23f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    23f8:	fe 01       	movw	r30, r28
    23fa:	ed 59       	subi	r30, 0x9D	; 157
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	80 81       	ld	r24, Z
    2400:	98 2f       	mov	r25, r24
    2402:	91 70       	andi	r25, 0x01	; 1
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	63 e0       	ldi	r22, 0x03	; 3
    2408:	49 2f       	mov	r20, r25
    240a:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    240e:	fe 01       	movw	r30, r28
    2410:	ed 59       	subi	r30, 0x9D	; 157
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	80 81       	ld	r24, Z
    2416:	88 2f       	mov	r24, r24
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	82 70       	andi	r24, 0x02	; 2
    241c:	90 70       	andi	r25, 0x00	; 0
    241e:	95 95       	asr	r25
    2420:	87 95       	ror	r24
    2422:	98 2f       	mov	r25, r24
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	64 e0       	ldi	r22, 0x04	; 4
    2428:	49 2f       	mov	r20, r25
    242a:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    242e:	fe 01       	movw	r30, r28
    2430:	ed 59       	subi	r30, 0x9D	; 157
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	88 2f       	mov	r24, r24
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	84 70       	andi	r24, 0x04	; 4
    243c:	90 70       	andi	r25, 0x00	; 0
    243e:	95 95       	asr	r25
    2440:	87 95       	ror	r24
    2442:	95 95       	asr	r25
    2444:	87 95       	ror	r24
    2446:	98 2f       	mov	r25, r24
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	65 e0       	ldi	r22, 0x05	; 5
    244c:	49 2f       	mov	r20, r25
    244e:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2452:	fe 01       	movw	r30, r28
    2454:	ed 59       	subi	r30, 0x9D	; 157
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	80 81       	ld	r24, Z
    245a:	88 2f       	mov	r24, r24
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	88 70       	andi	r24, 0x08	; 8
    2460:	90 70       	andi	r25, 0x00	; 0
    2462:	95 95       	asr	r25
    2464:	87 95       	ror	r24
    2466:	95 95       	asr	r25
    2468:	87 95       	ror	r24
    246a:	95 95       	asr	r25
    246c:	87 95       	ror	r24
    246e:	98 2f       	mov	r25, r24
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	66 e0       	ldi	r22, 0x06	; 6
    2474:	49 2f       	mov	r20, r25
    2476:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	a0 e8       	ldi	r26, 0x80	; 128
    2480:	bf e3       	ldi	r27, 0x3F	; 63
    2482:	89 8f       	std	Y+25, r24	; 0x19
    2484:	9a 8f       	std	Y+26, r25	; 0x1a
    2486:	ab 8f       	std	Y+27, r26	; 0x1b
    2488:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248a:	69 8d       	ldd	r22, Y+25	; 0x19
    248c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    248e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2490:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	4a e7       	ldi	r20, 0x7A	; 122
    2498:	55 e4       	ldi	r21, 0x45	; 69
    249a:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	8d 8b       	std	Y+21, r24	; 0x15
    24a4:	9e 8b       	std	Y+22, r25	; 0x16
    24a6:	af 8b       	std	Y+23, r26	; 0x17
    24a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24aa:	6d 89       	ldd	r22, Y+21	; 0x15
    24ac:	7e 89       	ldd	r23, Y+22	; 0x16
    24ae:	8f 89       	ldd	r24, Y+23	; 0x17
    24b0:	98 8d       	ldd	r25, Y+24	; 0x18
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e8       	ldi	r20, 0x80	; 128
    24b8:	5f e3       	ldi	r21, 0x3F	; 63
    24ba:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    24be:	88 23       	and	r24, r24
    24c0:	2c f4       	brge	.+10     	; 0x24cc <LCD_displayCharacter+0x75e>
		__ticks = 1;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	9c 8b       	std	Y+20, r25	; 0x14
    24c8:	8b 8b       	std	Y+19, r24	; 0x13
    24ca:	3f c0       	rjmp	.+126    	; 0x254a <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    24cc:	6d 89       	ldd	r22, Y+21	; 0x15
    24ce:	7e 89       	ldd	r23, Y+22	; 0x16
    24d0:	8f 89       	ldd	r24, Y+23	; 0x17
    24d2:	98 8d       	ldd	r25, Y+24	; 0x18
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	3f ef       	ldi	r19, 0xFF	; 255
    24d8:	4f e7       	ldi	r20, 0x7F	; 127
    24da:	57 e4       	ldi	r21, 0x47	; 71
    24dc:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    24e0:	18 16       	cp	r1, r24
    24e2:	4c f5       	brge	.+82     	; 0x2536 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e4:	69 8d       	ldd	r22, Y+25	; 0x19
    24e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	40 e2       	ldi	r20, 0x20	; 32
    24f2:	51 e4       	ldi	r21, 0x41	; 65
    24f4:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	bc 01       	movw	r22, r24
    24fe:	cd 01       	movw	r24, r26
    2500:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	9c 8b       	std	Y+20, r25	; 0x14
    250a:	8b 8b       	std	Y+19, r24	; 0x13
    250c:	0f c0       	rjmp	.+30     	; 0x252c <LCD_displayCharacter+0x7be>
    250e:	80 e9       	ldi	r24, 0x90	; 144
    2510:	91 e0       	ldi	r25, 0x01	; 1
    2512:	9a 8b       	std	Y+18, r25	; 0x12
    2514:	89 8b       	std	Y+17, r24	; 0x11
    2516:	89 89       	ldd	r24, Y+17	; 0x11
    2518:	9a 89       	ldd	r25, Y+18	; 0x12
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <LCD_displayCharacter+0x7ac>
    251e:	9a 8b       	std	Y+18, r25	; 0x12
    2520:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2522:	8b 89       	ldd	r24, Y+19	; 0x13
    2524:	9c 89       	ldd	r25, Y+20	; 0x14
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	9c 8b       	std	Y+20, r25	; 0x14
    252a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252c:	8b 89       	ldd	r24, Y+19	; 0x13
    252e:	9c 89       	ldd	r25, Y+20	; 0x14
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	69 f7       	brne	.-38     	; 0x250e <LCD_displayCharacter+0x7a0>
    2534:	14 c0       	rjmp	.+40     	; 0x255e <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2536:	6d 89       	ldd	r22, Y+21	; 0x15
    2538:	7e 89       	ldd	r23, Y+22	; 0x16
    253a:	8f 89       	ldd	r24, Y+23	; 0x17
    253c:	98 8d       	ldd	r25, Y+24	; 0x18
    253e:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	9c 8b       	std	Y+20, r25	; 0x14
    2548:	8b 8b       	std	Y+19, r24	; 0x13
    254a:	8b 89       	ldd	r24, Y+19	; 0x13
    254c:	9c 89       	ldd	r25, Y+20	; 0x14
    254e:	98 8b       	std	Y+16, r25	; 0x10
    2550:	8f 87       	std	Y+15, r24	; 0x0f
    2552:	8f 85       	ldd	r24, Y+15	; 0x0f
    2554:	98 89       	ldd	r25, Y+16	; 0x10
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <LCD_displayCharacter+0x7e8>
    255a:	98 8b       	std	Y+16, r25	; 0x10
    255c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	62 e0       	ldi	r22, 0x02	; 2
    2562:	40 e0       	ldi	r20, 0x00	; 0
    2564:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	a0 e8       	ldi	r26, 0x80	; 128
    256e:	bf e3       	ldi	r27, 0x3F	; 63
    2570:	8b 87       	std	Y+11, r24	; 0x0b
    2572:	9c 87       	std	Y+12, r25	; 0x0c
    2574:	ad 87       	std	Y+13, r26	; 0x0d
    2576:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2578:	6b 85       	ldd	r22, Y+11	; 0x0b
    257a:	7c 85       	ldd	r23, Y+12	; 0x0c
    257c:	8d 85       	ldd	r24, Y+13	; 0x0d
    257e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	4a e7       	ldi	r20, 0x7A	; 122
    2586:	55 e4       	ldi	r21, 0x45	; 69
    2588:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	8f 83       	std	Y+7, r24	; 0x07
    2592:	98 87       	std	Y+8, r25	; 0x08
    2594:	a9 87       	std	Y+9, r26	; 0x09
    2596:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2598:	6f 81       	ldd	r22, Y+7	; 0x07
    259a:	78 85       	ldd	r23, Y+8	; 0x08
    259c:	89 85       	ldd	r24, Y+9	; 0x09
    259e:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e8       	ldi	r20, 0x80	; 128
    25a6:	5f e3       	ldi	r21, 0x3F	; 63
    25a8:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    25ac:	88 23       	and	r24, r24
    25ae:	2c f4       	brge	.+10     	; 0x25ba <LCD_displayCharacter+0x84c>
		__ticks = 1;
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	9e 83       	std	Y+6, r25	; 0x06
    25b6:	8d 83       	std	Y+5, r24	; 0x05
    25b8:	3f c0       	rjmp	.+126    	; 0x2638 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    25ba:	6f 81       	ldd	r22, Y+7	; 0x07
    25bc:	78 85       	ldd	r23, Y+8	; 0x08
    25be:	89 85       	ldd	r24, Y+9	; 0x09
    25c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	3f ef       	ldi	r19, 0xFF	; 255
    25c6:	4f e7       	ldi	r20, 0x7F	; 127
    25c8:	57 e4       	ldi	r21, 0x47	; 71
    25ca:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    25ce:	18 16       	cp	r1, r24
    25d0:	4c f5       	brge	.+82     	; 0x2624 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e2       	ldi	r20, 0x20	; 32
    25e0:	51 e4       	ldi	r21, 0x41	; 65
    25e2:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	bc 01       	movw	r22, r24
    25ec:	cd 01       	movw	r24, r26
    25ee:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	9e 83       	std	Y+6, r25	; 0x06
    25f8:	8d 83       	std	Y+5, r24	; 0x05
    25fa:	0f c0       	rjmp	.+30     	; 0x261a <LCD_displayCharacter+0x8ac>
    25fc:	80 e9       	ldi	r24, 0x90	; 144
    25fe:	91 e0       	ldi	r25, 0x01	; 1
    2600:	9c 83       	std	Y+4, r25	; 0x04
    2602:	8b 83       	std	Y+3, r24	; 0x03
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	9c 81       	ldd	r25, Y+4	; 0x04
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <LCD_displayCharacter+0x89a>
    260c:	9c 83       	std	Y+4, r25	; 0x04
    260e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2610:	8d 81       	ldd	r24, Y+5	; 0x05
    2612:	9e 81       	ldd	r25, Y+6	; 0x06
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	9e 83       	std	Y+6, r25	; 0x06
    2618:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261a:	8d 81       	ldd	r24, Y+5	; 0x05
    261c:	9e 81       	ldd	r25, Y+6	; 0x06
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	69 f7       	brne	.-38     	; 0x25fc <LCD_displayCharacter+0x88e>
    2622:	14 c0       	rjmp	.+40     	; 0x264c <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2624:	6f 81       	ldd	r22, Y+7	; 0x07
    2626:	78 85       	ldd	r23, Y+8	; 0x08
    2628:	89 85       	ldd	r24, Y+9	; 0x09
    262a:	9a 85       	ldd	r25, Y+10	; 0x0a
    262c:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	9e 83       	std	Y+6, r25	; 0x06
    2636:	8d 83       	std	Y+5, r24	; 0x05
    2638:	8d 81       	ldd	r24, Y+5	; 0x05
    263a:	9e 81       	ldd	r25, Y+6	; 0x06
    263c:	9a 83       	std	Y+2, r25	; 0x02
    263e:	89 83       	std	Y+1, r24	; 0x01
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	9a 81       	ldd	r25, Y+2	; 0x02
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	f1 f7       	brne	.-4      	; 0x2644 <LCD_displayCharacter+0x8d6>
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    264c:	cd 59       	subi	r28, 0x9D	; 157
    264e:	df 4f       	sbci	r29, 0xFF	; 255
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	1f 91       	pop	r17
    2660:	0f 91       	pop	r16
    2662:	08 95       	ret

00002664 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	00 d0       	rcall	.+0      	; 0x266a <LCD_displayString+0x6>
    266a:	0f 92       	push	r0
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	9b 83       	std	Y+3, r25	; 0x03
    2672:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2674:	19 82       	std	Y+1, r1	; 0x01
    2676:	0e c0       	rjmp	.+28     	; 0x2694 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	28 2f       	mov	r18, r24
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
    2680:	9b 81       	ldd	r25, Y+3	; 0x03
    2682:	fc 01       	movw	r30, r24
    2684:	e2 0f       	add	r30, r18
    2686:	f3 1f       	adc	r31, r19
    2688:	80 81       	ld	r24, Z
    268a:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayCharacter>
		i++;
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	8f 5f       	subi	r24, 0xFF	; 255
    2692:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	28 2f       	mov	r18, r24
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	9b 81       	ldd	r25, Y+3	; 0x03
    269e:	fc 01       	movw	r30, r24
    26a0:	e2 0f       	add	r30, r18
    26a2:	f3 1f       	adc	r31, r19
    26a4:	80 81       	ld	r24, Z
    26a6:	88 23       	and	r24, r24
    26a8:	39 f7       	brne	.-50     	; 0x2678 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	08 95       	ret

000026b6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <LCD_moveCursor+0x6>
    26bc:	00 d0       	rcall	.+0      	; 0x26be <LCD_moveCursor+0x8>
    26be:	0f 92       	push	r0
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	8a 83       	std	Y+2, r24	; 0x02
    26c6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	3d 83       	std	Y+5, r19	; 0x05
    26d0:	2c 83       	std	Y+4, r18	; 0x04
    26d2:	8c 81       	ldd	r24, Y+4	; 0x04
    26d4:	9d 81       	ldd	r25, Y+5	; 0x05
    26d6:	81 30       	cpi	r24, 0x01	; 1
    26d8:	91 05       	cpc	r25, r1
    26da:	c1 f0       	breq	.+48     	; 0x270c <LCD_moveCursor+0x56>
    26dc:	2c 81       	ldd	r18, Y+4	; 0x04
    26de:	3d 81       	ldd	r19, Y+5	; 0x05
    26e0:	22 30       	cpi	r18, 0x02	; 2
    26e2:	31 05       	cpc	r19, r1
    26e4:	2c f4       	brge	.+10     	; 0x26f0 <LCD_moveCursor+0x3a>
    26e6:	8c 81       	ldd	r24, Y+4	; 0x04
    26e8:	9d 81       	ldd	r25, Y+5	; 0x05
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	61 f0       	breq	.+24     	; 0x2706 <LCD_moveCursor+0x50>
    26ee:	19 c0       	rjmp	.+50     	; 0x2722 <LCD_moveCursor+0x6c>
    26f0:	2c 81       	ldd	r18, Y+4	; 0x04
    26f2:	3d 81       	ldd	r19, Y+5	; 0x05
    26f4:	22 30       	cpi	r18, 0x02	; 2
    26f6:	31 05       	cpc	r19, r1
    26f8:	69 f0       	breq	.+26     	; 0x2714 <LCD_moveCursor+0x5e>
    26fa:	8c 81       	ldd	r24, Y+4	; 0x04
    26fc:	9d 81       	ldd	r25, Y+5	; 0x05
    26fe:	83 30       	cpi	r24, 0x03	; 3
    2700:	91 05       	cpc	r25, r1
    2702:	61 f0       	breq	.+24     	; 0x271c <LCD_moveCursor+0x66>
    2704:	0e c0       	rjmp	.+28     	; 0x2722 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	0b c0       	rjmp	.+22     	; 0x2722 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	80 5c       	subi	r24, 0xC0	; 192
    2710:	89 83       	std	Y+1, r24	; 0x01
    2712:	07 c0       	rjmp	.+14     	; 0x2722 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	80 5f       	subi	r24, 0xF0	; 240
    2718:	89 83       	std	Y+1, r24	; 0x01
    271a:	03 c0       	rjmp	.+6      	; 0x2722 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	80 5b       	subi	r24, 0xB0	; 176
    2720:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	80 68       	ori	r24, 0x80	; 128
    2726:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_sendCommand>
}
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	00 d0       	rcall	.+0      	; 0x2740 <LCD_displayStringRowColumn+0x6>
    2740:	00 d0       	rcall	.+0      	; 0x2742 <LCD_displayStringRowColumn+0x8>
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	89 83       	std	Y+1, r24	; 0x01
    2748:	6a 83       	std	Y+2, r22	; 0x02
    274a:	5c 83       	std	Y+4, r21	; 0x04
    274c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	6a 81       	ldd	r22, Y+2	; 0x02
    2752:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2756:	8b 81       	ldd	r24, Y+3	; 0x03
    2758:	9c 81       	ldd	r25, Y+4	; 0x04
    275a:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_displayString>
}
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	08 95       	ret

0000276c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	62 97       	sbiw	r28, 0x12	; 18
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	9a 8b       	std	Y+18, r25	; 0x12
    2782:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2784:	89 89       	ldd	r24, Y+17	; 0x11
    2786:	9a 89       	ldd	r25, Y+18	; 0x12
    2788:	9e 01       	movw	r18, r28
    278a:	2f 5f       	subi	r18, 0xFF	; 255
    278c:	3f 4f       	sbci	r19, 0xFF	; 255
    278e:	b9 01       	movw	r22, r18
    2790:	4a e0       	ldi	r20, 0x0A	; 10
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	0e 94 17 1a 	call	0x342e	; 0x342e <itoa>
   LCD_displayString(buff); /* Display the string */
    2798:	ce 01       	movw	r24, r28
    279a:	01 96       	adiw	r24, 0x01	; 1
    279c:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_displayString>
}
    27a0:	62 96       	adiw	r28, 0x12	; 18
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	de bf       	out	0x3e, r29	; 62
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	cd bf       	out	0x3d, r28	; 61
    27ac:	cf 91       	pop	r28
    27ae:	df 91       	pop	r29
    27b0:	08 95       	ret

000027b2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    27b2:	df 93       	push	r29
    27b4:	cf 93       	push	r28
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_sendCommand>
}
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <KEYPAD_init>:

/*
 * Description :
 * Initializing the Keypad
 */
void KEYPAD_init() {
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	0f 92       	push	r0
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for (i = 0; i < KEYPAD_NUM_ROWS; ++i) {
    27d0:	19 82       	std	Y+1, r1	; 0x01
    27d2:	13 c0       	rjmp	.+38     	; 0x27fa <KEYPAD_init+0x34>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + i,
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	98 2f       	mov	r25, r24
    27d8:	9c 5f       	subi	r25, 0xFC	; 252
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	69 2f       	mov	r22, r25
    27de:	41 e0       	ldi	r20, 0x01	; 1
    27e0:	0e 94 a1 05 	call	0xb42	; 0xb42 <GPIO_setupPinDirection>
				PIN_OUTPUT);
		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + i,
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	98 2f       	mov	r25, r24
    27e8:	9c 5f       	subi	r25, 0xFC	; 252
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	69 2f       	mov	r22, r25
    27ee:	41 e0       	ldi	r20, 0x01	; 1
    27f0:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
 * Description :
 * Initializing the Keypad
 */
void KEYPAD_init() {
	uint8 i;
	for (i = 0; i < KEYPAD_NUM_ROWS; ++i) {
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	8f 5f       	subi	r24, 0xFF	; 255
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	84 30       	cpi	r24, 0x04	; 4
    27fe:	50 f3       	brcs	.-44     	; 0x27d4 <KEYPAD_init+0xe>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + i,
				PIN_OUTPUT);
		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + i,
				LOGIC_HIGH);
	}
	for (i = 0; i < KEYPAD_NUM_COLS; ++i) {
    2800:	19 82       	std	Y+1, r1	; 0x01
    2802:	0b c0       	rjmp	.+22     	; 0x281a <KEYPAD_init+0x54>
		GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+i,
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	98 2f       	mov	r25, r24
    2808:	9e 5f       	subi	r25, 0xFE	; 254
    280a:	83 e0       	ldi	r24, 0x03	; 3
    280c:	69 2f       	mov	r22, r25
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	0e 94 a1 05 	call	0xb42	; 0xb42 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + i,
				PIN_OUTPUT);
		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + i,
				LOGIC_HIGH);
	}
	for (i = 0; i < KEYPAD_NUM_COLS; ++i) {
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	8f 5f       	subi	r24, 0xFF	; 255
    2818:	89 83       	std	Y+1, r24	; 0x01
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	84 30       	cpi	r24, 0x04	; 4
    281e:	90 f3       	brcs	.-28     	; 0x2804 <KEYPAD_init+0x3e>
		GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+i,
				PIN_INPUT);
	}

}
    2820:	0f 90       	pop	r0
    2822:	cf 91       	pop	r28
    2824:	df 91       	pop	r29
    2826:	08 95       	ret

00002828 <KEYPAD_getPressedKey>:
uint8 KEYPAD_getPressedKey(void) {
    2828:	df 93       	push	r29
    282a:	cf 93       	push	r28
    282c:	00 d0       	rcall	.+0      	; 0x282e <KEYPAD_getPressedKey+0x6>
    282e:	0f 92       	push	r0
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
	uint8 i,j;
	for (i = 0; i < KEYPAD_NUM_ROWS; ++i) {
    2834:	1a 82       	std	Y+2, r1	; 0x02
    2836:	3b c0       	rjmp	.+118    	; 0x28ae <KEYPAD_getPressedKey+0x86>

		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + i,
    2838:	8a 81       	ldd	r24, Y+2	; 0x02
    283a:	98 2f       	mov	r25, r24
    283c:	9c 5f       	subi	r25, 0xFC	; 252
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	69 2f       	mov	r22, r25
    2842:	40 e0       	ldi	r20, 0x00	; 0
    2844:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
						LOGIC_LOW);

		for(j=0;j<KEYPAD_NUM_COLS;++j){
    2848:	19 82       	std	Y+1, r1	; 0x01
    284a:	23 c0       	rjmp	.+70     	; 0x2892 <KEYPAD_getPressedKey+0x6a>
			if(!GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+j)){
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	98 2f       	mov	r25, r24
    2850:	9e 5f       	subi	r25, 0xFE	; 254
    2852:	83 e0       	ldi	r24, 0x03	; 3
    2854:	69 2f       	mov	r22, r25
    2856:	0e 94 77 07 	call	0xeee	; 0xeee <GPIO_readPin>
    285a:	88 23       	and	r24, r24
    285c:	b9 f4       	brne	.+46     	; 0x288c <KEYPAD_getPressedKey+0x64>
				GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + i,
    285e:	8a 81       	ldd	r24, Y+2	; 0x02
    2860:	98 2f       	mov	r25, r24
    2862:	9c 5f       	subi	r25, 0xFC	; 252
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	69 2f       	mov	r22, r25
    2868:	41 e0       	ldi	r20, 0x01	; 1
    286a:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
										LOGIC_HIGH);
				return KEYPAD_4x4_adjustKeyNumber((j+KEYPAD_NUM_COLS*i+1));
    286e:	8a 81       	ldd	r24, Y+2	; 0x02
    2870:	88 2f       	mov	r24, r24
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	88 0f       	add	r24, r24
    2876:	99 1f       	adc	r25, r25
    2878:	88 0f       	add	r24, r24
    287a:	99 1f       	adc	r25, r25
    287c:	98 2f       	mov	r25, r24
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	89 0f       	add	r24, r25
    2882:	8f 5f       	subi	r24, 0xFF	; 255
    2884:	0e 94 63 14 	call	0x28c6	; 0x28c6 <KEYPAD_4x4_adjustKeyNumber>
    2888:	8b 83       	std	Y+3, r24	; 0x03
    288a:	16 c0       	rjmp	.+44     	; 0x28b8 <KEYPAD_getPressedKey+0x90>
	for (i = 0; i < KEYPAD_NUM_ROWS; ++i) {

		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + i,
						LOGIC_LOW);

		for(j=0;j<KEYPAD_NUM_COLS;++j){
    288c:	89 81       	ldd	r24, Y+1	; 0x01
    288e:	8f 5f       	subi	r24, 0xFF	; 255
    2890:	89 83       	std	Y+1, r24	; 0x01
    2892:	89 81       	ldd	r24, Y+1	; 0x01
    2894:	84 30       	cpi	r24, 0x04	; 4
    2896:	d0 f2       	brcs	.-76     	; 0x284c <KEYPAD_getPressedKey+0x24>
										LOGIC_HIGH);
				return KEYPAD_4x4_adjustKeyNumber((j+KEYPAD_NUM_COLS*i+1));
			}
		}

		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + i,
    2898:	8a 81       	ldd	r24, Y+2	; 0x02
    289a:	98 2f       	mov	r25, r24
    289c:	9c 5f       	subi	r25, 0xFC	; 252
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	69 2f       	mov	r22, r25
    28a2:	41 e0       	ldi	r20, 0x01	; 1
    28a4:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_writePin>
	}

}
uint8 KEYPAD_getPressedKey(void) {
	uint8 i,j;
	for (i = 0; i < KEYPAD_NUM_ROWS; ++i) {
    28a8:	8a 81       	ldd	r24, Y+2	; 0x02
    28aa:	8f 5f       	subi	r24, 0xFF	; 255
    28ac:	8a 83       	std	Y+2, r24	; 0x02
    28ae:	8a 81       	ldd	r24, Y+2	; 0x02
    28b0:	84 30       	cpi	r24, 0x04	; 4
    28b2:	10 f2       	brcs	.-124    	; 0x2838 <KEYPAD_getPressedKey+0x10>
		}

		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + i,
						LOGIC_HIGH);
	}
	return 255;
    28b4:	8f ef       	ldi	r24, 0xFF	; 255
    28b6:	8b 83       	std	Y+3, r24	; 0x03
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    28ba:	0f 90       	pop	r0
    28bc:	0f 90       	pop	r0
    28be:	0f 90       	pop	r0
    28c0:	cf 91       	pop	r28
    28c2:	df 91       	pop	r29
    28c4:	08 95       	ret

000028c6 <KEYPAD_4x4_adjustKeyNumber>:

/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number) {
    28c6:	df 93       	push	r29
    28c8:	cf 93       	push	r28
    28ca:	00 d0       	rcall	.+0      	; 0x28cc <KEYPAD_4x4_adjustKeyNumber+0x6>
    28cc:	00 d0       	rcall	.+0      	; 0x28ce <KEYPAD_4x4_adjustKeyNumber+0x8>
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
    28d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    28d4:	19 82       	std	Y+1, r1	; 0x01
	switch (button_number) {
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	28 2f       	mov	r18, r24
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	3c 83       	std	Y+4, r19	; 0x04
    28de:	2b 83       	std	Y+3, r18	; 0x03
    28e0:	8b 81       	ldd	r24, Y+3	; 0x03
    28e2:	9c 81       	ldd	r25, Y+4	; 0x04
    28e4:	88 30       	cpi	r24, 0x08	; 8
    28e6:	91 05       	cpc	r25, r1
    28e8:	09 f4       	brne	.+2      	; 0x28ec <KEYPAD_4x4_adjustKeyNumber+0x26>
    28ea:	70 c0       	rjmp	.+224    	; 0x29cc <KEYPAD_4x4_adjustKeyNumber+0x106>
    28ec:	2b 81       	ldd	r18, Y+3	; 0x03
    28ee:	3c 81       	ldd	r19, Y+4	; 0x04
    28f0:	29 30       	cpi	r18, 0x09	; 9
    28f2:	31 05       	cpc	r19, r1
    28f4:	5c f5       	brge	.+86     	; 0x294c <KEYPAD_4x4_adjustKeyNumber+0x86>
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	9c 81       	ldd	r25, Y+4	; 0x04
    28fa:	84 30       	cpi	r24, 0x04	; 4
    28fc:	91 05       	cpc	r25, r1
    28fe:	09 f4       	brne	.+2      	; 0x2902 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2900:	59 c0       	rjmp	.+178    	; 0x29b4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2902:	2b 81       	ldd	r18, Y+3	; 0x03
    2904:	3c 81       	ldd	r19, Y+4	; 0x04
    2906:	25 30       	cpi	r18, 0x05	; 5
    2908:	31 05       	cpc	r19, r1
    290a:	9c f4       	brge	.+38     	; 0x2932 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	82 30       	cpi	r24, 0x02	; 2
    2912:	91 05       	cpc	r25, r1
    2914:	09 f4       	brne	.+2      	; 0x2918 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2916:	48 c0       	rjmp	.+144    	; 0x29a8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2918:	2b 81       	ldd	r18, Y+3	; 0x03
    291a:	3c 81       	ldd	r19, Y+4	; 0x04
    291c:	23 30       	cpi	r18, 0x03	; 3
    291e:	31 05       	cpc	r19, r1
    2920:	0c f0       	brlt	.+2      	; 0x2924 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2922:	45 c0       	rjmp	.+138    	; 0x29ae <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2924:	8b 81       	ldd	r24, Y+3	; 0x03
    2926:	9c 81       	ldd	r25, Y+4	; 0x04
    2928:	81 30       	cpi	r24, 0x01	; 1
    292a:	91 05       	cpc	r25, r1
    292c:	09 f4       	brne	.+2      	; 0x2930 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    292e:	39 c0       	rjmp	.+114    	; 0x29a2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2930:	68 c0       	rjmp	.+208    	; 0x2a02 <KEYPAD_4x4_adjustKeyNumber+0x13c>
    2932:	2b 81       	ldd	r18, Y+3	; 0x03
    2934:	3c 81       	ldd	r19, Y+4	; 0x04
    2936:	26 30       	cpi	r18, 0x06	; 6
    2938:	31 05       	cpc	r19, r1
    293a:	09 f4       	brne	.+2      	; 0x293e <KEYPAD_4x4_adjustKeyNumber+0x78>
    293c:	41 c0       	rjmp	.+130    	; 0x29c0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
    2940:	9c 81       	ldd	r25, Y+4	; 0x04
    2942:	87 30       	cpi	r24, 0x07	; 7
    2944:	91 05       	cpc	r25, r1
    2946:	0c f0       	brlt	.+2      	; 0x294a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2948:	3e c0       	rjmp	.+124    	; 0x29c6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    294a:	37 c0       	rjmp	.+110    	; 0x29ba <KEYPAD_4x4_adjustKeyNumber+0xf4>
    294c:	2b 81       	ldd	r18, Y+3	; 0x03
    294e:	3c 81       	ldd	r19, Y+4	; 0x04
    2950:	2c 30       	cpi	r18, 0x0C	; 12
    2952:	31 05       	cpc	r19, r1
    2954:	09 f4       	brne	.+2      	; 0x2958 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2956:	46 c0       	rjmp	.+140    	; 0x29e4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2958:	8b 81       	ldd	r24, Y+3	; 0x03
    295a:	9c 81       	ldd	r25, Y+4	; 0x04
    295c:	8d 30       	cpi	r24, 0x0D	; 13
    295e:	91 05       	cpc	r25, r1
    2960:	5c f4       	brge	.+22     	; 0x2978 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2962:	2b 81       	ldd	r18, Y+3	; 0x03
    2964:	3c 81       	ldd	r19, Y+4	; 0x04
    2966:	2a 30       	cpi	r18, 0x0A	; 10
    2968:	31 05       	cpc	r19, r1
    296a:	b1 f1       	breq	.+108    	; 0x29d8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    296c:	8b 81       	ldd	r24, Y+3	; 0x03
    296e:	9c 81       	ldd	r25, Y+4	; 0x04
    2970:	8b 30       	cpi	r24, 0x0B	; 11
    2972:	91 05       	cpc	r25, r1
    2974:	a4 f5       	brge	.+104    	; 0x29de <KEYPAD_4x4_adjustKeyNumber+0x118>
    2976:	2d c0       	rjmp	.+90     	; 0x29d2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2978:	2b 81       	ldd	r18, Y+3	; 0x03
    297a:	3c 81       	ldd	r19, Y+4	; 0x04
    297c:	2e 30       	cpi	r18, 0x0E	; 14
    297e:	31 05       	cpc	r19, r1
    2980:	b9 f1       	breq	.+110    	; 0x29f0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	9c 81       	ldd	r25, Y+4	; 0x04
    2986:	8e 30       	cpi	r24, 0x0E	; 14
    2988:	91 05       	cpc	r25, r1
    298a:	7c f1       	brlt	.+94     	; 0x29ea <KEYPAD_4x4_adjustKeyNumber+0x124>
    298c:	2b 81       	ldd	r18, Y+3	; 0x03
    298e:	3c 81       	ldd	r19, Y+4	; 0x04
    2990:	2f 30       	cpi	r18, 0x0F	; 15
    2992:	31 05       	cpc	r19, r1
    2994:	81 f1       	breq	.+96     	; 0x29f6 <KEYPAD_4x4_adjustKeyNumber+0x130>
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
    2998:	9c 81       	ldd	r25, Y+4	; 0x04
    299a:	80 31       	cpi	r24, 0x10	; 16
    299c:	91 05       	cpc	r25, r1
    299e:	71 f1       	breq	.+92     	; 0x29fc <KEYPAD_4x4_adjustKeyNumber+0x136>
    29a0:	30 c0       	rjmp	.+96     	; 0x2a02 <KEYPAD_4x4_adjustKeyNumber+0x13c>
	case 1:
		keypad_button = '7';
    29a2:	87 e3       	ldi	r24, 0x37	; 55
    29a4:	89 83       	std	Y+1, r24	; 0x01
    29a6:	2f c0       	rjmp	.+94     	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0x140>
		break;
	case 2:
		keypad_button = '8';
    29a8:	88 e3       	ldi	r24, 0x38	; 56
    29aa:	89 83       	std	Y+1, r24	; 0x01
    29ac:	2c c0       	rjmp	.+88     	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0x140>
		break;
	case 3:
		keypad_button = '9';
    29ae:	89 e3       	ldi	r24, 0x39	; 57
    29b0:	89 83       	std	Y+1, r24	; 0x01
    29b2:	29 c0       	rjmp	.+82     	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0x140>
		break;
	case 4:
		keypad_button = '%'; // ASCII Code of %
    29b4:	85 e2       	ldi	r24, 0x25	; 37
    29b6:	89 83       	std	Y+1, r24	; 0x01
    29b8:	26 c0       	rjmp	.+76     	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0x140>
		break;
	case 5:
		keypad_button = '4';
    29ba:	84 e3       	ldi	r24, 0x34	; 52
    29bc:	89 83       	std	Y+1, r24	; 0x01
    29be:	23 c0       	rjmp	.+70     	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0x140>
		break;
	case 6:
		keypad_button = '5';
    29c0:	85 e3       	ldi	r24, 0x35	; 53
    29c2:	89 83       	std	Y+1, r24	; 0x01
    29c4:	20 c0       	rjmp	.+64     	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0x140>
		break;
	case 7:
		keypad_button = '6';
    29c6:	86 e3       	ldi	r24, 0x36	; 54
    29c8:	89 83       	std	Y+1, r24	; 0x01
    29ca:	1d c0       	rjmp	.+58     	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0x140>
		break;
	case 8:
		keypad_button = '*'; /* ASCII Code of '*' */
    29cc:	8a e2       	ldi	r24, 0x2A	; 42
    29ce:	89 83       	std	Y+1, r24	; 0x01
    29d0:	1a c0       	rjmp	.+52     	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0x140>
		break;
	case 9:
		keypad_button = '1';
    29d2:	81 e3       	ldi	r24, 0x31	; 49
    29d4:	89 83       	std	Y+1, r24	; 0x01
    29d6:	17 c0       	rjmp	.+46     	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0x140>
		break;
	case 10:
		keypad_button = '2';
    29d8:	82 e3       	ldi	r24, 0x32	; 50
    29da:	89 83       	std	Y+1, r24	; 0x01
    29dc:	14 c0       	rjmp	.+40     	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0x140>
		break;
	case 11:
		keypad_button = '3';
    29de:	83 e3       	ldi	r24, 0x33	; 51
    29e0:	89 83       	std	Y+1, r24	; 0x01
    29e2:	11 c0       	rjmp	.+34     	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0x140>
		break;
	case 12:
		keypad_button = '-'; /* ASCII Code of '-' */
    29e4:	8d e2       	ldi	r24, 0x2D	; 45
    29e6:	89 83       	std	Y+1, r24	; 0x01
    29e8:	0e c0       	rjmp	.+28     	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0x140>
		break;
	case 13:
		keypad_button = 13; /* ASCII of Enter */
    29ea:	8d e0       	ldi	r24, 0x0D	; 13
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	0b c0       	rjmp	.+22     	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0x140>
		break;
	case 14:
		keypad_button = '0';
    29f0:	80 e3       	ldi	r24, 0x30	; 48
    29f2:	89 83       	std	Y+1, r24	; 0x01
    29f4:	08 c0       	rjmp	.+16     	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0x140>
		break;
	case 15:
		keypad_button = '='; /* ASCII Code of '=' */
    29f6:	8d e3       	ldi	r24, 0x3D	; 61
    29f8:	89 83       	std	Y+1, r24	; 0x01
    29fa:	05 c0       	rjmp	.+10     	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0x140>
		break;
	case 16:
		keypad_button = '+'; /* ASCII Code of '+' */
    29fc:	8b e2       	ldi	r24, 0x2B	; 43
    29fe:	89 83       	std	Y+1, r24	; 0x01
    2a00:	02 c0       	rjmp	.+4      	; 0x2a06 <KEYPAD_4x4_adjustKeyNumber+0x140>
		break;
	default:
		keypad_button = 255;
    2a02:	8f ef       	ldi	r24, 0xFF	; 255
    2a04:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <APPLICATION_setup>:
static uint8 keypad_input = 255, i = 0;
static uint8 buffer[16] = { 0 };
static void performCalc();
void substr(uint8 *x, uint8 *y, uint8 start, uint8 end);

void APPLICATION_setup() {
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	aa 97       	sbiw	r28, 0x2a	; 42
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	cd bf       	out	0x3d, r28	; 61
	KEYPAD_init();
    2a2a:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <KEYPAD_init>
	LCD_init();
    2a2e:	0e 94 8a 09 	call	0x1314	; 0x1314 <LCD_init>
	LCD_displayString("Adham Nour ElWfa");
    2a32:	80 e6       	ldi	r24, 0x60	; 96
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_displayString>
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	aa ef       	ldi	r26, 0xFA	; 250
    2a40:	b3 e4       	ldi	r27, 0x43	; 67
    2a42:	8f a3       	std	Y+39, r24	; 0x27
    2a44:	98 a7       	std	Y+40, r25	; 0x28
    2a46:	a9 a7       	std	Y+41, r26	; 0x29
    2a48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	4a e7       	ldi	r20, 0x7A	; 122
    2a58:	55 e4       	ldi	r21, 0x45	; 69
    2a5a:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	8b a3       	std	Y+35, r24	; 0x23
    2a64:	9c a3       	std	Y+36, r25	; 0x24
    2a66:	ad a3       	std	Y+37, r26	; 0x25
    2a68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a70:	9e a1       	ldd	r25, Y+38	; 0x26
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e8       	ldi	r20, 0x80	; 128
    2a78:	5f e3       	ldi	r21, 0x3F	; 63
    2a7a:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    2a7e:	88 23       	and	r24, r24
    2a80:	2c f4       	brge	.+10     	; 0x2a8c <APPLICATION_setup+0x76>
		__ticks = 1;
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	9a a3       	std	Y+34, r25	; 0x22
    2a88:	89 a3       	std	Y+33, r24	; 0x21
    2a8a:	3f c0       	rjmp	.+126    	; 0x2b0a <APPLICATION_setup+0xf4>
	else if (__tmp > 65535)
    2a8c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a8e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a90:	8d a1       	ldd	r24, Y+37	; 0x25
    2a92:	9e a1       	ldd	r25, Y+38	; 0x26
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	3f ef       	ldi	r19, 0xFF	; 255
    2a98:	4f e7       	ldi	r20, 0x7F	; 127
    2a9a:	57 e4       	ldi	r21, 0x47	; 71
    2a9c:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    2aa0:	18 16       	cp	r1, r24
    2aa2:	4c f5       	brge	.+82     	; 0x2af6 <APPLICATION_setup+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa4:	6f a1       	ldd	r22, Y+39	; 0x27
    2aa6:	78 a5       	ldd	r23, Y+40	; 0x28
    2aa8:	89 a5       	ldd	r24, Y+41	; 0x29
    2aaa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e2       	ldi	r20, 0x20	; 32
    2ab2:	51 e4       	ldi	r21, 0x41	; 65
    2ab4:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	bc 01       	movw	r22, r24
    2abe:	cd 01       	movw	r24, r26
    2ac0:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	9a a3       	std	Y+34, r25	; 0x22
    2aca:	89 a3       	std	Y+33, r24	; 0x21
    2acc:	0f c0       	rjmp	.+30     	; 0x2aec <APPLICATION_setup+0xd6>
    2ace:	80 e9       	ldi	r24, 0x90	; 144
    2ad0:	91 e0       	ldi	r25, 0x01	; 1
    2ad2:	98 a3       	std	Y+32, r25	; 0x20
    2ad4:	8f 8f       	std	Y+31, r24	; 0x1f
    2ad6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ad8:	98 a1       	ldd	r25, Y+32	; 0x20
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <APPLICATION_setup+0xc4>
    2ade:	98 a3       	std	Y+32, r25	; 0x20
    2ae0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	9a a3       	std	Y+34, r25	; 0x22
    2aea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aec:	89 a1       	ldd	r24, Y+33	; 0x21
    2aee:	9a a1       	ldd	r25, Y+34	; 0x22
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	69 f7       	brne	.-38     	; 0x2ace <APPLICATION_setup+0xb8>
    2af4:	14 c0       	rjmp	.+40     	; 0x2b1e <APPLICATION_setup+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af6:	6b a1       	ldd	r22, Y+35	; 0x23
    2af8:	7c a1       	ldd	r23, Y+36	; 0x24
    2afa:	8d a1       	ldd	r24, Y+37	; 0x25
    2afc:	9e a1       	ldd	r25, Y+38	; 0x26
    2afe:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9a a3       	std	Y+34, r25	; 0x22
    2b08:	89 a3       	std	Y+33, r24	; 0x21
    2b0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b0e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b10:	8d 8f       	std	Y+29, r24	; 0x1d
    2b12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <APPLICATION_setup+0x100>
    2b1a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b1c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	LCD_displayStringRowColumn(1, 0, "simpleCalculator");
    2b1e:	21 e7       	ldi	r18, 0x71	; 113
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	60 e0       	ldi	r22, 0x00	; 0
    2b26:	a9 01       	movw	r20, r18
    2b28:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayStringRowColumn>
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	aa ef       	ldi	r26, 0xFA	; 250
    2b32:	b3 e4       	ldi	r27, 0x43	; 67
    2b34:	89 8f       	std	Y+25, r24	; 0x19
    2b36:	9a 8f       	std	Y+26, r25	; 0x1a
    2b38:	ab 8f       	std	Y+27, r26	; 0x1b
    2b3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b3c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	4a e7       	ldi	r20, 0x7A	; 122
    2b4a:	55 e4       	ldi	r21, 0x45	; 69
    2b4c:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	8d 8b       	std	Y+21, r24	; 0x15
    2b56:	9e 8b       	std	Y+22, r25	; 0x16
    2b58:	af 8b       	std	Y+23, r26	; 0x17
    2b5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b5c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b5e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b60:	8f 89       	ldd	r24, Y+23	; 0x17
    2b62:	98 8d       	ldd	r25, Y+24	; 0x18
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	40 e8       	ldi	r20, 0x80	; 128
    2b6a:	5f e3       	ldi	r21, 0x3F	; 63
    2b6c:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    2b70:	88 23       	and	r24, r24
    2b72:	2c f4       	brge	.+10     	; 0x2b7e <APPLICATION_setup+0x168>
		__ticks = 1;
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	9c 8b       	std	Y+20, r25	; 0x14
    2b7a:	8b 8b       	std	Y+19, r24	; 0x13
    2b7c:	3f c0       	rjmp	.+126    	; 0x2bfc <APPLICATION_setup+0x1e6>
	else if (__tmp > 65535)
    2b7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b80:	7e 89       	ldd	r23, Y+22	; 0x16
    2b82:	8f 89       	ldd	r24, Y+23	; 0x17
    2b84:	98 8d       	ldd	r25, Y+24	; 0x18
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	3f ef       	ldi	r19, 0xFF	; 255
    2b8a:	4f e7       	ldi	r20, 0x7F	; 127
    2b8c:	57 e4       	ldi	r21, 0x47	; 71
    2b8e:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    2b92:	18 16       	cp	r1, r24
    2b94:	4c f5       	brge	.+82     	; 0x2be8 <APPLICATION_setup+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b96:	69 8d       	ldd	r22, Y+25	; 0x19
    2b98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e2       	ldi	r20, 0x20	; 32
    2ba4:	51 e4       	ldi	r21, 0x41	; 65
    2ba6:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	bc 01       	movw	r22, r24
    2bb0:	cd 01       	movw	r24, r26
    2bb2:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	9c 8b       	std	Y+20, r25	; 0x14
    2bbc:	8b 8b       	std	Y+19, r24	; 0x13
    2bbe:	0f c0       	rjmp	.+30     	; 0x2bde <APPLICATION_setup+0x1c8>
    2bc0:	80 e9       	ldi	r24, 0x90	; 144
    2bc2:	91 e0       	ldi	r25, 0x01	; 1
    2bc4:	9a 8b       	std	Y+18, r25	; 0x12
    2bc6:	89 8b       	std	Y+17, r24	; 0x11
    2bc8:	89 89       	ldd	r24, Y+17	; 0x11
    2bca:	9a 89       	ldd	r25, Y+18	; 0x12
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	f1 f7       	brne	.-4      	; 0x2bcc <APPLICATION_setup+0x1b6>
    2bd0:	9a 8b       	std	Y+18, r25	; 0x12
    2bd2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	9c 8b       	std	Y+20, r25	; 0x14
    2bdc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bde:	8b 89       	ldd	r24, Y+19	; 0x13
    2be0:	9c 89       	ldd	r25, Y+20	; 0x14
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	69 f7       	brne	.-38     	; 0x2bc0 <APPLICATION_setup+0x1aa>
    2be6:	14 c0       	rjmp	.+40     	; 0x2c10 <APPLICATION_setup+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bea:	7e 89       	ldd	r23, Y+22	; 0x16
    2bec:	8f 89       	ldd	r24, Y+23	; 0x17
    2bee:	98 8d       	ldd	r25, Y+24	; 0x18
    2bf0:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	9c 8b       	std	Y+20, r25	; 0x14
    2bfa:	8b 8b       	std	Y+19, r24	; 0x13
    2bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    2c00:	98 8b       	std	Y+16, r25	; 0x10
    2c02:	8f 87       	std	Y+15, r24	; 0x0f
    2c04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c06:	98 89       	ldd	r25, Y+16	; 0x10
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	f1 f7       	brne	.-4      	; 0x2c08 <APPLICATION_setup+0x1f2>
    2c0c:	98 8b       	std	Y+16, r25	; 0x10
    2c0e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);

	LCD_clearScreen();
    2c10:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_clearScreen>
	LCD_displayString("Enter Your");
    2c14:	82 e8       	ldi	r24, 0x82	; 130
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "Calculation Now");
    2c1c:	2d e8       	ldi	r18, 0x8D	; 141
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	60 e0       	ldi	r22, 0x00	; 0
    2c24:	a9 01       	movw	r20, r18
    2c26:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayStringRowColumn>
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	aa ef       	ldi	r26, 0xFA	; 250
    2c30:	b3 e4       	ldi	r27, 0x43	; 67
    2c32:	8b 87       	std	Y+11, r24	; 0x0b
    2c34:	9c 87       	std	Y+12, r25	; 0x0c
    2c36:	ad 87       	std	Y+13, r26	; 0x0d
    2c38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	4a e7       	ldi	r20, 0x7A	; 122
    2c48:	55 e4       	ldi	r21, 0x45	; 69
    2c4a:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	8f 83       	std	Y+7, r24	; 0x07
    2c54:	98 87       	std	Y+8, r25	; 0x08
    2c56:	a9 87       	std	Y+9, r26	; 0x09
    2c58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5c:	78 85       	ldd	r23, Y+8	; 0x08
    2c5e:	89 85       	ldd	r24, Y+9	; 0x09
    2c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e8       	ldi	r20, 0x80	; 128
    2c68:	5f e3       	ldi	r21, 0x3F	; 63
    2c6a:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    2c6e:	88 23       	and	r24, r24
    2c70:	2c f4       	brge	.+10     	; 0x2c7c <APPLICATION_setup+0x266>
		__ticks = 1;
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	9e 83       	std	Y+6, r25	; 0x06
    2c78:	8d 83       	std	Y+5, r24	; 0x05
    2c7a:	3f c0       	rjmp	.+126    	; 0x2cfa <APPLICATION_setup+0x2e4>
	else if (__tmp > 65535)
    2c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7e:	78 85       	ldd	r23, Y+8	; 0x08
    2c80:	89 85       	ldd	r24, Y+9	; 0x09
    2c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	3f ef       	ldi	r19, 0xFF	; 255
    2c88:	4f e7       	ldi	r20, 0x7F	; 127
    2c8a:	57 e4       	ldi	r21, 0x47	; 71
    2c8c:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    2c90:	18 16       	cp	r1, r24
    2c92:	4c f5       	brge	.+82     	; 0x2ce6 <APPLICATION_setup+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e2       	ldi	r20, 0x20	; 32
    2ca2:	51 e4       	ldi	r21, 0x41	; 65
    2ca4:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	bc 01       	movw	r22, r24
    2cae:	cd 01       	movw	r24, r26
    2cb0:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	9e 83       	std	Y+6, r25	; 0x06
    2cba:	8d 83       	std	Y+5, r24	; 0x05
    2cbc:	0f c0       	rjmp	.+30     	; 0x2cdc <APPLICATION_setup+0x2c6>
    2cbe:	80 e9       	ldi	r24, 0x90	; 144
    2cc0:	91 e0       	ldi	r25, 0x01	; 1
    2cc2:	9c 83       	std	Y+4, r25	; 0x04
    2cc4:	8b 83       	std	Y+3, r24	; 0x03
    2cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	f1 f7       	brne	.-4      	; 0x2cca <APPLICATION_setup+0x2b4>
    2cce:	9c 83       	std	Y+4, r25	; 0x04
    2cd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	9e 83       	std	Y+6, r25	; 0x06
    2cda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	69 f7       	brne	.-38     	; 0x2cbe <APPLICATION_setup+0x2a8>
    2ce4:	14 c0       	rjmp	.+40     	; 0x2d0e <APPLICATION_setup+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce8:	78 85       	ldd	r23, Y+8	; 0x08
    2cea:	89 85       	ldd	r24, Y+9	; 0x09
    2cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cee:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	9e 83       	std	Y+6, r25	; 0x06
    2cf8:	8d 83       	std	Y+5, r24	; 0x05
    2cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfe:	9a 83       	std	Y+2, r25	; 0x02
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	9a 81       	ldd	r25, Y+2	; 0x02
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	f1 f7       	brne	.-4      	; 0x2d06 <APPLICATION_setup+0x2f0>
    2d0a:	9a 83       	std	Y+2, r25	; 0x02
    2d0c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_clearScreen();
    2d0e:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_clearScreen>

}
    2d12:	aa 96       	adiw	r28, 0x2a	; 42
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	cd bf       	out	0x3d, r28	; 61
    2d1e:	cf 91       	pop	r28
    2d20:	df 91       	pop	r29
    2d22:	08 95       	ret

00002d24 <APPLICATION_loop>:
/*
 * Description:
 * this is the main loop of the application
 */

void APPLICATION_loop() {
    2d24:	df 93       	push	r29
    2d26:	cf 93       	push	r28
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	62 97       	sbiw	r28, 0x12	; 18
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	f8 94       	cli
    2d32:	de bf       	out	0x3e, r29	; 62
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	cd bf       	out	0x3d, r28	; 61
    2d38:	04 c0       	rjmp	.+8      	; 0x2d42 <APPLICATION_loop+0x1e>
	while (keypad_input == 255) {
		keypad_input = KEYPAD_getPressedKey();
    2d3a:	0e 94 14 14 	call	0x2828	; 0x2828 <KEYPAD_getPressedKey>
    2d3e:	80 93 c6 00 	sts	0x00C6, r24
 * Description:
 * this is the main loop of the application
 */

void APPLICATION_loop() {
	while (keypad_input == 255) {
    2d42:	80 91 c6 00 	lds	r24, 0x00C6
    2d46:	8f 3f       	cpi	r24, 0xFF	; 255
    2d48:	c1 f3       	breq	.-16     	; 0x2d3a <APPLICATION_loop+0x16>
		keypad_input = KEYPAD_getPressedKey();
	}

	if (keypad_input == '=') {
    2d4a:	80 91 c6 00 	lds	r24, 0x00C6
    2d4e:	8d 33       	cpi	r24, 0x3D	; 61
    2d50:	19 f4       	brne	.+6      	; 0x2d58 <APPLICATION_loop+0x34>
		performCalc();
    2d52:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <performCalc>
    2d56:	51 c0       	rjmp	.+162    	; 0x2dfa <APPLICATION_loop+0xd6>
	} else if (keypad_input == 13) {
    2d58:	80 91 c6 00 	lds	r24, 0x00C6
    2d5c:	8d 30       	cpi	r24, 0x0D	; 13
    2d5e:	c1 f4       	brne	.+48     	; 0x2d90 <APPLICATION_loop+0x6c>
		LCD_clearScreen();
    2d60:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_clearScreen>
		i = 0;
    2d64:	10 92 c8 00 	sts	0x00C8, r1
		for (int j = 0; j < 16; j++)
    2d68:	1a 8a       	std	Y+18, r1	; 0x12
    2d6a:	19 8a       	std	Y+17, r1	; 0x11
    2d6c:	0b c0       	rjmp	.+22     	; 0x2d84 <APPLICATION_loop+0x60>
			buffer[j] = 0;
    2d6e:	89 89       	ldd	r24, Y+17	; 0x11
    2d70:	9a 89       	ldd	r25, Y+18	; 0x12
    2d72:	fc 01       	movw	r30, r24
    2d74:	e7 53       	subi	r30, 0x37	; 55
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	10 82       	st	Z, r1
	if (keypad_input == '=') {
		performCalc();
	} else if (keypad_input == 13) {
		LCD_clearScreen();
		i = 0;
		for (int j = 0; j < 16; j++)
    2d7a:	89 89       	ldd	r24, Y+17	; 0x11
    2d7c:	9a 89       	ldd	r25, Y+18	; 0x12
    2d7e:	01 96       	adiw	r24, 0x01	; 1
    2d80:	9a 8b       	std	Y+18, r25	; 0x12
    2d82:	89 8b       	std	Y+17, r24	; 0x11
    2d84:	89 89       	ldd	r24, Y+17	; 0x11
    2d86:	9a 89       	ldd	r25, Y+18	; 0x12
    2d88:	80 31       	cpi	r24, 0x10	; 16
    2d8a:	91 05       	cpc	r25, r1
    2d8c:	84 f3       	brlt	.-32     	; 0x2d6e <APPLICATION_loop+0x4a>
    2d8e:	35 c0       	rjmp	.+106    	; 0x2dfa <APPLICATION_loop+0xd6>
			buffer[j] = 0;
	} else {
		if (i < 16) {
    2d90:	80 91 c8 00 	lds	r24, 0x00C8
    2d94:	80 31       	cpi	r24, 0x10	; 16
    2d96:	b8 f4       	brcc	.+46     	; 0x2dc6 <APPLICATION_loop+0xa2>
			buffer[i] = keypad_input;
    2d98:	80 91 c8 00 	lds	r24, 0x00C8
    2d9c:	88 2f       	mov	r24, r24
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	20 91 c6 00 	lds	r18, 0x00C6
    2da4:	fc 01       	movw	r30, r24
    2da6:	e7 53       	subi	r30, 0x37	; 55
    2da8:	ff 4f       	sbci	r31, 0xFF	; 255
    2daa:	20 83       	st	Z, r18
			i++;
    2dac:	80 91 c8 00 	lds	r24, 0x00C8
    2db0:	8f 5f       	subi	r24, 0xFF	; 255
    2db2:	80 93 c8 00 	sts	0x00C8, r24
			LCD_displayStringRowColumn(0, 0, buffer);
    2db6:	29 ec       	ldi	r18, 0xC9	; 201
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	60 e0       	ldi	r22, 0x00	; 0
    2dbe:	a9 01       	movw	r20, r18
    2dc0:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayStringRowColumn>
    2dc4:	1a c0       	rjmp	.+52     	; 0x2dfa <APPLICATION_loop+0xd6>

		} else {
			for (int j = 0; j < 16; j++)
    2dc6:	18 8a       	std	Y+16, r1	; 0x10
    2dc8:	1f 86       	std	Y+15, r1	; 0x0f
    2dca:	0b c0       	rjmp	.+22     	; 0x2de2 <APPLICATION_loop+0xbe>
				buffer[j] = 0;
    2dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dce:	98 89       	ldd	r25, Y+16	; 0x10
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	e7 53       	subi	r30, 0x37	; 55
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	10 82       	st	Z, r1
			buffer[i] = keypad_input;
			i++;
			LCD_displayStringRowColumn(0, 0, buffer);

		} else {
			for (int j = 0; j < 16; j++)
    2dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dda:	98 89       	ldd	r25, Y+16	; 0x10
    2ddc:	01 96       	adiw	r24, 0x01	; 1
    2dde:	98 8b       	std	Y+16, r25	; 0x10
    2de0:	8f 87       	std	Y+15, r24	; 0x0f
    2de2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de4:	98 89       	ldd	r25, Y+16	; 0x10
    2de6:	80 31       	cpi	r24, 0x10	; 16
    2de8:	91 05       	cpc	r25, r1
    2dea:	84 f3       	brlt	.-32     	; 0x2dcc <APPLICATION_loop+0xa8>
				buffer[j] = 0;
			LCD_displayStringRowColumn(1, 0, "Long Exp, buff clrd");
    2dec:	2d e9       	ldi	r18, 0x9D	; 157
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	60 e0       	ldi	r22, 0x00	; 0
    2df4:	a9 01       	movw	r20, r18
    2df6:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayStringRowColumn>
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	a8 e4       	ldi	r26, 0x48	; 72
    2e00:	b3 e4       	ldi	r27, 0x43	; 67
    2e02:	8b 87       	std	Y+11, r24	; 0x0b
    2e04:	9c 87       	std	Y+12, r25	; 0x0c
    2e06:	ad 87       	std	Y+13, r26	; 0x0d
    2e08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	4a e7       	ldi	r20, 0x7A	; 122
    2e18:	55 e4       	ldi	r21, 0x45	; 69
    2e1a:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	8f 83       	std	Y+7, r24	; 0x07
    2e24:	98 87       	std	Y+8, r25	; 0x08
    2e26:	a9 87       	std	Y+9, r26	; 0x09
    2e28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e2c:	78 85       	ldd	r23, Y+8	; 0x08
    2e2e:	89 85       	ldd	r24, Y+9	; 0x09
    2e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	40 e8       	ldi	r20, 0x80	; 128
    2e38:	5f e3       	ldi	r21, 0x3F	; 63
    2e3a:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    2e3e:	88 23       	and	r24, r24
    2e40:	2c f4       	brge	.+10     	; 0x2e4c <APPLICATION_loop+0x128>
		__ticks = 1;
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	9e 83       	std	Y+6, r25	; 0x06
    2e48:	8d 83       	std	Y+5, r24	; 0x05
    2e4a:	3f c0       	rjmp	.+126    	; 0x2eca <APPLICATION_loop+0x1a6>
	else if (__tmp > 65535)
    2e4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e4e:	78 85       	ldd	r23, Y+8	; 0x08
    2e50:	89 85       	ldd	r24, Y+9	; 0x09
    2e52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	3f ef       	ldi	r19, 0xFF	; 255
    2e58:	4f e7       	ldi	r20, 0x7F	; 127
    2e5a:	57 e4       	ldi	r21, 0x47	; 71
    2e5c:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    2e60:	18 16       	cp	r1, r24
    2e62:	4c f5       	brge	.+82     	; 0x2eb6 <APPLICATION_loop+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	40 e2       	ldi	r20, 0x20	; 32
    2e72:	51 e4       	ldi	r21, 0x41	; 65
    2e74:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	bc 01       	movw	r22, r24
    2e7e:	cd 01       	movw	r24, r26
    2e80:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	9e 83       	std	Y+6, r25	; 0x06
    2e8a:	8d 83       	std	Y+5, r24	; 0x05
    2e8c:	0f c0       	rjmp	.+30     	; 0x2eac <APPLICATION_loop+0x188>
    2e8e:	80 e9       	ldi	r24, 0x90	; 144
    2e90:	91 e0       	ldi	r25, 0x01	; 1
    2e92:	9c 83       	std	Y+4, r25	; 0x04
    2e94:	8b 83       	std	Y+3, r24	; 0x03
    2e96:	8b 81       	ldd	r24, Y+3	; 0x03
    2e98:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	f1 f7       	brne	.-4      	; 0x2e9a <APPLICATION_loop+0x176>
    2e9e:	9c 83       	std	Y+4, r25	; 0x04
    2ea0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	9e 83       	std	Y+6, r25	; 0x06
    2eaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eac:	8d 81       	ldd	r24, Y+5	; 0x05
    2eae:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb0:	00 97       	sbiw	r24, 0x00	; 0
    2eb2:	69 f7       	brne	.-38     	; 0x2e8e <APPLICATION_loop+0x16a>
    2eb4:	14 c0       	rjmp	.+40     	; 0x2ede <APPLICATION_loop+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb8:	78 85       	ldd	r23, Y+8	; 0x08
    2eba:	89 85       	ldd	r24, Y+9	; 0x09
    2ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ebe:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	9e 83       	std	Y+6, r25	; 0x06
    2ec8:	8d 83       	std	Y+5, r24	; 0x05
    2eca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ece:	9a 83       	std	Y+2, r25	; 0x02
    2ed0:	89 83       	std	Y+1, r24	; 0x01
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <APPLICATION_loop+0x1b2>
    2eda:	9a 83       	std	Y+2, r25	; 0x02
    2edc:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	_delay_ms(200);
	keypad_input = 255;
    2ede:	8f ef       	ldi	r24, 0xFF	; 255
    2ee0:	80 93 c6 00 	sts	0x00C6, r24

}
    2ee4:	62 96       	adiw	r28, 0x12	; 18
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	f8 94       	cli
    2eea:	de bf       	out	0x3e, r29	; 62
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	cd bf       	out	0x3d, r28	; 61
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <performCalc>:
static void performCalc() {
    2ef6:	0f 93       	push	r16
    2ef8:	1f 93       	push	r17
    2efa:	df 93       	push	r29
    2efc:	cf 93       	push	r28
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	ce 55       	subi	r28, 0x5E	; 94
    2f04:	d0 40       	sbci	r29, 0x00	; 0
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	f8 94       	cli
    2f0a:	de bf       	out	0x3e, r29	; 62
    2f0c:	0f be       	out	0x3f, r0	; 63
    2f0e:	cd bf       	out	0x3d, r28	; 61
	uint8 operatorLocations[16];
	sint16 operands[17];
	for (int i = 0; i < 16; i++)
    2f10:	1c 8e       	std	Y+28, r1	; 0x1c
    2f12:	1b 8e       	std	Y+27, r1	; 0x1b
    2f14:	14 c0       	rjmp	.+40     	; 0x2f3e <performCalc+0x48>
		operands[i] = -1;
    2f16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f1a:	9c 01       	movw	r18, r24
    2f1c:	22 0f       	add	r18, r18
    2f1e:	33 1f       	adc	r19, r19
    2f20:	ce 01       	movw	r24, r28
    2f22:	01 96       	adiw	r24, 0x01	; 1
    2f24:	82 0f       	add	r24, r18
    2f26:	93 1f       	adc	r25, r19
    2f28:	fc 01       	movw	r30, r24
    2f2a:	bc 96       	adiw	r30, 0x2c	; 44
    2f2c:	8f ef       	ldi	r24, 0xFF	; 255
    2f2e:	9f ef       	ldi	r25, 0xFF	; 255
    2f30:	91 83       	std	Z+1, r25	; 0x01
    2f32:	80 83       	st	Z, r24

}
static void performCalc() {
	uint8 operatorLocations[16];
	sint16 operands[17];
	for (int i = 0; i < 16; i++)
    2f34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f38:	01 96       	adiw	r24, 0x01	; 1
    2f3a:	9c 8f       	std	Y+28, r25	; 0x1c
    2f3c:	8b 8f       	std	Y+27, r24	; 0x1b
    2f3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f42:	80 31       	cpi	r24, 0x10	; 16
    2f44:	91 05       	cpc	r25, r1
    2f46:	3c f3       	brlt	.-50     	; 0x2f16 <performCalc+0x20>
		operands[i] = -1;
	for (int i = 0; i < 16; i++)
    2f48:	1a 8e       	std	Y+26, r1	; 0x1a
    2f4a:	19 8e       	std	Y+25, r1	; 0x19
    2f4c:	0e c0       	rjmp	.+28     	; 0x2f6a <performCalc+0x74>
			operatorLocations[i] = 255;
    2f4e:	29 8d       	ldd	r18, Y+25	; 0x19
    2f50:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2f52:	ce 01       	movw	r24, r28
    2f54:	4d 96       	adiw	r24, 0x1d	; 29
    2f56:	fc 01       	movw	r30, r24
    2f58:	e2 0f       	add	r30, r18
    2f5a:	f3 1f       	adc	r31, r19
    2f5c:	8f ef       	ldi	r24, 0xFF	; 255
    2f5e:	80 83       	st	Z, r24
static void performCalc() {
	uint8 operatorLocations[16];
	sint16 operands[17];
	for (int i = 0; i < 16; i++)
		operands[i] = -1;
	for (int i = 0; i < 16; i++)
    2f60:	89 8d       	ldd	r24, Y+25	; 0x19
    2f62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f64:	01 96       	adiw	r24, 0x01	; 1
    2f66:	9a 8f       	std	Y+26, r25	; 0x1a
    2f68:	89 8f       	std	Y+25, r24	; 0x19
    2f6a:	89 8d       	ldd	r24, Y+25	; 0x19
    2f6c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f6e:	80 31       	cpi	r24, 0x10	; 16
    2f70:	91 05       	cpc	r25, r1
    2f72:	6c f3       	brlt	.-38     	; 0x2f4e <performCalc+0x58>
			operatorLocations[i] = 255;
	for (int i = 0, j = 0; i < 16; i++) {
    2f74:	18 8e       	std	Y+24, r1	; 0x18
    2f76:	1f 8a       	std	Y+23, r1	; 0x17
    2f78:	1e 8a       	std	Y+22, r1	; 0x16
    2f7a:	1d 8a       	std	Y+21, r1	; 0x15
    2f7c:	33 c0       	rjmp	.+102    	; 0x2fe4 <performCalc+0xee>
		if (buffer[i] == '+' || buffer[i] == '-' || buffer[i] == '*'
    2f7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f80:	98 8d       	ldd	r25, Y+24	; 0x18
    2f82:	fc 01       	movw	r30, r24
    2f84:	e7 53       	subi	r30, 0x37	; 55
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	80 81       	ld	r24, Z
    2f8a:	8b 32       	cpi	r24, 0x2B	; 43
    2f8c:	c1 f0       	breq	.+48     	; 0x2fbe <performCalc+0xc8>
    2f8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f90:	98 8d       	ldd	r25, Y+24	; 0x18
    2f92:	fc 01       	movw	r30, r24
    2f94:	e7 53       	subi	r30, 0x37	; 55
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	80 81       	ld	r24, Z
    2f9a:	8d 32       	cpi	r24, 0x2D	; 45
    2f9c:	81 f0       	breq	.+32     	; 0x2fbe <performCalc+0xc8>
    2f9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2fa0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	e7 53       	subi	r30, 0x37	; 55
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	80 81       	ld	r24, Z
    2faa:	8a 32       	cpi	r24, 0x2A	; 42
    2fac:	41 f0       	breq	.+16     	; 0x2fbe <performCalc+0xc8>
    2fae:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	e7 53       	subi	r30, 0x37	; 55
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	80 81       	ld	r24, Z
    2fba:	85 32       	cpi	r24, 0x25	; 37
    2fbc:	71 f4       	brne	.+28     	; 0x2fda <performCalc+0xe4>
				|| buffer[i] == '%') {
			operatorLocations[j] = i;
    2fbe:	2d 89       	ldd	r18, Y+21	; 0x15
    2fc0:	3e 89       	ldd	r19, Y+22	; 0x16
    2fc2:	4f 89       	ldd	r20, Y+23	; 0x17
    2fc4:	ce 01       	movw	r24, r28
    2fc6:	4d 96       	adiw	r24, 0x1d	; 29
    2fc8:	fc 01       	movw	r30, r24
    2fca:	e2 0f       	add	r30, r18
    2fcc:	f3 1f       	adc	r31, r19
    2fce:	40 83       	st	Z, r20
			j++;
    2fd0:	8d 89       	ldd	r24, Y+21	; 0x15
    2fd2:	9e 89       	ldd	r25, Y+22	; 0x16
    2fd4:	01 96       	adiw	r24, 0x01	; 1
    2fd6:	9e 8b       	std	Y+22, r25	; 0x16
    2fd8:	8d 8b       	std	Y+21, r24	; 0x15
	sint16 operands[17];
	for (int i = 0; i < 16; i++)
		operands[i] = -1;
	for (int i = 0; i < 16; i++)
			operatorLocations[i] = 255;
	for (int i = 0, j = 0; i < 16; i++) {
    2fda:	8f 89       	ldd	r24, Y+23	; 0x17
    2fdc:	98 8d       	ldd	r25, Y+24	; 0x18
    2fde:	01 96       	adiw	r24, 0x01	; 1
    2fe0:	98 8f       	std	Y+24, r25	; 0x18
    2fe2:	8f 8b       	std	Y+23, r24	; 0x17
    2fe4:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe6:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe8:	80 31       	cpi	r24, 0x10	; 16
    2fea:	91 05       	cpc	r25, r1
    2fec:	44 f2       	brlt	.-112    	; 0x2f7e <performCalc+0x88>
			operatorLocations[j] = i;
			j++;
		}

	}
	if (operatorLocations[0] == 0) {
    2fee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ff0:	88 23       	and	r24, r24
    2ff2:	41 f4       	brne	.+16     	; 0x3004 <performCalc+0x10e>
		LCD_displayStringRowColumn(1, 0, "Op in indx=0");
    2ff4:	21 eb       	ldi	r18, 0xB1	; 177
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	60 e0       	ldi	r22, 0x00	; 0
    2ffc:	a9 01       	movw	r20, r18
    2ffe:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayStringRowColumn>
    3002:	4e c1       	rjmp	.+668    	; 0x32a0 <performCalc+0x3aa>
		return;
	}
	/*Parsing*/
	uint8 temp[16] = { '\0' };
    3004:	ce 01       	movw	r24, r28
    3006:	81 5b       	subi	r24, 0xB1	; 177
    3008:	9f 4f       	sbci	r25, 0xFF	; 255
    300a:	20 e1       	ldi	r18, 0x10	; 16
    300c:	fc 01       	movw	r30, r24
    300e:	df 01       	movw	r26, r30
    3010:	82 2f       	mov	r24, r18
    3012:	1d 92       	st	X+, r1
    3014:	8a 95       	dec	r24
    3016:	e9 f7       	brne	.-6      	; 0x3012 <performCalc+0x11c>
	substr(buffer, temp, 0, operatorLocations[0]);
    3018:	5d 8d       	ldd	r21, Y+29	; 0x1d
    301a:	89 ec       	ldi	r24, 0xC9	; 201
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	9e 01       	movw	r18, r28
    3020:	21 5b       	subi	r18, 0xB1	; 177
    3022:	3f 4f       	sbci	r19, 0xFF	; 255
    3024:	b9 01       	movw	r22, r18
    3026:	40 e0       	ldi	r20, 0x00	; 0
    3028:	25 2f       	mov	r18, r21
    302a:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <substr>
	operands[0] = atoi(temp);
    302e:	ce 01       	movw	r24, r28
    3030:	81 5b       	subi	r24, 0xB1	; 177
    3032:	9f 4f       	sbci	r25, 0xFF	; 255
    3034:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <atoi>
    3038:	9e a7       	std	Y+46, r25	; 0x2e
    303a:	8d a7       	std	Y+45, r24	; 0x2d
	for (int i = 1, j = 1; i < 16; i++) {
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	9c 8b       	std	Y+20, r25	; 0x14
    3042:	8b 8b       	std	Y+19, r24	; 0x13
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	9a 8b       	std	Y+18, r25	; 0x12
    304a:	89 8b       	std	Y+17, r24	; 0x11
    304c:	74 c0       	rjmp	.+232    	; 0x3136 <performCalc+0x240>
		if (operatorLocations[i] == 255) {
    304e:	2b 89       	ldd	r18, Y+19	; 0x13
    3050:	3c 89       	ldd	r19, Y+20	; 0x14
    3052:	ce 01       	movw	r24, r28
    3054:	4d 96       	adiw	r24, 0x1d	; 29
    3056:	fc 01       	movw	r30, r24
    3058:	e2 0f       	add	r30, r18
    305a:	f3 1f       	adc	r31, r19
    305c:	80 81       	ld	r24, Z
    305e:	8f 3f       	cpi	r24, 0xFF	; 255
    3060:	79 f5       	brne	.+94     	; 0x30c0 <performCalc+0x1ca>
			substr(buffer, temp, operatorLocations[i - 1] + 1, 16);
    3062:	8b 89       	ldd	r24, Y+19	; 0x13
    3064:	9c 89       	ldd	r25, Y+20	; 0x14
    3066:	9c 01       	movw	r18, r24
    3068:	21 50       	subi	r18, 0x01	; 1
    306a:	30 40       	sbci	r19, 0x00	; 0
    306c:	ce 01       	movw	r24, r28
    306e:	4d 96       	adiw	r24, 0x1d	; 29
    3070:	fc 01       	movw	r30, r24
    3072:	e2 0f       	add	r30, r18
    3074:	f3 1f       	adc	r31, r19
    3076:	80 81       	ld	r24, Z
    3078:	48 2f       	mov	r20, r24
    307a:	4f 5f       	subi	r20, 0xFF	; 255
    307c:	89 ec       	ldi	r24, 0xC9	; 201
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	9e 01       	movw	r18, r28
    3082:	21 5b       	subi	r18, 0xB1	; 177
    3084:	3f 4f       	sbci	r19, 0xFF	; 255
    3086:	b9 01       	movw	r22, r18
    3088:	20 e1       	ldi	r18, 0x10	; 16
    308a:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <substr>
			operands[j] = atoi(temp);
    308e:	09 89       	ldd	r16, Y+17	; 0x11
    3090:	1a 89       	ldd	r17, Y+18	; 0x12
    3092:	ce 01       	movw	r24, r28
    3094:	81 5b       	subi	r24, 0xB1	; 177
    3096:	9f 4f       	sbci	r25, 0xFF	; 255
    3098:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <atoi>
    309c:	ac 01       	movw	r20, r24
    309e:	98 01       	movw	r18, r16
    30a0:	22 0f       	add	r18, r18
    30a2:	33 1f       	adc	r19, r19
    30a4:	ce 01       	movw	r24, r28
    30a6:	01 96       	adiw	r24, 0x01	; 1
    30a8:	82 0f       	add	r24, r18
    30aa:	93 1f       	adc	r25, r19
    30ac:	fc 01       	movw	r30, r24
    30ae:	bc 96       	adiw	r30, 0x2c	; 44
    30b0:	51 83       	std	Z+1, r21	; 0x01
    30b2:	40 83       	st	Z, r20
			j++;
    30b4:	89 89       	ldd	r24, Y+17	; 0x11
    30b6:	9a 89       	ldd	r25, Y+18	; 0x12
    30b8:	01 96       	adiw	r24, 0x01	; 1
    30ba:	9a 8b       	std	Y+18, r25	; 0x12
    30bc:	89 8b       	std	Y+17, r24	; 0x11
    30be:	41 c0       	rjmp	.+130    	; 0x3142 <performCalc+0x24c>
			break;
		} else {
			substr(buffer, temp, operatorLocations[i - 1] + 1,
    30c0:	8b 89       	ldd	r24, Y+19	; 0x13
    30c2:	9c 89       	ldd	r25, Y+20	; 0x14
    30c4:	9c 01       	movw	r18, r24
    30c6:	21 50       	subi	r18, 0x01	; 1
    30c8:	30 40       	sbci	r19, 0x00	; 0
    30ca:	ce 01       	movw	r24, r28
    30cc:	4d 96       	adiw	r24, 0x1d	; 29
    30ce:	fc 01       	movw	r30, r24
    30d0:	e2 0f       	add	r30, r18
    30d2:	f3 1f       	adc	r31, r19
    30d4:	80 81       	ld	r24, Z
    30d6:	48 2f       	mov	r20, r24
    30d8:	4f 5f       	subi	r20, 0xFF	; 255
    30da:	2b 89       	ldd	r18, Y+19	; 0x13
    30dc:	3c 89       	ldd	r19, Y+20	; 0x14
    30de:	ce 01       	movw	r24, r28
    30e0:	4d 96       	adiw	r24, 0x1d	; 29
    30e2:	fc 01       	movw	r30, r24
    30e4:	e2 0f       	add	r30, r18
    30e6:	f3 1f       	adc	r31, r19
    30e8:	50 81       	ld	r21, Z
    30ea:	89 ec       	ldi	r24, 0xC9	; 201
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	9e 01       	movw	r18, r28
    30f0:	21 5b       	subi	r18, 0xB1	; 177
    30f2:	3f 4f       	sbci	r19, 0xFF	; 255
    30f4:	b9 01       	movw	r22, r18
    30f6:	25 2f       	mov	r18, r21
    30f8:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <substr>
					operatorLocations[i]);
			operands[j] = atoi(temp);
    30fc:	09 89       	ldd	r16, Y+17	; 0x11
    30fe:	1a 89       	ldd	r17, Y+18	; 0x12
    3100:	ce 01       	movw	r24, r28
    3102:	81 5b       	subi	r24, 0xB1	; 177
    3104:	9f 4f       	sbci	r25, 0xFF	; 255
    3106:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <atoi>
    310a:	ac 01       	movw	r20, r24
    310c:	98 01       	movw	r18, r16
    310e:	22 0f       	add	r18, r18
    3110:	33 1f       	adc	r19, r19
    3112:	ce 01       	movw	r24, r28
    3114:	01 96       	adiw	r24, 0x01	; 1
    3116:	82 0f       	add	r24, r18
    3118:	93 1f       	adc	r25, r19
    311a:	fc 01       	movw	r30, r24
    311c:	bc 96       	adiw	r30, 0x2c	; 44
    311e:	51 83       	std	Z+1, r21	; 0x01
    3120:	40 83       	st	Z, r20
			j++;
    3122:	89 89       	ldd	r24, Y+17	; 0x11
    3124:	9a 89       	ldd	r25, Y+18	; 0x12
    3126:	01 96       	adiw	r24, 0x01	; 1
    3128:	9a 8b       	std	Y+18, r25	; 0x12
    312a:	89 8b       	std	Y+17, r24	; 0x11
	}
	/*Parsing*/
	uint8 temp[16] = { '\0' };
	substr(buffer, temp, 0, operatorLocations[0]);
	operands[0] = atoi(temp);
	for (int i = 1, j = 1; i < 16; i++) {
    312c:	8b 89       	ldd	r24, Y+19	; 0x13
    312e:	9c 89       	ldd	r25, Y+20	; 0x14
    3130:	01 96       	adiw	r24, 0x01	; 1
    3132:	9c 8b       	std	Y+20, r25	; 0x14
    3134:	8b 8b       	std	Y+19, r24	; 0x13
    3136:	8b 89       	ldd	r24, Y+19	; 0x13
    3138:	9c 89       	ldd	r25, Y+20	; 0x14
    313a:	80 31       	cpi	r24, 0x10	; 16
    313c:	91 05       	cpc	r25, r1
    313e:	0c f4       	brge	.+2      	; 0x3142 <performCalc+0x24c>
    3140:	86 cf       	rjmp	.-244    	; 0x304e <performCalc+0x158>
			operands[j] = atoi(temp);
			j++;

		}
	}
	for (int i=0;i<17;i++) {
    3142:	18 8a       	std	Y+16, r1	; 0x10
    3144:	1f 86       	std	Y+15, r1	; 0x0f
    3146:	a6 c0       	rjmp	.+332    	; 0x3294 <performCalc+0x39e>
		if(operands[i]==-1)break;
    3148:	8f 85       	ldd	r24, Y+15	; 0x0f
    314a:	98 89       	ldd	r25, Y+16	; 0x10
    314c:	9c 01       	movw	r18, r24
    314e:	22 0f       	add	r18, r18
    3150:	33 1f       	adc	r19, r19
    3152:	ce 01       	movw	r24, r28
    3154:	01 96       	adiw	r24, 0x01	; 1
    3156:	82 0f       	add	r24, r18
    3158:	93 1f       	adc	r25, r19
    315a:	fc 01       	movw	r30, r24
    315c:	bc 96       	adiw	r30, 0x2c	; 44
    315e:	80 81       	ld	r24, Z
    3160:	91 81       	ldd	r25, Z+1	; 0x01
    3162:	af ef       	ldi	r26, 0xFF	; 255
    3164:	8f 3f       	cpi	r24, 0xFF	; 255
    3166:	9a 07       	cpc	r25, r26
    3168:	09 f4       	brne	.+2      	; 0x316c <performCalc+0x276>
    316a:	9a c0       	rjmp	.+308    	; 0x32a0 <performCalc+0x3aa>
		itoa(operands[i],temp,10);
    316c:	8f 85       	ldd	r24, Y+15	; 0x0f
    316e:	98 89       	ldd	r25, Y+16	; 0x10
    3170:	9c 01       	movw	r18, r24
    3172:	22 0f       	add	r18, r18
    3174:	33 1f       	adc	r19, r19
    3176:	ce 01       	movw	r24, r28
    3178:	01 96       	adiw	r24, 0x01	; 1
    317a:	82 0f       	add	r24, r18
    317c:	93 1f       	adc	r25, r19
    317e:	fc 01       	movw	r30, r24
    3180:	bc 96       	adiw	r30, 0x2c	; 44
    3182:	80 81       	ld	r24, Z
    3184:	91 81       	ldd	r25, Z+1	; 0x01
    3186:	9e 01       	movw	r18, r28
    3188:	21 5b       	subi	r18, 0xB1	; 177
    318a:	3f 4f       	sbci	r19, 0xFF	; 255
    318c:	b9 01       	movw	r22, r18
    318e:	4a e0       	ldi	r20, 0x0A	; 10
    3190:	50 e0       	ldi	r21, 0x00	; 0
    3192:	0e 94 17 1a 	call	0x342e	; 0x342e <itoa>
		LCD_displayStringRowColumn(1, 0, temp);
    3196:	9e 01       	movw	r18, r28
    3198:	21 5b       	subi	r18, 0xB1	; 177
    319a:	3f 4f       	sbci	r19, 0xFF	; 255
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	60 e0       	ldi	r22, 0x00	; 0
    31a0:	a9 01       	movw	r20, r18
    31a2:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayStringRowColumn>
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	aa ef       	ldi	r26, 0xFA	; 250
    31ac:	b3 e4       	ldi	r27, 0x43	; 67
    31ae:	8b 87       	std	Y+11, r24	; 0x0b
    31b0:	9c 87       	std	Y+12, r25	; 0x0c
    31b2:	ad 87       	std	Y+13, r26	; 0x0d
    31b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    31bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	4a e7       	ldi	r20, 0x7A	; 122
    31c4:	55 e4       	ldi	r21, 0x45	; 69
    31c6:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	8f 83       	std	Y+7, r24	; 0x07
    31d0:	98 87       	std	Y+8, r25	; 0x08
    31d2:	a9 87       	std	Y+9, r26	; 0x09
    31d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31d6:	6f 81       	ldd	r22, Y+7	; 0x07
    31d8:	78 85       	ldd	r23, Y+8	; 0x08
    31da:	89 85       	ldd	r24, Y+9	; 0x09
    31dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e8       	ldi	r20, 0x80	; 128
    31e4:	5f e3       	ldi	r21, 0x3F	; 63
    31e6:	0e 94 77 03 	call	0x6ee	; 0x6ee <__ltsf2>
    31ea:	88 23       	and	r24, r24
    31ec:	2c f4       	brge	.+10     	; 0x31f8 <performCalc+0x302>
		__ticks = 1;
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	9e 83       	std	Y+6, r25	; 0x06
    31f4:	8d 83       	std	Y+5, r24	; 0x05
    31f6:	3f c0       	rjmp	.+126    	; 0x3276 <performCalc+0x380>
	else if (__tmp > 65535)
    31f8:	6f 81       	ldd	r22, Y+7	; 0x07
    31fa:	78 85       	ldd	r23, Y+8	; 0x08
    31fc:	89 85       	ldd	r24, Y+9	; 0x09
    31fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	3f ef       	ldi	r19, 0xFF	; 255
    3204:	4f e7       	ldi	r20, 0x7F	; 127
    3206:	57 e4       	ldi	r21, 0x47	; 71
    3208:	0e 94 17 03 	call	0x62e	; 0x62e <__gtsf2>
    320c:	18 16       	cp	r1, r24
    320e:	4c f5       	brge	.+82     	; 0x3262 <performCalc+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3210:	6b 85       	ldd	r22, Y+11	; 0x0b
    3212:	7c 85       	ldd	r23, Y+12	; 0x0c
    3214:	8d 85       	ldd	r24, Y+13	; 0x0d
    3216:	9e 85       	ldd	r25, Y+14	; 0x0e
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e2       	ldi	r20, 0x20	; 32
    321e:	51 e4       	ldi	r21, 0x41	; 65
    3220:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	bc 01       	movw	r22, r24
    322a:	cd 01       	movw	r24, r26
    322c:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	9e 83       	std	Y+6, r25	; 0x06
    3236:	8d 83       	std	Y+5, r24	; 0x05
    3238:	0f c0       	rjmp	.+30     	; 0x3258 <performCalc+0x362>
    323a:	80 e9       	ldi	r24, 0x90	; 144
    323c:	91 e0       	ldi	r25, 0x01	; 1
    323e:	9c 83       	std	Y+4, r25	; 0x04
    3240:	8b 83       	std	Y+3, r24	; 0x03
    3242:	8b 81       	ldd	r24, Y+3	; 0x03
    3244:	9c 81       	ldd	r25, Y+4	; 0x04
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	f1 f7       	brne	.-4      	; 0x3246 <performCalc+0x350>
    324a:	9c 83       	std	Y+4, r25	; 0x04
    324c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    324e:	8d 81       	ldd	r24, Y+5	; 0x05
    3250:	9e 81       	ldd	r25, Y+6	; 0x06
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	9e 83       	std	Y+6, r25	; 0x06
    3256:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3258:	8d 81       	ldd	r24, Y+5	; 0x05
    325a:	9e 81       	ldd	r25, Y+6	; 0x06
    325c:	00 97       	sbiw	r24, 0x00	; 0
    325e:	69 f7       	brne	.-38     	; 0x323a <performCalc+0x344>
    3260:	14 c0       	rjmp	.+40     	; 0x328a <performCalc+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3262:	6f 81       	ldd	r22, Y+7	; 0x07
    3264:	78 85       	ldd	r23, Y+8	; 0x08
    3266:	89 85       	ldd	r24, Y+9	; 0x09
    3268:	9a 85       	ldd	r25, Y+10	; 0x0a
    326a:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	9e 83       	std	Y+6, r25	; 0x06
    3274:	8d 83       	std	Y+5, r24	; 0x05
    3276:	8d 81       	ldd	r24, Y+5	; 0x05
    3278:	9e 81       	ldd	r25, Y+6	; 0x06
    327a:	9a 83       	std	Y+2, r25	; 0x02
    327c:	89 83       	std	Y+1, r24	; 0x01
    327e:	89 81       	ldd	r24, Y+1	; 0x01
    3280:	9a 81       	ldd	r25, Y+2	; 0x02
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	f1 f7       	brne	.-4      	; 0x3282 <performCalc+0x38c>
    3286:	9a 83       	std	Y+2, r25	; 0x02
    3288:	89 83       	std	Y+1, r24	; 0x01
			operands[j] = atoi(temp);
			j++;

		}
	}
	for (int i=0;i<17;i++) {
    328a:	8f 85       	ldd	r24, Y+15	; 0x0f
    328c:	98 89       	ldd	r25, Y+16	; 0x10
    328e:	01 96       	adiw	r24, 0x01	; 1
    3290:	98 8b       	std	Y+16, r25	; 0x10
    3292:	8f 87       	std	Y+15, r24	; 0x0f
    3294:	8f 85       	ldd	r24, Y+15	; 0x0f
    3296:	98 89       	ldd	r25, Y+16	; 0x10
    3298:	81 31       	cpi	r24, 0x11	; 17
    329a:	91 05       	cpc	r25, r1
    329c:	0c f4       	brge	.+2      	; 0x32a0 <performCalc+0x3aa>
    329e:	54 cf       	rjmp	.-344    	; 0x3148 <performCalc+0x252>
		LCD_displayStringRowColumn(1, 0, temp);
		_delay_ms(500);

	}

}
    32a0:	c2 5a       	subi	r28, 0xA2	; 162
    32a2:	df 4f       	sbci	r29, 0xFF	; 255
    32a4:	0f b6       	in	r0, 0x3f	; 63
    32a6:	f8 94       	cli
    32a8:	de bf       	out	0x3e, r29	; 62
    32aa:	0f be       	out	0x3f, r0	; 63
    32ac:	cd bf       	out	0x3d, r28	; 61
    32ae:	cf 91       	pop	r28
    32b0:	df 91       	pop	r29
    32b2:	1f 91       	pop	r17
    32b4:	0f 91       	pop	r16
    32b6:	08 95       	ret

000032b8 <substr>:

void substr(uint8 *x, uint8 *y, uint8 start, uint8 end) {
    32b8:	df 93       	push	r29
    32ba:	cf 93       	push	r28
    32bc:	cd b7       	in	r28, 0x3d	; 61
    32be:	de b7       	in	r29, 0x3e	; 62
    32c0:	2c 97       	sbiw	r28, 0x0c	; 12
    32c2:	0f b6       	in	r0, 0x3f	; 63
    32c4:	f8 94       	cli
    32c6:	de bf       	out	0x3e, r29	; 62
    32c8:	0f be       	out	0x3f, r0	; 63
    32ca:	cd bf       	out	0x3d, r28	; 61
    32cc:	98 87       	std	Y+8, r25	; 0x08
    32ce:	8f 83       	std	Y+7, r24	; 0x07
    32d0:	7a 87       	std	Y+10, r23	; 0x0a
    32d2:	69 87       	std	Y+9, r22	; 0x09
    32d4:	4b 87       	std	Y+11, r20	; 0x0b
    32d6:	2c 87       	std	Y+12, r18	; 0x0c
	for (int i = 0; i < 16; i++)
    32d8:	1e 82       	std	Y+6, r1	; 0x06
    32da:	1d 82       	std	Y+5, r1	; 0x05
    32dc:	0d c0       	rjmp	.+26     	; 0x32f8 <substr+0x40>
		y[i] = '\0';
    32de:	2d 81       	ldd	r18, Y+5	; 0x05
    32e0:	3e 81       	ldd	r19, Y+6	; 0x06
    32e2:	89 85       	ldd	r24, Y+9	; 0x09
    32e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e6:	fc 01       	movw	r30, r24
    32e8:	e2 0f       	add	r30, r18
    32ea:	f3 1f       	adc	r31, r19
    32ec:	10 82       	st	Z, r1
	}

}

void substr(uint8 *x, uint8 *y, uint8 start, uint8 end) {
	for (int i = 0; i < 16; i++)
    32ee:	8d 81       	ldd	r24, Y+5	; 0x05
    32f0:	9e 81       	ldd	r25, Y+6	; 0x06
    32f2:	01 96       	adiw	r24, 0x01	; 1
    32f4:	9e 83       	std	Y+6, r25	; 0x06
    32f6:	8d 83       	std	Y+5, r24	; 0x05
    32f8:	8d 81       	ldd	r24, Y+5	; 0x05
    32fa:	9e 81       	ldd	r25, Y+6	; 0x06
    32fc:	80 31       	cpi	r24, 0x10	; 16
    32fe:	91 05       	cpc	r25, r1
    3300:	74 f3       	brlt	.-36     	; 0x32de <substr+0x26>
		y[i] = '\0';
	for (int i = start, j = 0; i < end && j < 16; i++, j++) {
    3302:	8b 85       	ldd	r24, Y+11	; 0x0b
    3304:	88 2f       	mov	r24, r24
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	9c 83       	std	Y+4, r25	; 0x04
    330a:	8b 83       	std	Y+3, r24	; 0x03
    330c:	1a 82       	std	Y+2, r1	; 0x02
    330e:	19 82       	std	Y+1, r1	; 0x01
    3310:	1a c0       	rjmp	.+52     	; 0x3346 <substr+0x8e>
		y[j] = x[i];
    3312:	29 81       	ldd	r18, Y+1	; 0x01
    3314:	3a 81       	ldd	r19, Y+2	; 0x02
    3316:	89 85       	ldd	r24, Y+9	; 0x09
    3318:	9a 85       	ldd	r25, Y+10	; 0x0a
    331a:	dc 01       	movw	r26, r24
    331c:	a2 0f       	add	r26, r18
    331e:	b3 1f       	adc	r27, r19
    3320:	2b 81       	ldd	r18, Y+3	; 0x03
    3322:	3c 81       	ldd	r19, Y+4	; 0x04
    3324:	8f 81       	ldd	r24, Y+7	; 0x07
    3326:	98 85       	ldd	r25, Y+8	; 0x08
    3328:	fc 01       	movw	r30, r24
    332a:	e2 0f       	add	r30, r18
    332c:	f3 1f       	adc	r31, r19
    332e:	80 81       	ld	r24, Z
    3330:	8c 93       	st	X, r24
}

void substr(uint8 *x, uint8 *y, uint8 start, uint8 end) {
	for (int i = 0; i < 16; i++)
		y[i] = '\0';
	for (int i = start, j = 0; i < end && j < 16; i++, j++) {
    3332:	8b 81       	ldd	r24, Y+3	; 0x03
    3334:	9c 81       	ldd	r25, Y+4	; 0x04
    3336:	01 96       	adiw	r24, 0x01	; 1
    3338:	9c 83       	std	Y+4, r25	; 0x04
    333a:	8b 83       	std	Y+3, r24	; 0x03
    333c:	89 81       	ldd	r24, Y+1	; 0x01
    333e:	9a 81       	ldd	r25, Y+2	; 0x02
    3340:	01 96       	adiw	r24, 0x01	; 1
    3342:	9a 83       	std	Y+2, r25	; 0x02
    3344:	89 83       	std	Y+1, r24	; 0x01
    3346:	8c 85       	ldd	r24, Y+12	; 0x0c
    3348:	28 2f       	mov	r18, r24
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	8b 81       	ldd	r24, Y+3	; 0x03
    334e:	9c 81       	ldd	r25, Y+4	; 0x04
    3350:	82 17       	cp	r24, r18
    3352:	93 07       	cpc	r25, r19
    3354:	2c f4       	brge	.+10     	; 0x3360 <substr+0xa8>
    3356:	89 81       	ldd	r24, Y+1	; 0x01
    3358:	9a 81       	ldd	r25, Y+2	; 0x02
    335a:	80 31       	cpi	r24, 0x10	; 16
    335c:	91 05       	cpc	r25, r1
    335e:	cc f2       	brlt	.-78     	; 0x3312 <substr+0x5a>
		y[j] = x[i];
	}
}
    3360:	2c 96       	adiw	r28, 0x0c	; 12
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	de bf       	out	0x3e, r29	; 62
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	cf 91       	pop	r28
    336e:	df 91       	pop	r29
    3370:	08 95       	ret

00003372 <main>:
 *  Created on: Oct 6, 2023
 *      Author: adham
 */
#include "Application/application.h"

int main(void){
    3372:	df 93       	push	r29
    3374:	cf 93       	push	r28
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62

//	}
//	while(1){

//	}
	APPLICATION_setup();
    337a:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <APPLICATION_setup>
	while(1){
		APPLICATION_loop();
    337e:	0e 94 92 16 	call	0x2d24	; 0x2d24 <APPLICATION_loop>
    3382:	fd cf       	rjmp	.-6      	; 0x337e <main+0xc>

00003384 <__prologue_saves__>:
    3384:	2f 92       	push	r2
    3386:	3f 92       	push	r3
    3388:	4f 92       	push	r4
    338a:	5f 92       	push	r5
    338c:	6f 92       	push	r6
    338e:	7f 92       	push	r7
    3390:	8f 92       	push	r8
    3392:	9f 92       	push	r9
    3394:	af 92       	push	r10
    3396:	bf 92       	push	r11
    3398:	cf 92       	push	r12
    339a:	df 92       	push	r13
    339c:	ef 92       	push	r14
    339e:	ff 92       	push	r15
    33a0:	0f 93       	push	r16
    33a2:	1f 93       	push	r17
    33a4:	cf 93       	push	r28
    33a6:	df 93       	push	r29
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
    33ac:	ca 1b       	sub	r28, r26
    33ae:	db 0b       	sbc	r29, r27
    33b0:	0f b6       	in	r0, 0x3f	; 63
    33b2:	f8 94       	cli
    33b4:	de bf       	out	0x3e, r29	; 62
    33b6:	0f be       	out	0x3f, r0	; 63
    33b8:	cd bf       	out	0x3d, r28	; 61
    33ba:	09 94       	ijmp

000033bc <__epilogue_restores__>:
    33bc:	2a 88       	ldd	r2, Y+18	; 0x12
    33be:	39 88       	ldd	r3, Y+17	; 0x11
    33c0:	48 88       	ldd	r4, Y+16	; 0x10
    33c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    33c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    33c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    33c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    33ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    33cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    33ce:	b9 84       	ldd	r11, Y+9	; 0x09
    33d0:	c8 84       	ldd	r12, Y+8	; 0x08
    33d2:	df 80       	ldd	r13, Y+7	; 0x07
    33d4:	ee 80       	ldd	r14, Y+6	; 0x06
    33d6:	fd 80       	ldd	r15, Y+5	; 0x05
    33d8:	0c 81       	ldd	r16, Y+4	; 0x04
    33da:	1b 81       	ldd	r17, Y+3	; 0x03
    33dc:	aa 81       	ldd	r26, Y+2	; 0x02
    33de:	b9 81       	ldd	r27, Y+1	; 0x01
    33e0:	ce 0f       	add	r28, r30
    33e2:	d1 1d       	adc	r29, r1
    33e4:	0f b6       	in	r0, 0x3f	; 63
    33e6:	f8 94       	cli
    33e8:	de bf       	out	0x3e, r29	; 62
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	cd bf       	out	0x3d, r28	; 61
    33ee:	ed 01       	movw	r28, r26
    33f0:	08 95       	ret

000033f2 <atoi>:
    33f2:	fc 01       	movw	r30, r24
    33f4:	88 27       	eor	r24, r24
    33f6:	99 27       	eor	r25, r25
    33f8:	e8 94       	clt
    33fa:	21 91       	ld	r18, Z+
    33fc:	20 32       	cpi	r18, 0x20	; 32
    33fe:	e9 f3       	breq	.-6      	; 0x33fa <atoi+0x8>
    3400:	29 30       	cpi	r18, 0x09	; 9
    3402:	10 f0       	brcs	.+4      	; 0x3408 <atoi+0x16>
    3404:	2e 30       	cpi	r18, 0x0E	; 14
    3406:	c8 f3       	brcs	.-14     	; 0x33fa <atoi+0x8>
    3408:	2b 32       	cpi	r18, 0x2B	; 43
    340a:	41 f0       	breq	.+16     	; 0x341c <atoi+0x2a>
    340c:	2d 32       	cpi	r18, 0x2D	; 45
    340e:	39 f4       	brne	.+14     	; 0x341e <atoi+0x2c>
    3410:	68 94       	set
    3412:	04 c0       	rjmp	.+8      	; 0x341c <atoi+0x2a>
    3414:	0e 94 38 1a 	call	0x3470	; 0x3470 <__mulhi_const_10>
    3418:	82 0f       	add	r24, r18
    341a:	91 1d       	adc	r25, r1
    341c:	21 91       	ld	r18, Z+
    341e:	20 53       	subi	r18, 0x30	; 48
    3420:	2a 30       	cpi	r18, 0x0A	; 10
    3422:	c0 f3       	brcs	.-16     	; 0x3414 <atoi+0x22>
    3424:	1e f4       	brtc	.+6      	; 0x342c <atoi+0x3a>
    3426:	90 95       	com	r25
    3428:	81 95       	neg	r24
    342a:	9f 4f       	sbci	r25, 0xFF	; 255
    342c:	08 95       	ret

0000342e <itoa>:
    342e:	fb 01       	movw	r30, r22
    3430:	9f 01       	movw	r18, r30
    3432:	e8 94       	clt
    3434:	42 30       	cpi	r20, 0x02	; 2
    3436:	c4 f0       	brlt	.+48     	; 0x3468 <itoa+0x3a>
    3438:	45 32       	cpi	r20, 0x25	; 37
    343a:	b4 f4       	brge	.+44     	; 0x3468 <itoa+0x3a>
    343c:	4a 30       	cpi	r20, 0x0A	; 10
    343e:	29 f4       	brne	.+10     	; 0x344a <itoa+0x1c>
    3440:	97 fb       	bst	r25, 7
    3442:	1e f4       	brtc	.+6      	; 0x344a <itoa+0x1c>
    3444:	90 95       	com	r25
    3446:	81 95       	neg	r24
    3448:	9f 4f       	sbci	r25, 0xFF	; 255
    344a:	64 2f       	mov	r22, r20
    344c:	77 27       	eor	r23, r23
    344e:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__udivmodhi4>
    3452:	80 5d       	subi	r24, 0xD0	; 208
    3454:	8a 33       	cpi	r24, 0x3A	; 58
    3456:	0c f0       	brlt	.+2      	; 0x345a <itoa+0x2c>
    3458:	89 5d       	subi	r24, 0xD9	; 217
    345a:	81 93       	st	Z+, r24
    345c:	cb 01       	movw	r24, r22
    345e:	00 97       	sbiw	r24, 0x00	; 0
    3460:	a1 f7       	brne	.-24     	; 0x344a <itoa+0x1c>
    3462:	16 f4       	brtc	.+4      	; 0x3468 <itoa+0x3a>
    3464:	5d e2       	ldi	r21, 0x2D	; 45
    3466:	51 93       	st	Z+, r21
    3468:	10 82       	st	Z, r1
    346a:	c9 01       	movw	r24, r18
    346c:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <strrev>

00003470 <__mulhi_const_10>:
    3470:	7a e0       	ldi	r23, 0x0A	; 10
    3472:	97 9f       	mul	r25, r23
    3474:	90 2d       	mov	r25, r0
    3476:	87 9f       	mul	r24, r23
    3478:	80 2d       	mov	r24, r0
    347a:	91 0d       	add	r25, r1
    347c:	11 24       	eor	r1, r1
    347e:	08 95       	ret

00003480 <strrev>:
    3480:	dc 01       	movw	r26, r24
    3482:	fc 01       	movw	r30, r24
    3484:	67 2f       	mov	r22, r23
    3486:	71 91       	ld	r23, Z+
    3488:	77 23       	and	r23, r23
    348a:	e1 f7       	brne	.-8      	; 0x3484 <strrev+0x4>
    348c:	32 97       	sbiw	r30, 0x02	; 2
    348e:	04 c0       	rjmp	.+8      	; 0x3498 <strrev+0x18>
    3490:	7c 91       	ld	r23, X
    3492:	6d 93       	st	X+, r22
    3494:	70 83       	st	Z, r23
    3496:	62 91       	ld	r22, -Z
    3498:	ae 17       	cp	r26, r30
    349a:	bf 07       	cpc	r27, r31
    349c:	c8 f3       	brcs	.-14     	; 0x3490 <strrev+0x10>
    349e:	08 95       	ret

000034a0 <__udivmodhi4>:
    34a0:	aa 1b       	sub	r26, r26
    34a2:	bb 1b       	sub	r27, r27
    34a4:	51 e1       	ldi	r21, 0x11	; 17
    34a6:	07 c0       	rjmp	.+14     	; 0x34b6 <__udivmodhi4_ep>

000034a8 <__udivmodhi4_loop>:
    34a8:	aa 1f       	adc	r26, r26
    34aa:	bb 1f       	adc	r27, r27
    34ac:	a6 17       	cp	r26, r22
    34ae:	b7 07       	cpc	r27, r23
    34b0:	10 f0       	brcs	.+4      	; 0x34b6 <__udivmodhi4_ep>
    34b2:	a6 1b       	sub	r26, r22
    34b4:	b7 0b       	sbc	r27, r23

000034b6 <__udivmodhi4_ep>:
    34b6:	88 1f       	adc	r24, r24
    34b8:	99 1f       	adc	r25, r25
    34ba:	5a 95       	dec	r21
    34bc:	a9 f7       	brne	.-22     	; 0x34a8 <__udivmodhi4_loop>
    34be:	80 95       	com	r24
    34c0:	90 95       	com	r25
    34c2:	bc 01       	movw	r22, r24
    34c4:	cd 01       	movw	r24, r26
    34c6:	08 95       	ret

000034c8 <_exit>:
    34c8:	f8 94       	cli

000034ca <__stop_program>:
    34ca:	ff cf       	rjmp	.-2      	; 0x34ca <__stop_program>
